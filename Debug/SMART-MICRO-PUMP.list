
SMART-MICRO-PUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000394c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003a88  08003a88  00013a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aac  08003aac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aac  08003aac  00013aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab4  08003ab4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000000c  08003ac8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003ac8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b724  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c28  00000000  00000000  0002b759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002d388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  0002df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013dd3  00000000  00000000  0002ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be41  00000000  00000000  00042853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fb6b  00000000  00000000  0004e694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce1ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003158  00000000  00000000  000ce254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003a70 	.word	0x08003a70

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003a70 	.word	0x08003a70

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000478:	f000 fbed 	bl	8000c56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();	//	SYSCLK == 32 MHz (16 MHz HSI + PLL)
 800047c:	f000 f822 	bl	80004c4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000480:	f000 f9ce 	bl	8000820 <MX_GPIO_Init>
	MX_ADC_Init();			// ADC for reading sensors
 8000484:	f000 f86c 	bl	8000560 <MX_ADC_Init>
	MX_TIM4_Init();			// Timer 4 for PWM generation
 8000488:	f000 f8c2 	bl	8000610 <MX_TIM4_Init>
	MX_TIM6_Init();			// Timer 6 for timed button debounce
 800048c:	f000 f932 	bl	80006f4 <MX_TIM6_Init>
	MX_TIM7_Init();			// Timer 7 for sampling period
 8000490:	f000 f966 	bl	8000760 <MX_TIM7_Init>
	MX_USART1_UART_Init();	// UART for receiving commands and outputting data
 8000494:	f000 f99a 	bl	80007cc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Timer 4 for PWM generation
 8000498:	2100      	movs	r1, #0
 800049a:	4807      	ldr	r0, [pc, #28]	; (80004b8 <main+0x44>)
 800049c:	f002 f8d8 	bl	8002650 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim7);				// Timer 7 for sampling period
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <main+0x48>)
 80004a2:	f002 f83b 	bl	800251c <HAL_TIM_Base_Start_IT>
	while (1)
	{
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004a6:	2180      	movs	r1, #128	; 0x80
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <main+0x4c>)
 80004aa:	f001 fa1f 	bl	80018ec <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004b2:	f000 fc3f 	bl	8000d34 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80004b6:	e7f6      	b.n	80004a6 <main+0x32>
 80004b8:	20000028 	.word	0x20000028
 80004bc:	20000140 	.word	0x20000140
 80004c0:	40020400 	.word	0x40020400

080004c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b092      	sub	sp, #72	; 0x48
 80004c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	f107 0314 	add.w	r3, r7, #20
 80004ce:	2234      	movs	r2, #52	; 0x34
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fac4 	bl	8003a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	463b      	mov	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e6:	4b1d      	ldr	r3, [pc, #116]	; (800055c <SystemClock_Config+0x98>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <SystemClock_Config+0x98>)
 80004f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004f4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f6:	2302      	movs	r3, #2
 80004f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fa:	2301      	movs	r3, #1
 80004fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	2310      	movs	r3, #16
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000506:	2300      	movs	r3, #0
 8000508:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800050a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800050e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000510:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000514:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fa22 	bl	8001964 <HAL_RCC_OscConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000526:	f000 f9d1 	bl	80008cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052a:	230f      	movs	r3, #15
 800052c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800052e:	2303      	movs	r3, #3
 8000530:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053e:	463b      	mov	r3, r7
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fd3e 	bl	8001fc4 <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800054e:	f000 f9bd 	bl	80008cc <Error_Handler>
  }
}
 8000552:	bf00      	nop
 8000554:	3748      	adds	r7, #72	; 0x48
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40007000 	.word	0x40007000

08000560 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_ADC_Init+0xa8>)
 8000572:	4a26      	ldr	r2, [pc, #152]	; (800060c <MX_ADC_Init+0xac>)
 8000574:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000576:	4b24      	ldr	r3, [pc, #144]	; (8000608 <MX_ADC_Init+0xa8>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_ADC_Init+0xa8>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000582:	4b21      	ldr	r3, [pc, #132]	; (8000608 <MX_ADC_Init+0xa8>)
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <MX_ADC_Init+0xa8>)
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800058e:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <MX_ADC_Init+0xa8>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <MX_ADC_Init+0xa8>)
 8000596:	2200      	movs	r2, #0
 8000598:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800059a:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <MX_ADC_Init+0xa8>)
 800059c:	2200      	movs	r2, #0
 800059e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <MX_ADC_Init+0xa8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <MX_ADC_Init+0xa8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <MX_ADC_Init+0xa8>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_ADC_Init+0xa8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <MX_ADC_Init+0xa8>)
 80005be:	2210      	movs	r2, #16
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b11      	ldr	r3, [pc, #68]	; (8000608 <MX_ADC_Init+0xa8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <MX_ADC_Init+0xa8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <MX_ADC_Init+0xa8>)
 80005d2:	f000 fbd1 	bl	8000d78 <HAL_ADC_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80005dc:	f000 f976 	bl	80008cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005e0:	2305      	movs	r3, #5
 80005e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	4619      	mov	r1, r3
 80005f0:	4805      	ldr	r0, [pc, #20]	; (8000608 <MX_ADC_Init+0xa8>)
 80005f2:	f000 fd07 	bl	8001004 <HAL_ADC_ConfigChannel>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80005fc:	f000 f966 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000ec 	.word	0x200000ec
 800060c:	40012400 	.word	0x40012400

08000610 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000616:	f107 0318 	add.w	r3, r7, #24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <MX_TIM4_Init+0xdc>)
 800063c:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <MX_TIM4_Init+0xe0>)
 800063e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (32 - 1);
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <MX_TIM4_Init+0xdc>)
 8000642:	221f      	movs	r2, #31
 8000644:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000646:	4b29      	ldr	r3, [pc, #164]	; (80006ec <MX_TIM4_Init+0xdc>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (100 - 1);
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_TIM4_Init+0xdc>)
 800064e:	2263      	movs	r2, #99	; 0x63
 8000650:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000652:	4b26      	ldr	r3, [pc, #152]	; (80006ec <MX_TIM4_Init+0xdc>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_TIM4_Init+0xdc>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800065e:	4823      	ldr	r0, [pc, #140]	; (80006ec <MX_TIM4_Init+0xdc>)
 8000660:	f001 ff1c 	bl	800249c <HAL_TIM_Base_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM4_Init+0x5e>
  {
    Error_Handler();
 800066a:	f000 f92f 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000674:	f107 0318 	add.w	r3, r7, #24
 8000678:	4619      	mov	r1, r3
 800067a:	481c      	ldr	r0, [pc, #112]	; (80006ec <MX_TIM4_Init+0xdc>)
 800067c:	f002 fa18 	bl	8002ab0 <HAL_TIM_ConfigClockSource>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000686:	f000 f921 	bl	80008cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800068a:	4818      	ldr	r0, [pc, #96]	; (80006ec <MX_TIM4_Init+0xdc>)
 800068c:	f001 ff98 	bl	80025c0 <HAL_TIM_PWM_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000696:	f000 f919 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4619      	mov	r1, r3
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <MX_TIM4_Init+0xdc>)
 80006aa:	f002 fd05 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM4_Init+0xa8>
  {
    Error_Handler();
 80006b4:	f000 f90a 	bl	80008cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <MX_TIM4_Init+0xdc>)
 80006d0:	f002 f930 	bl	8002934 <HAL_TIM_PWM_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM4_Init+0xce>
  {
    Error_Handler();
 80006da:	f000 f8f7 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <MX_TIM4_Init+0xdc>)
 80006e0:	f000 f9be 	bl	8000a60 <HAL_TIM_MspPostInit>

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40000800 	.word	0x40000800

080006f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_TIM6_Init+0x64>)
 8000704:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_TIM6_Init+0x68>)
 8000706:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (32 - 1);
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_TIM6_Init+0x64>)
 800070a:	221f      	movs	r2, #31
 800070c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_TIM6_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (1000 - 1);
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_TIM6_Init+0x64>)
 8000716:	f240 32e7 	movw	r2, #999	; 0x3e7
 800071a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_TIM6_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_TIM6_Init+0x64>)
 8000724:	f001 feba 	bl	800249c <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800072e:	f000 f8cd 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <MX_TIM6_Init+0x64>)
 8000740:	f002 fcba 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800074a:	f000 f8bf 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000ac 	.word	0x200000ac
 800075c:	40001000 	.word	0x40001000

08000760 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_TIM7_Init+0x64>)
 8000770:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <MX_TIM7_Init+0x68>)
 8000772:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (32 -1);
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_TIM7_Init+0x64>)
 8000776:	221f      	movs	r2, #31
 8000778:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_TIM7_Init+0x64>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (10000 - 1);
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_TIM7_Init+0x64>)
 8000782:	f242 720f 	movw	r2, #9999	; 0x270f
 8000786:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_TIM7_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM7_Init+0x64>)
 8000790:	f001 fe84 	bl	800249c <HAL_TIM_Base_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800079a:	f000 f897 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_TIM7_Init+0x64>)
 80007ac:	f002 fc84 	bl	80030b8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80007b6:	f000 f889 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000140 	.word	0x20000140
 80007c8:	40001400 	.word	0x40001400

080007cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART1_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART1_UART_Init+0x4c>)
 8000804:	f002 fcb6 	bl	8003174 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f85d 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000068 	.word	0x20000068
 800081c:	40013800 	.word	0x40013800

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_GPIO_Init+0xa0>)
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <MX_GPIO_Init+0xa0>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	61d3      	str	r3, [r2, #28]
 8000842:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <MX_GPIO_Init+0xa0>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_GPIO_Init+0xa0>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_GPIO_Init+0xa0>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	61d3      	str	r3, [r2, #28]
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <MX_GPIO_Init+0xa0>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	4816      	ldr	r0, [pc, #88]	; (80008c4 <MX_GPIO_Init+0xa4>)
 800086c:	f001 f826 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_USER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000870:	2301      	movs	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4810      	ldr	r0, [pc, #64]	; (80008c8 <MX_GPIO_Init+0xa8>)
 8000886:	f000 fe99 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 030c 	add.w	r3, r7, #12
 800089e:	4619      	mov	r1, r3
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <MX_GPIO_Init+0xa4>)
 80008a2:	f000 fe8b 	bl	80015bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2006      	movs	r0, #6
 80008ac:	f000 fdd1 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b0:	2006      	movs	r0, #6
 80008b2:	f000 fdea 	bl	800148a <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40020000 	.word	0x40020000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <HAL_MspInit+0x58>)
 80008e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <HAL_MspInit+0x58>)
 80008e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008e8:	6253      	str	r3, [r2, #36]	; 0x24
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <HAL_MspInit+0x58>)
 80008ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_MspInit+0x58>)
 80008f8:	6a1b      	ldr	r3, [r3, #32]
 80008fa:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_MspInit+0x58>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6213      	str	r3, [r2, #32]
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_MspInit+0x58>)
 8000904:	6a1b      	ldr	r3, [r3, #32]
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_MspInit+0x58>)
 8000910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_MspInit+0x58>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000918:	6253      	str	r3, [r2, #36]	; 0x24
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_MspInit+0x58>)
 800091c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	40023800 	.word	0x40023800

08000934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <HAL_ADC_MspInit+0x74>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d123      	bne.n	800099e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <HAL_ADC_MspInit+0x78>)
 8000958:	6a1b      	ldr	r3, [r3, #32]
 800095a:	4a14      	ldr	r2, [pc, #80]	; (80009ac <HAL_ADC_MspInit+0x78>)
 800095c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000960:	6213      	str	r3, [r2, #32]
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_ADC_MspInit+0x78>)
 8000964:	6a1b      	ldr	r3, [r3, #32]
 8000966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <HAL_ADC_MspInit+0x78>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <HAL_ADC_MspInit+0x78>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	61d3      	str	r3, [r2, #28]
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <HAL_ADC_MspInit+0x78>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin|ADC_FLOW_Pin|ADC_TRIMPOT_Pin;
 8000986:	2338      	movs	r3, #56	; 0x38
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800098a:	2303      	movs	r3, #3
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <HAL_ADC_MspInit+0x7c>)
 800099a:	f000 fe0f 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800099e:	bf00      	nop
 80009a0:	3728      	adds	r7, #40	; 0x28
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40012400 	.word	0x40012400
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40020000 	.word	0x40020000

080009b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <HAL_TIM_Base_MspInit+0x9c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d10c      	bne.n	80009e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6253      	str	r3, [r2, #36]	; 0x24
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 80009d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	617b      	str	r3, [r7, #20]
 80009dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80009de:	e032      	b.n	8000a46 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <HAL_TIM_Base_MspInit+0xa4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d114      	bne.n	8000a14 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 80009ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6253      	str	r3, [r2, #36]	; 0x24
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 80009f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	202b      	movs	r0, #43	; 0x2b
 8000a08:	f000 fd23 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000a0c:	202b      	movs	r0, #43	; 0x2b
 8000a0e:	f000 fd3c 	bl	800148a <HAL_NVIC_EnableIRQ>
}
 8000a12:	e018      	b.n	8000a46 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_TIM_Base_MspInit+0xa8>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d113      	bne.n	8000a46 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	4a0c      	ldr	r2, [pc, #48]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 8000a24:	f043 0320 	orr.w	r3, r3, #32
 8000a28:	6253      	str	r3, [r2, #36]	; 0x24
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_Base_MspInit+0xa0>)
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	202c      	movs	r0, #44	; 0x2c
 8000a3c:	f000 fd09 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a40:	202c      	movs	r0, #44	; 0x2c
 8000a42:	f000 fd22 	bl	800148a <HAL_NVIC_EnableIRQ>
}
 8000a46:	bf00      	nop
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40000800 	.word	0x40000800
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40001000 	.word	0x40001000
 8000a5c:	40001400 	.word	0x40001400

08000a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b088      	sub	sp, #32
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <HAL_TIM_MspPostInit+0x64>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d11b      	bne.n	8000aba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_TIM_MspPostInit+0x68>)
 8000a84:	69db      	ldr	r3, [r3, #28]
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_TIM_MspPostInit+0x68>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	61d3      	str	r3, [r2, #28]
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_TIM_MspPostInit+0x68>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_PUMP_Pin;
 8000a9a:	2340      	movs	r3, #64	; 0x40
 8000a9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PUMP_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <HAL_TIM_MspPostInit+0x6c>)
 8000ab6:	f000 fd81 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000aba:	bf00      	nop
 8000abc:	3720      	adds	r7, #32
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40000800 	.word	0x40000800
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <HAL_UART_MspInit+0x8c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d130      	bne.n	8000b54 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_UART_MspInit+0x90>)
 8000af4:	6a1b      	ldr	r3, [r3, #32]
 8000af6:	4a1a      	ldr	r2, [pc, #104]	; (8000b60 <HAL_UART_MspInit+0x90>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6213      	str	r3, [r2, #32]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_UART_MspInit+0x90>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_UART_MspInit+0x90>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <HAL_UART_MspInit+0x90>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_UART_MspInit+0x90>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b34:	2307      	movs	r3, #7
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4809      	ldr	r0, [pc, #36]	; (8000b64 <HAL_UART_MspInit+0x94>)
 8000b40:	f000 fd3c 	bl	80015bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2100      	movs	r1, #0
 8000b48:	2025      	movs	r0, #37	; 0x25
 8000b4a:	f000 fc82 	bl	8001452 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b4e:	2025      	movs	r0, #37	; 0x25
 8000b50:	f000 fc9b 	bl	800148a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f8a5 	bl	8000cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f000 feb0 	bl	8001920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART1_IRQHandler+0x10>)
 8000bca:	f002 fb21 	bl	8003210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000068 	.word	0x20000068

08000bd8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <TIM6_IRQHandler+0x10>)
 8000bde:	f001 fdcd 	bl	800277c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000ac 	.word	0x200000ac

08000bec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <TIM7_IRQHandler+0x10>)
 8000bf2:	f001 fdc3 	bl	800277c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000140 	.word	0x20000140

08000c00 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c32:	f7ff ffe5 	bl	8000c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c36:	f002 feef 	bl	8003a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3a:	f7ff fc1b 	bl	8000474 <main>
  bx lr
 8000c3e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c48:	08003abc 	.word	0x08003abc
  ldr r2, =_sbss
 8000c4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c50:	20000184 	.word	0x20000184

08000c54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_IRQHandler>

08000c56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 fbeb 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f80e 	bl	8000c88 <HAL_InitTick>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fe2e 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_InitTick+0x68>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d022      	beq.n	8000ce2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_InitTick+0x68>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 fbf8 	bl	80014a6 <HAL_SYSTICK_Config>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d10f      	bne.n	8000cdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b0f      	cmp	r3, #15
 8000cc0:	d809      	bhi.n	8000cd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	6879      	ldr	r1, [r7, #4]
 8000cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cca:	f000 fbc2 	bl	8001452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_InitTick+0x70>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	e007      	b.n	8000ce6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	73fb      	strb	r3, [r7, #15]
 8000cda:	e004      	b.n	8000ce6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e001      	b.n	8000ce6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000004 	.word	0x20000004

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x1c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x20>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x1c>)
 8000d0c:	6013      	str	r3, [r2, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000180 	.word	0x20000180
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b02      	ldr	r3, [pc, #8]	; (8000d30 <HAL_GetTick+0x10>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	20000180 	.word	0x20000180

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff fff0 	bl	8000d20 <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	d004      	beq.n	8000d58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_Delay+0x40>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d58:	bf00      	nop
 8000d5a:	f7ff ffe1 	bl	8000d20 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d8f7      	bhi.n	8000d5a <HAL_Delay+0x26>
  {
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000008 	.word	0x20000008

08000d78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d101      	bne.n	8000d98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e127      	b.n	8000fe8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db4:	4b8e      	ldr	r3, [pc, #568]	; (8000ff0 <HAL_ADC_Init+0x278>)
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4a8d      	ldr	r2, [pc, #564]	; (8000ff0 <HAL_ADC_Init+0x278>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6213      	str	r3, [r2, #32]
 8000dc0:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <HAL_ADC_Init+0x278>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fdb1 	bl	8000934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 80ff 	bne.w	8000fde <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000de8:	f023 0302 	bic.w	r3, r3, #2
 8000dec:	f043 0202 	orr.w	r2, r3, #2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000df4:	4b7f      	ldr	r3, [pc, #508]	; (8000ff4 <HAL_ADC_Init+0x27c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	497c      	ldr	r1, [pc, #496]	; (8000ff4 <HAL_ADC_Init+0x27c>)
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e0e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e16:	4619      	mov	r1, r3
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1e:	6a3b      	ldr	r3, [r7, #32]
 8000e20:	fa93 f3a3 	rbit	r3, r3
 8000e24:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fab3 f383 	clz	r3, r3
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000e32:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000e5a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e66:	2b10      	cmp	r3, #16
 8000e68:	d007      	beq.n	8000e7a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000e72:	4313      	orrs	r3, r2
 8000e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e76:	4313      	orrs	r3, r2
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e84:	2b40      	cmp	r3, #64	; 0x40
 8000e86:	d04f      	beq.n	8000f28 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000e9a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6912      	ldr	r2, [r2, #16]
 8000ea0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000ea4:	d003      	beq.n	8000eae <HAL_ADC_Init+0x136>
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6912      	ldr	r2, [r2, #16]
 8000eaa:	2a01      	cmp	r2, #1
 8000eac:	d102      	bne.n	8000eb4 <HAL_ADC_Init+0x13c>
 8000eae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb2:	e000      	b.n	8000eb6 <HAL_ADC_Init+0x13e>
 8000eb4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000eb6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d125      	bne.n	8000f14 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d114      	bne.n	8000efc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000edc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	fa92 f2a2 	rbit	r2, r2
 8000ee4:	617a      	str	r2, [r7, #20]
  return result;
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	fab2 f282 	clz	r2, r2
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	4093      	lsls	r3, r2
 8000ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8000efa:	e00b      	b.n	8000f14 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	f043 0220 	orr.w	r2, r3, #32
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0c:	f043 0201 	orr.w	r2, r3, #1
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_ADC_Init+0x280>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <HAL_ADC_Init+0x284>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000f38:	430b      	orrs	r3, r1
 8000f3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_Init+0x1d6>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d119      	bne.n	8000f82 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f54:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000f62:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	fa92 f2a2 	rbit	r2, r2
 8000f6a:	60fa      	str	r2, [r7, #12]
  return result;
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	fab2 f282 	clz	r2, r2
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	fa03 f202 	lsl.w	r2, r3, r2
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f80:	e007      	b.n	8000f92 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000f90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <HAL_ADC_Init+0x288>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10b      	bne.n	8000fba <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fac:	f023 0303 	bic.w	r3, r3, #3
 8000fb0:	f043 0201 	orr.w	r2, r3, #1
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fb8:	e014      	b.n	8000fe4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f023 0312 	bic.w	r3, r3, #18
 8000fc2:	f043 0210 	orr.w	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000fdc:	e002      	b.n	8000fe4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3738      	adds	r7, #56	; 0x38
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40012700 	.word	0x40012700
 8000ff8:	fcfc16ff 	.word	0xfcfc16ff
 8000ffc:	c0fff18d 	.word	0xc0fff18d
 8001000:	bf80fffe 	.word	0xbf80fffe

08001004 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_ADC_ConfigChannel+0x20>
 8001020:	2302      	movs	r3, #2
 8001022:	e134      	b.n	800128e <HAL_ADC_ConfigChannel+0x28a>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b06      	cmp	r3, #6
 8001032:	d81c      	bhi.n	800106e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	3b05      	subs	r3, #5
 8001046:	221f      	movs	r2, #31
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	4019      	ands	r1, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6818      	ldr	r0, [r3, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	3b05      	subs	r3, #5
 8001060:	fa00 f203 	lsl.w	r2, r0, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
 800106c:	e07e      	b.n	800116c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	d81c      	bhi.n	80010b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	3b23      	subs	r3, #35	; 0x23
 8001088:	221f      	movs	r2, #31
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	4019      	ands	r1, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6818      	ldr	r0, [r3, #0]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	3b23      	subs	r3, #35	; 0x23
 80010a2:	fa00 f203 	lsl.w	r2, r0, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	430a      	orrs	r2, r1
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80010ae:	e05d      	b.n	800116c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d81c      	bhi.n	80010f2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b41      	subs	r3, #65	; 0x41
 80010ca:	221f      	movs	r2, #31
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4019      	ands	r1, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	3b41      	subs	r3, #65	; 0x41
 80010e4:	fa00 f203 	lsl.w	r2, r0, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	639a      	str	r2, [r3, #56]	; 0x38
 80010f0:	e03c      	b.n	800116c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b18      	cmp	r3, #24
 80010f8:	d81c      	bhi.n	8001134 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b5f      	subs	r3, #95	; 0x5f
 800110c:	221f      	movs	r2, #31
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	4019      	ands	r1, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	3b5f      	subs	r3, #95	; 0x5f
 8001126:	fa00 f203 	lsl.w	r2, r0, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
 8001132:	e01b      	b.n	800116c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b7d      	subs	r3, #125	; 0x7d
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b7d      	subs	r3, #125	; 0x7d
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b09      	cmp	r3, #9
 8001172:	d81a      	bhi.n	80011aa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6959      	ldr	r1, [r3, #20]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	2207      	movs	r2, #7
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	4019      	ands	r1, r3
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	6898      	ldr	r0, [r3, #8]
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4613      	mov	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	fa00 f203 	lsl.w	r2, r0, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	e042      	b.n	8001230 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b13      	cmp	r3, #19
 80011b0:	d81c      	bhi.n	80011ec <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6919      	ldr	r1, [r3, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	3b1e      	subs	r3, #30
 80011c4:	2207      	movs	r2, #7
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4019      	ands	r1, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	6898      	ldr	r0, [r3, #8]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	3b1e      	subs	r3, #30
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	611a      	str	r2, [r3, #16]
 80011ea:	e021      	b.n	8001230 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b1a      	cmp	r3, #26
 80011f2:	d81c      	bhi.n	800122e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68d9      	ldr	r1, [r3, #12]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b3c      	subs	r3, #60	; 0x3c
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	4019      	ands	r1, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	6898      	ldr	r0, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	3b3c      	subs	r3, #60	; 0x3c
 8001220:	fa00 f203 	lsl.w	r2, r0, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	e000      	b.n	8001230 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800122e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b10      	cmp	r3, #16
 8001236:	d003      	beq.n	8001240 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800123c:	2b11      	cmp	r3, #17
 800123e:	d121      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <HAL_ADC_ConfigChannel+0x294>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d11b      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_ADC_ConfigChannel+0x294>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a11      	ldr	r2, [pc, #68]	; (8001298 <HAL_ADC_ConfigChannel+0x294>)
 8001252:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001256:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b10      	cmp	r3, #16
 800125e:	d111      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_ADC_ConfigChannel+0x298>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_ADC_ConfigChannel+0x29c>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9a      	lsrs	r2, r3, #18
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001276:	e002      	b.n	800127e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	3b01      	subs	r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f9      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800128c:	7bfb      	ldrb	r3, [r7, #15]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	40012700 	.word	0x40012700
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c0:	4013      	ands	r3, r2
 80012c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <__NVIC_SetPriorityGrouping+0x44>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	60d3      	str	r3, [r2, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <__NVIC_GetPriorityGrouping+0x18>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	f003 0307 	and.w	r3, r3, #7
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	db0b      	blt.n	8001332 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	f003 021f 	and.w	r2, r3, #31
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <__NVIC_EnableIRQ+0x34>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	095b      	lsrs	r3, r3, #5
 8001328:	2001      	movs	r0, #1
 800132a:	fa00 f202 	lsl.w	r2, r0, r2
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff90 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	; (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff2d 	bl	80012a4 <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff42 	bl	80012ec <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff35 	bl	8001308 <__NVIC_EnableIRQ>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffa2 	bl	80013f8 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d008      	beq.n	80014e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2204      	movs	r2, #4
 80014da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e022      	b.n	800152e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f022 020e 	bic.w	r2, r2, #14
 80014f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f003 021c 	and.w	r2, r3, #28
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800152e:	4618      	mov	r0, r3
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d005      	beq.n	800155c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2204      	movs	r2, #4
 8001554:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e029      	b.n	80015b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 020e 	bic.w	r2, r2, #14
 800156a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0201 	bic.w	r2, r2, #1
 800157a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 021c 	and.w	r2, r3, #28
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001588:	2101      	movs	r1, #1
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	4798      	blx	r3
    }
  }
  return status;
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015d2:	e154      	b.n	800187e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2101      	movs	r1, #1
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	4013      	ands	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 8146 	beq.w	8001878 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d005      	beq.n	8001604 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001600:	2b02      	cmp	r3, #2
 8001602:	d130      	bne.n	8001666 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	2203      	movs	r2, #3
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800163a:	2201      	movs	r2, #1
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	091b      	lsrs	r3, r3, #4
 8001650:	f003 0201 	and.w	r2, r3, #1
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b03      	cmp	r3, #3
 8001670:	d017      	beq.n	80016a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	2203      	movs	r2, #3
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d123      	bne.n	80016f6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	220f      	movs	r2, #15
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	6939      	ldr	r1, [r7, #16]
 80016f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0203 	and.w	r2, r3, #3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80a0 	beq.w	8001878 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001738:	4b58      	ldr	r3, [pc, #352]	; (800189c <HAL_GPIO_Init+0x2e0>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a57      	ldr	r2, [pc, #348]	; (800189c <HAL_GPIO_Init+0x2e0>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_GPIO_Init+0x2e0>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001750:	4a53      	ldr	r2, [pc, #332]	; (80018a0 <HAL_GPIO_Init+0x2e4>)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_GPIO_Init+0x2e8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d019      	beq.n	80017b0 <HAL_GPIO_Init+0x1f4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <HAL_GPIO_Init+0x2ec>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d013      	beq.n	80017ac <HAL_GPIO_Init+0x1f0>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a49      	ldr	r2, [pc, #292]	; (80018ac <HAL_GPIO_Init+0x2f0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1ec>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a48      	ldr	r2, [pc, #288]	; (80018b0 <HAL_GPIO_Init+0x2f4>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1e8>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a47      	ldr	r2, [pc, #284]	; (80018b4 <HAL_GPIO_Init+0x2f8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1e4>
 800179c:	2304      	movs	r3, #4
 800179e:	e008      	b.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017a0:	2305      	movs	r3, #5
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017a4:	2303      	movs	r3, #3
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1f6>
 80017b0:	2300      	movs	r3, #0
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017c2:	4937      	ldr	r1, [pc, #220]	; (80018a0 <HAL_GPIO_Init+0x2e4>)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017f4:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017fa:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800181e:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001872:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_GPIO_Init+0x2fc>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	f47f aea3 	bne.w	80015d4 <HAL_GPIO_Init+0x18>
  }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4013      	ands	r3, r2
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43d9      	mvns	r1, r3
 800190a:	887b      	ldrh	r3, [r7, #2]
 800190c:	400b      	ands	r3, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr
	...

08001920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	4013      	ands	r3, r2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d006      	beq.n	8001944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f806 	bl	8001950 <HAL_GPIO_EXTI_Callback>
  }
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40010400 	.word	0x40010400

08001950 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b088      	sub	sp, #32
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e31d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001976:	4b94      	ldr	r3, [pc, #592]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001980:	4b91      	ldr	r3, [pc, #580]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001988:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d07b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b08      	cmp	r3, #8
 800199a:	d006      	beq.n	80019aa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d10f      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b87      	ldr	r3, [pc, #540]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06a      	beq.n	8001a8c <HAL_RCC_OscConfig+0x128>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d166      	bne.n	8001a8c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e2f7      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d106      	bne.n	80019d8 <HAL_RCC_OscConfig+0x74>
 80019ca:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e02d      	b.n	8001a34 <HAL_RCC_OscConfig+0xd0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10c      	bne.n	80019fa <HAL_RCC_OscConfig+0x96>
 80019e0:	4b79      	ldr	r3, [pc, #484]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a78      	ldr	r2, [pc, #480]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a75      	ldr	r2, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 80019f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	e01c      	b.n	8001a34 <HAL_RCC_OscConfig+0xd0>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b05      	cmp	r3, #5
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xb8>
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a70      	ldr	r2, [pc, #448]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b6e      	ldr	r3, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6d      	ldr	r2, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xd0>
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a69      	ldr	r2, [pc, #420]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b67      	ldr	r3, [pc, #412]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a66      	ldr	r2, [pc, #408]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f970 	bl	8000d20 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f96c 	bl	8000d20 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e2ad      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a56:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe0>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f95c 	bl	8000d20 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f958 	bl	8000d20 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e299      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a7e:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x108>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d05a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b04      	cmp	r3, #4
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	d119      	bne.n	8001ada <HAL_RCC_OscConfig+0x176>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d116      	bne.n	8001ada <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x160>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e276      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	493d      	ldr	r1, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad8:	e03a      	b.n	8001b50 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d020      	beq.n	8001b24 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae2:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x268>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f91a 	bl	8000d20 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af0:	f7ff f916 	bl	8000d20 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e257      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b02:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	492a      	ldr	r1, [pc, #168]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
 8001b22:	e015      	b.n	8001b50 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_RCC_OscConfig+0x268>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f8f9 	bl	8000d20 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b32:	f7ff f8f5 	bl	8000d20 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e236      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1f0      	bne.n	8001b32 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80b8 	beq.w	8001cce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d170      	bne.n	8001c46 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_OscConfig+0x218>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e21a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1a      	ldr	r2, [r3, #32]
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d921      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fc23 	bl	80023dc <RCC_SetFlashLatencyFromMSIRange>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e208      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4906      	ldr	r1, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	061b      	lsls	r3, r3, #24
 8001bc0:	4901      	ldr	r1, [pc, #4]	; (8001bc8 <HAL_RCC_OscConfig+0x264>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
 8001bc6:	e020      	b.n	8001c0a <HAL_RCC_OscConfig+0x2a6>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd0:	4ba4      	ldr	r3, [pc, #656]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	49a1      	ldr	r1, [pc, #644]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be2:	4ba0      	ldr	r3, [pc, #640]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	499c      	ldr	r1, [pc, #624]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fbee 	bl	80023dc <RCC_SetFlashLatencyFromMSIRange>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e1d3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	0b5b      	lsrs	r3, r3, #13
 8001c10:	3301      	adds	r3, #1
 8001c12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c1a:	4a92      	ldr	r2, [pc, #584]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001c1c:	6892      	ldr	r2, [r2, #8]
 8001c1e:	0912      	lsrs	r2, r2, #4
 8001c20:	f002 020f 	and.w	r2, r2, #15
 8001c24:	4990      	ldr	r1, [pc, #576]	; (8001e68 <HAL_RCC_OscConfig+0x504>)
 8001c26:	5c8a      	ldrb	r2, [r1, r2]
 8001c28:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c2a:	4a90      	ldr	r2, [pc, #576]	; (8001e6c <HAL_RCC_OscConfig+0x508>)
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c2e:	4b90      	ldr	r3, [pc, #576]	; (8001e70 <HAL_RCC_OscConfig+0x50c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f828 	bl	8000c88 <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d045      	beq.n	8001cce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	e1b5      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d029      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x510>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff f864 	bl	8000d20 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f860 	bl	8000d20 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1a1      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c7a:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	4977      	ldr	r1, [pc, #476]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8c:	4b75      	ldr	r3, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	4972      	ldr	r1, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ca2:	4b74      	ldr	r3, [pc, #464]	; (8001e74 <HAL_RCC_OscConfig+0x510>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f83a 	bl	8000d20 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f836 	bl	8000d20 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e177      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cc2:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d030      	beq.n	8001d3c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b65      	ldr	r3, [pc, #404]	; (8001e78 <HAL_RCC_OscConfig+0x514>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce8:	f7ff f81a 	bl	8000d20 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f816 	bl	8000d20 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e157      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d02:	4b58      	ldr	r3, [pc, #352]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x38c>
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d10:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_RCC_OscConfig+0x514>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f803 	bl	8000d20 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7fe ffff 	bl	8000d20 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e140      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d30:	4b4c      	ldr	r3, [pc, #304]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80b5 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b45      	ldr	r3, [pc, #276]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10d      	bne.n	8001d76 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b42      	ldr	r3, [pc, #264]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	4a41      	ldr	r2, [pc, #260]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6253      	str	r3, [r2, #36]	; 0x24
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x518>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d118      	bne.n	8001db4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <HAL_RCC_OscConfig+0x518>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a3d      	ldr	r2, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x518>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ffc7 	bl	8000d20 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d96:	f7fe ffc3 	bl	8000d20 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b64      	cmp	r3, #100	; 0x64
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e104      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <HAL_RCC_OscConfig+0x518>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x466>
 8001dbc:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	4a28      	ldr	r2, [pc, #160]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc6:	6353      	str	r3, [r2, #52]	; 0x34
 8001dc8:	e02d      	b.n	8001e26 <HAL_RCC_OscConfig+0x4c2>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x488>
 8001dd2:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dd6:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ddc:	6353      	str	r3, [r2, #52]	; 0x34
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de2:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001de8:	6353      	str	r3, [r2, #52]	; 0x34
 8001dea:	e01c      	b.n	8001e26 <HAL_RCC_OscConfig+0x4c2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b05      	cmp	r3, #5
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfe:	6353      	str	r3, [r2, #52]	; 0x34
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e04:	4a17      	ldr	r2, [pc, #92]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e0c:	e00b      	b.n	8001e26 <HAL_RCC_OscConfig+0x4c2>
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e18:	6353      	str	r3, [r2, #52]	; 0x34
 8001e1a:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e24:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d015      	beq.n	8001e5a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7fe ff77 	bl	8000d20 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7fe ff73 	bl	8000d20 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0b2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_OscConfig+0x500>)
 8001e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ee      	beq.n	8001e36 <HAL_RCC_OscConfig+0x4d2>
 8001e58:	e023      	b.n	8001ea2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7fe ff61 	bl	8000d20 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e60:	e019      	b.n	8001e96 <HAL_RCC_OscConfig+0x532>
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	08003a94 	.word	0x08003a94
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004
 8001e74:	42470020 	.word	0x42470020
 8001e78:	42470680 	.word	0x42470680
 8001e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7fe ff4e 	bl	8000d20 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e08d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea2:	7ffb      	ldrb	r3, [r7, #31]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea8:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	4a43      	ldr	r2, [pc, #268]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d079      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d056      	beq.n	8001f70 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d13b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x65c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff26 	bl	8000d20 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe ff22 	bl	8000d20 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e063      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001eea:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f06:	4319      	orrs	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	430b      	orrs	r3, r1
 8001f0e:	492b      	ldr	r1, [pc, #172]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x65c>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe ff01 	bl	8000d20 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f22:	f7fe fefd 	bl	8000d20 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e03e      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x5be>
 8001f40:	e036      	b.n	8001fb0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_RCC_OscConfig+0x65c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe feea 	bl	8000d20 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fee6 	bl	8000d20 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e027      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x5ec>
 8001f6e:	e01f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e01a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCC_OscConfig+0x658>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10d      	bne.n	8001fac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3720      	adds	r7, #32
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	42470060 	.word	0x42470060

08001fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e11a      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d919      	bls.n	800201a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d105      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x34>
 8001fec:	4b8a      	ldr	r3, [pc, #552]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a89      	ldr	r2, [pc, #548]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0201 	bic.w	r2, r3, #1
 8002000:	4985      	ldr	r1, [pc, #532]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	4b83      	ldr	r3, [pc, #524]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e0f9      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002026:	4b7d      	ldr	r3, [pc, #500]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	497a      	ldr	r1, [pc, #488]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 808e 	beq.w	8002162 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d121      	bne.n	800209e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e0d7      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002066:	4b6d      	ldr	r3, [pc, #436]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0cb      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0bf      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0b7      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b5f      	ldr	r3, [pc, #380]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	495c      	ldr	r1, [pc, #368]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7fe fe36 	bl	8000d20 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d112      	bne.n	80020e4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7fe fe2e 	bl	8000d20 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e09b      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d1ee      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xfc>
 80020e2:	e03e      	b.n	8002162 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d112      	bne.n	8002112 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ee:	f7fe fe17 	bl	8000d20 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e084      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	4b45      	ldr	r3, [pc, #276]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d1ee      	bne.n	80020ee <HAL_RCC_ClockConfig+0x12a>
 8002110:	e027      	b.n	8002162 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d11d      	bne.n	8002156 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7fe fe00 	bl	8000d20 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e06d      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002132:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	2b04      	cmp	r3, #4
 800213c:	d1ee      	bne.n	800211c <HAL_RCC_ClockConfig+0x158>
 800213e:	e010      	b.n	8002162 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7fe fdee 	bl	8000d20 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e05b      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1ee      	bne.n	8002140 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002162:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d219      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <HAL_RCC_ClockConfig+0x1be>
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 800217c:	f043 0304 	orr.w	r3, r3, #4
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0201 	bic.w	r2, r3, #1
 800218a:	4923      	ldr	r1, [pc, #140]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_ClockConfig+0x254>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e034      	b.n	800220e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b1a      	ldr	r3, [pc, #104]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4917      	ldr	r1, [pc, #92]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490f      	ldr	r1, [pc, #60]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 f823 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_RCC_ClockConfig+0x258>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490b      	ldr	r1, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x25c>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x260>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x264>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fd40 	bl	8000c88 <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	72fb      	strb	r3, [r7, #11]

  return status;
 800220c:	7afb      	ldrb	r3, [r7, #11]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023c00 	.word	0x40023c00
 800221c:	40023800 	.word	0x40023800
 8002220:	08003a94 	.word	0x08003a94
 8002224:	20000000 	.word	0x20000000
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d00c      	beq.n	800225c <HAL_RCC_GetSysClockFreq+0x30>
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d87c      	bhi.n	8002340 <HAL_RCC_GetSysClockFreq+0x114>
 8002246:	2b04      	cmp	r3, #4
 8002248:	d002      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x24>
 800224a:	2b08      	cmp	r3, #8
 800224c:	d003      	beq.n	8002256 <HAL_RCC_GetSysClockFreq+0x2a>
 800224e:	e077      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_RCC_GetSysClockFreq+0x140>)
 8002252:	613b      	str	r3, [r7, #16]
      break;
 8002254:	e082      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_GetSysClockFreq+0x144>)
 8002258:	613b      	str	r3, [r7, #16]
      break;
 800225a:	e07f      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	4a43      	ldr	r2, [pc, #268]	; (8002374 <HAL_RCC_GetSysClockFreq+0x148>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	0d9b      	lsrs	r3, r3, #22
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	3301      	adds	r3, #1
 8002274:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01a      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	461a      	mov	r2, r3
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	4939      	ldr	r1, [pc, #228]	; (8002370 <HAL_RCC_GetSysClockFreq+0x144>)
 800228c:	fb01 f003 	mul.w	r0, r1, r3
 8002290:	2100      	movs	r1, #0
 8002292:	fb01 f102 	mul.w	r1, r1, r2
 8002296:	1844      	adds	r4, r0, r1
 8002298:	4935      	ldr	r1, [pc, #212]	; (8002370 <HAL_RCC_GetSysClockFreq+0x144>)
 800229a:	fba2 0101 	umull	r0, r1, r2, r1
 800229e:	1863      	adds	r3, r4, r1
 80022a0:	4619      	mov	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	f7fd ff67 	bl	800017c <__aeabi_uldivmod>
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	4613      	mov	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e040      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	461c      	mov	r4, r3
 80022bc:	f04f 0500 	mov.w	r5, #0
 80022c0:	4620      	mov	r0, r4
 80022c2:	4629      	mov	r1, r5
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	014b      	lsls	r3, r1, #5
 80022ce:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022d2:	0142      	lsls	r2, r0, #5
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	1b00      	subs	r0, r0, r4
 80022da:	eb61 0105 	sbc.w	r1, r1, r5
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	018b      	lsls	r3, r1, #6
 80022e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022ec:	0182      	lsls	r2, r0, #6
 80022ee:	1a12      	subs	r2, r2, r0
 80022f0:	eb63 0301 	sbc.w	r3, r3, r1
 80022f4:	f04f 0000 	mov.w	r0, #0
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	00d9      	lsls	r1, r3, #3
 80022fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002302:	00d0      	lsls	r0, r2, #3
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	1912      	adds	r2, r2, r4
 800230a:	eb45 0303 	adc.w	r3, r5, r3
 800230e:	f04f 0000 	mov.w	r0, #0
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	0299      	lsls	r1, r3, #10
 8002318:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800231c:	0290      	lsls	r0, r2, #10
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	461a      	mov	r2, r3
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	f7fd ff25 	bl	800017c <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4613      	mov	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	613b      	str	r3, [r7, #16]
      break;
 800233e:	e00d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0b5b      	lsrs	r3, r3, #13
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	613b      	str	r3, [r7, #16]
      break;
 800235a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800235c:	693b      	ldr	r3, [r7, #16]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bdb0      	pop	{r4, r5, r7, pc}
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	00f42400 	.word	0x00f42400
 8002370:	016e3600 	.word	0x016e3600
 8002374:	08003a88 	.word	0x08003a88

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b02      	ldr	r3, [pc, #8]	; (8002388 <HAL_RCC_GetHCLKFreq+0x10>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000000 	.word	0x20000000

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002390:	f7ff fff2 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	08003aa4 	.word	0x08003aa4

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b8:	f7ff ffde 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	08003aa4 	.word	0x08003aa4

080023dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80023e8:	4b29      	ldr	r3, [pc, #164]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d12c      	bne.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023f4:	4b26      	ldr	r3, [pc, #152]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	e016      	b.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6253      	str	r3, [r2, #36]	; 0x24
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800242c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4a17      	ldr	r2, [pc, #92]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002440:	d105      	bne.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002448:	d101      	bne.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800244a:	2301      	movs	r3, #1
 800244c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d105      	bne.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0f      	ldr	r2, [pc, #60]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 0201 	bic.w	r2, r3, #1
 8002468:	490b      	ldr	r1, [pc, #44]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800
 8002494:	40007000 	.word	0x40007000
 8002498:	40023c00 	.word	0x40023c00

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e031      	b.n	8002512 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fa76 	bl	80009b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 fbda 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d001      	beq.n	8002534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e03a      	b.n	80025aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002554:	d00e      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_TIM_Base_Start_IT+0x98>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a14      	ldr	r2, [pc, #80]	; (80025b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x58>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a13      	ldr	r2, [pc, #76]	; (80025bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d111      	bne.n	8002598 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b06      	cmp	r3, #6
 8002584:	d010      	beq.n	80025a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	e007      	b.n	80025a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40010800 	.word	0x40010800

080025c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e031      	b.n	8002636 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f829 	bl	800263e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 fb48 	bl	8002c94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_TIM_PWM_Start+0x24>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	e022      	b.n	80026ba <HAL_TIM_PWM_Start+0x6a>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d109      	bne.n	800268e <HAL_TIM_PWM_Start+0x3e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	e015      	b.n	80026ba <HAL_TIM_PWM_Start+0x6a>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b08      	cmp	r3, #8
 8002692:	d109      	bne.n	80026a8 <HAL_TIM_PWM_Start+0x58>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e008      	b.n	80026ba <HAL_TIM_PWM_Start+0x6a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e051      	b.n	8002766 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0x82>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80026d0:	e013      	b.n	80026fa <HAL_TIM_PWM_Start+0xaa>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start+0x92>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2202      	movs	r2, #2
 80026dc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80026e0:	e00b      	b.n	80026fa <HAL_TIM_PWM_Start+0xaa>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Start+0xa2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026f0:	e003      	b.n	80026fa <HAL_TIM_PWM_Start+0xaa>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2201      	movs	r2, #1
 8002700:	6839      	ldr	r1, [r7, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f000 fcb3 	bl	800306e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d00e      	beq.n	8002730 <HAL_TIM_PWM_Start+0xe0>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_TIM_PWM_Start+0x120>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_TIM_PWM_Start+0xe0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <HAL_TIM_PWM_Start+0x124>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_TIM_PWM_Start+0xe0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a13      	ldr	r2, [pc, #76]	; (8002778 <HAL_TIM_PWM_Start+0x128>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d010      	beq.n	8002764 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002752:	e007      	b.n	8002764 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40000400 	.word	0x40000400
 8002774:	40000800 	.word	0x40000800
 8002778:	40010800 	.word	0x40010800

0800277c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b02      	cmp	r3, #2
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0202 	mvn.w	r2, #2
 80027a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fa4c 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa3f 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa4e 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d122      	bne.n	800282c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d11b      	bne.n	800282c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0204 	mvn.w	r2, #4
 80027fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2202      	movs	r2, #2
 8002802:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa22 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fa15 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fa24 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b08      	cmp	r3, #8
 8002838:	d122      	bne.n	8002880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b08      	cmp	r3, #8
 8002846:	d11b      	bne.n	8002880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0208 	mvn.w	r2, #8
 8002850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2204      	movs	r2, #4
 8002856:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d003      	beq.n	800286e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9f8 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 800286c:	e005      	b.n	800287a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f9eb 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f9fa 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b10      	cmp	r3, #16
 800288c:	d122      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d11b      	bne.n	80028d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0210 	mvn.w	r2, #16
 80028a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2208      	movs	r2, #8
 80028aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f9ce 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80028c0:	e005      	b.n	80028ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f9c1 	bl	8002c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f9d0 	bl	8002c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10e      	bne.n	8002900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0201 	mvn.w	r2, #1
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f99c 	bl	8002c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d10e      	bne.n	800292c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d107      	bne.n	800292c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f9aa 	bl	8002c80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800294a:	2302      	movs	r3, #2
 800294c:	e0ac      	b.n	8002aa8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	f200 809f 	bhi.w	8002a9c <HAL_TIM_PWM_ConfigChannel+0x168>
 800295e:	a201      	add	r2, pc, #4	; (adr r2, 8002964 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002999 	.word	0x08002999
 8002968:	08002a9d 	.word	0x08002a9d
 800296c:	08002a9d 	.word	0x08002a9d
 8002970:	08002a9d 	.word	0x08002a9d
 8002974:	080029d9 	.word	0x080029d9
 8002978:	08002a9d 	.word	0x08002a9d
 800297c:	08002a9d 	.word	0x08002a9d
 8002980:	08002a9d 	.word	0x08002a9d
 8002984:	08002a1b 	.word	0x08002a1b
 8002988:	08002a9d 	.word	0x08002a9d
 800298c:	08002a9d 	.word	0x08002a9d
 8002990:	08002a9d 	.word	0x08002a9d
 8002994:	08002a5b 	.word	0x08002a5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68b9      	ldr	r1, [r7, #8]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f9da 	bl	8002d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0208 	orr.w	r2, r2, #8
 80029b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0204 	bic.w	r2, r2, #4
 80029c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6999      	ldr	r1, [r3, #24]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	619a      	str	r2, [r3, #24]
      break;
 80029d6:	e062      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f9f6 	bl	8002dd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6999      	ldr	r1, [r3, #24]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	619a      	str	r2, [r3, #24]
      break;
 8002a18:	e041      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 fa13 	bl	8002e4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0208 	orr.w	r2, r2, #8
 8002a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0204 	bic.w	r2, r2, #4
 8002a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69d9      	ldr	r1, [r3, #28]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	61da      	str	r2, [r3, #28]
      break;
 8002a58:	e021      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fa30 	bl	8002ec6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69d9      	ldr	r1, [r3, #28]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	61da      	str	r2, [r3, #28]
      break;
 8002a9a:	e000      	b.n	8002a9e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIM_ConfigClockSource+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e0b3      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x180>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b00:	d03e      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0xd0>
 8002b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b06:	f200 8087 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	f000 8085 	beq.w	8002c1c <HAL_TIM_ConfigClockSource+0x16c>
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d87f      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b18:	2b70      	cmp	r3, #112	; 0x70
 8002b1a:	d01a      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0xa2>
 8002b1c:	2b70      	cmp	r3, #112	; 0x70
 8002b1e:	d87b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b20:	2b60      	cmp	r3, #96	; 0x60
 8002b22:	d050      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x116>
 8002b24:	2b60      	cmp	r3, #96	; 0x60
 8002b26:	d877      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b28:	2b50      	cmp	r3, #80	; 0x50
 8002b2a:	d03c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0xf6>
 8002b2c:	2b50      	cmp	r3, #80	; 0x50
 8002b2e:	d873      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d058      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x136>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d86f      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d064      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d86b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d060      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d867      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05c      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d05a      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b50:	e062      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f000 fa65 	bl	8003030 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
      break;
 8002b7e:	e04e      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f000 fa4e 	bl	8003030 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba2:	609a      	str	r2, [r3, #8]
      break;
 8002ba4:	e03b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 f9c5 	bl	8002f42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2150      	movs	r1, #80	; 0x50
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fa1c 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e02b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 f9e3 	bl	8002f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2160      	movs	r1, #96	; 0x60
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fa0c 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002be4:	e01b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f9a5 	bl	8002f42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f9fc 	bl	8002ffc <TIM_ITRx_SetConfig>
      break;
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 f9f3 	bl	8002ffc <TIM_ITRx_SetConfig>
        break;
 8002c16:	e002      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc80      	pop	{r7}
 8002c48:	4770      	bx	lr

08002c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
	...

08002c94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002caa:	d007      	beq.n	8002cbc <TIM_Base_SetConfig+0x28>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a25      	ldr	r2, [pc, #148]	; (8002d44 <TIM_Base_SetConfig+0xb0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_Base_SetConfig+0x28>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a24      	ldr	r2, [pc, #144]	; (8002d48 <TIM_Base_SetConfig+0xb4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d013      	beq.n	8002cfe <TIM_Base_SetConfig+0x6a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <TIM_Base_SetConfig+0xb0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00f      	beq.n	8002cfe <TIM_Base_SetConfig+0x6a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <TIM_Base_SetConfig+0xb4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <TIM_Base_SetConfig+0x6a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <TIM_Base_SetConfig+0xb8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d007      	beq.n	8002cfe <TIM_Base_SetConfig+0x6a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <TIM_Base_SetConfig+0xbc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d003      	beq.n	8002cfe <TIM_Base_SetConfig+0x6a>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a16      	ldr	r2, [pc, #88]	; (8002d54 <TIM_Base_SetConfig+0xc0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d108      	bne.n	8002d10 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	40000400 	.word	0x40000400
 8002d48:	40000800 	.word	0x40000800
 8002d4c:	40010800 	.word	0x40010800
 8002d50:	40010c00 	.word	0x40010c00
 8002d54:	40011000 	.word	0x40011000

08002d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0201 	bic.w	r2, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f023 0302 	bic.w	r3, r3, #2
 8002da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	621a      	str	r2, [r3, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0210 	bic.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	021b      	lsls	r3, r3, #8
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0320 	bic.w	r3, r3, #32
 8002e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0303 	bic.w	r3, r3, #3
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]
}
 8002ebc:	bf00      	nop
 8002ebe:	371c      	adds	r7, #28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	621a      	str	r2, [r3, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b087      	sub	sp, #28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	f023 0201 	bic.w	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f023 030a 	bic.w	r3, r3, #10
 8002f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	621a      	str	r2, [r3, #32]
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b087      	sub	sp, #28
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	f023 0210 	bic.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	031b      	lsls	r3, r3, #12
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	621a      	str	r2, [r3, #32]
}
 8002ff2:	bf00      	nop
 8002ff4:	371c      	adds	r7, #28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4313      	orrs	r3, r2
 800301a:	f043 0307 	orr.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	609a      	str	r2, [r3, #8]
}
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003030:	b480      	push	{r7}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
 800303c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800304a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	021a      	lsls	r2, r3, #8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	431a      	orrs	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	371c      	adds	r7, #28
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr

0800306e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800306e:	b480      	push	{r7}
 8003070:	b087      	sub	sp, #28
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2201      	movs	r2, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	43db      	mvns	r3, r3
 8003090:	401a      	ands	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6a1a      	ldr	r2, [r3, #32]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	431a      	orrs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	621a      	str	r2, [r3, #32]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e046      	b.n	800315e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003112:	d00e      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a13      	ldr	r2, [pc, #76]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d009      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d004      	beq.n	8003132 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10c      	bne.n	800314c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3714      	adds	r7, #20
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40000400 	.word	0x40000400
 800316c:	40000800 	.word	0x40000800
 8003170:	40010800 	.word	0x40010800

08003174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e03f      	b.n	8003206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fc98 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fb49 	bl	8003850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_UART_IRQHandler+0x52>
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa4f 	bl	80036fe <UART_Receive_IT>
      return;
 8003260:	e17b      	b.n	800355a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b1 	beq.w	80033cc <HAL_UART_IRQHandler+0x1bc>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_UART_IRQHandler+0x70>
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80a6 	beq.w	80033cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_UART_IRQHandler+0x90>
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_UART_IRQHandler+0xb0>
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0202 	orr.w	r2, r3, #2
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <HAL_UART_IRQHandler+0xd0>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	f043 0204 	orr.w	r2, r3, #4
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00f      	beq.n	800330a <HAL_UART_IRQHandler+0xfa>
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d104      	bne.n	80032fe <HAL_UART_IRQHandler+0xee>
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0208 	orr.w	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 811e 	beq.w	8003550 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_UART_IRQHandler+0x11e>
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f9e8 	bl	80036fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b40      	cmp	r3, #64	; 0x40
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d102      	bne.n	8003356 <HAL_UART_IRQHandler+0x146>
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d031      	beq.n	80033ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f92a 	bl	80035b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b40      	cmp	r3, #64	; 0x40
 8003368:	d123      	bne.n	80033b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003378:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4a76      	ldr	r2, [pc, #472]	; (8003560 <HAL_UART_IRQHandler+0x350>)
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe f8d2 	bl	8001538 <HAL_DMA_Abort_IT>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a4:	4610      	mov	r0, r2
 80033a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00e      	b.n	80033c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8ec 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00a      	b.n	80033c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8e8 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e006      	b.n	80033c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8e4 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033c6:	e0c3      	b.n	8003550 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	bf00      	nop
    return;
 80033ca:	e0c1      	b.n	8003550 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 80a1 	bne.w	8003518 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	f003 0310 	and.w	r3, r3, #16
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 809b 	beq.w	8003518 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8095 	beq.w	8003518 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d14e      	bne.n	80034b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800341c:	8a3b      	ldrh	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8098 	beq.w	8003554 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003428:	8a3a      	ldrh	r2, [r7, #16]
 800342a:	429a      	cmp	r2, r3
 800342c:	f080 8092 	bcs.w	8003554 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	8a3a      	ldrh	r2, [r7, #16]
 8003434:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b20      	cmp	r3, #32
 800343e:	d02b      	beq.n	8003498 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68da      	ldr	r2, [r3, #12]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800344e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800346e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0210 	bic.w	r2, r2, #16
 800348c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	4618      	mov	r0, r3
 8003494:	f7fe f813 	bl	80014be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f876 	bl	800359a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ae:	e051      	b.n	8003554 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d047      	beq.n	8003558 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80034c8:	8a7b      	ldrh	r3, [r7, #18]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d044      	beq.n	8003558 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0210 	bic.w	r2, r2, #16
 800350a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800350c:	8a7b      	ldrh	r3, [r7, #18]
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f842 	bl	800359a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003516:	e01f      	b.n	8003558 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_UART_IRQHandler+0x324>
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f87f 	bl	8003630 <UART_Transmit_IT>
    return;
 8003532:	e012      	b.n	800355a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00d      	beq.n	800355a <HAL_UART_IRQHandler+0x34a>
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f8c0 	bl	80036ce <UART_EndTransmit_IT>
    return;
 800354e:	e004      	b.n	800355a <HAL_UART_IRQHandler+0x34a>
    return;
 8003550:	bf00      	nop
 8003552:	e002      	b.n	800355a <HAL_UART_IRQHandler+0x34a>
      return;
 8003554:	bf00      	nop
 8003556:	e000      	b.n	800355a <HAL_UART_IRQHandler+0x34a>
      return;
 8003558:	bf00      	nop
  }
}
 800355a:	3728      	adds	r7, #40	; 0x28
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	08003609 	.word	0x08003609

08003564 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr

08003576 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	4770      	bx	lr

0800359a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	460b      	mov	r3, r1
 80035a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d107      	bne.n	80035f0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0210 	bic.w	r2, r2, #16
 80035ee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff ffb0 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b21      	cmp	r3, #33	; 0x21
 8003642:	d13e      	bne.n	80036c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d114      	bne.n	8003678 <UART_Transmit_IT+0x48>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d110      	bne.n	8003678 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	621a      	str	r2, [r3, #32]
 8003676:	e008      	b.n	800368a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	1c59      	adds	r1, r3, #1
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6211      	str	r1, [r2, #32]
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4619      	mov	r1, r3
 8003698:	84d1      	strh	r1, [r2, #38]	; 0x26
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff38 	bl	8003564 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b22      	cmp	r3, #34	; 0x22
 8003710:	f040 8099 	bne.w	8003846 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	d117      	bne.n	800374e <UART_Receive_IT+0x50>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	b29a      	uxth	r2, r3
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
 800374c:	e026      	b.n	800379c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d007      	beq.n	8003772 <UART_Receive_IT+0x74>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <UART_Receive_IT+0x82>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e008      	b.n	8003792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378c:	b2da      	uxtb	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4619      	mov	r1, r3
 80037aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d148      	bne.n	8003842 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0220 	bic.w	r2, r2, #32
 80037be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d123      	bne.n	8003838 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0210 	bic.w	r2, r2, #16
 8003804:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b10      	cmp	r3, #16
 8003812:	d10a      	bne.n	800382a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800382e:	4619      	mov	r1, r3
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff feb2 	bl	800359a <HAL_UARTEx_RxEventCallback>
 8003836:	e002      	b.n	800383e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff fe9c 	bl	8003576 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	e002      	b.n	8003848 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e000      	b.n	8003848 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003846:	2302      	movs	r3, #2
  }
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4313      	orrs	r3, r2
 8003884:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003890:	f023 030c 	bic.w	r3, r3, #12
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	430b      	orrs	r3, r1
 800389c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a55      	ldr	r2, [pc, #340]	; (8003a10 <UART_SetConfig+0x1c0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d103      	bne.n	80038c6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038be:	f7fe fd79 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	e002      	b.n	80038cc <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038c6:	f7fe fd61 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 80038ca:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d4:	d14c      	bne.n	8003970 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ec:	4a49      	ldr	r2, [pc, #292]	; (8003a14 <UART_SetConfig+0x1c4>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	0119      	lsls	r1, r3, #4
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4b41      	ldr	r3, [pc, #260]	; (8003a14 <UART_SetConfig+0x1c4>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a3c      	ldr	r2, [pc, #240]	; (8003a14 <UART_SetConfig+0x1c4>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800392e:	4419      	add	r1, r3
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	4613      	mov	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	009a      	lsls	r2, r3, #2
 800393a:	441a      	add	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fbb2 f2f3 	udiv	r2, r2, r3
 8003946:	4b33      	ldr	r3, [pc, #204]	; (8003a14 <UART_SetConfig+0x1c4>)
 8003948:	fba3 0302 	umull	r0, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2064      	movs	r0, #100	; 0x64
 8003950:	fb00 f303 	mul.w	r3, r0, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a2e      	ldr	r2, [pc, #184]	; (8003a14 <UART_SetConfig+0x1c4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 0207 	and.w	r2, r3, #7
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	440a      	add	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800396e:	e04a      	b.n	8003a06 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009a      	lsls	r2, r3, #2
 800397a:	441a      	add	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4a23      	ldr	r2, [pc, #140]	; (8003a14 <UART_SetConfig+0x1c4>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	0119      	lsls	r1, r3, #4
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009a      	lsls	r2, r3, #2
 800399a:	441a      	add	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a6:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <UART_SetConfig+0x1c4>)
 80039a8:	fba3 0302 	umull	r0, r3, r3, r2
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	2064      	movs	r0, #100	; 0x64
 80039b0:	fb00 f303 	mul.w	r3, r0, r3
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	3332      	adds	r3, #50	; 0x32
 80039ba:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <UART_SetConfig+0x1c4>)
 80039bc:	fba2 2303 	umull	r2, r3, r2, r3
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c6:	4419      	add	r1, r3
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	009a      	lsls	r2, r3, #2
 80039d2:	441a      	add	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	fbb2 f2f3 	udiv	r2, r2, r3
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <UART_SetConfig+0x1c4>)
 80039e0:	fba3 0302 	umull	r0, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2064      	movs	r0, #100	; 0x64
 80039e8:	fb00 f303 	mul.w	r3, r0, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <UART_SetConfig+0x1c4>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	440a      	add	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40013800 	.word	0x40013800
 8003a14:	51eb851f 	.word	0x51eb851f

08003a18 <__libc_init_array>:
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	4d0c      	ldr	r5, [pc, #48]	; (8003a50 <__libc_init_array+0x38>)
 8003a1e:	4c0d      	ldr	r4, [pc, #52]	; (8003a54 <__libc_init_array+0x3c>)
 8003a20:	1b64      	subs	r4, r4, r5
 8003a22:	10a4      	asrs	r4, r4, #2
 8003a24:	42a6      	cmp	r6, r4
 8003a26:	d109      	bne.n	8003a3c <__libc_init_array+0x24>
 8003a28:	f000 f822 	bl	8003a70 <_init>
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	4d0a      	ldr	r5, [pc, #40]	; (8003a58 <__libc_init_array+0x40>)
 8003a30:	4c0a      	ldr	r4, [pc, #40]	; (8003a5c <__libc_init_array+0x44>)
 8003a32:	1b64      	subs	r4, r4, r5
 8003a34:	10a4      	asrs	r4, r4, #2
 8003a36:	42a6      	cmp	r6, r4
 8003a38:	d105      	bne.n	8003a46 <__libc_init_array+0x2e>
 8003a3a:	bd70      	pop	{r4, r5, r6, pc}
 8003a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a40:	4798      	blx	r3
 8003a42:	3601      	adds	r6, #1
 8003a44:	e7ee      	b.n	8003a24 <__libc_init_array+0xc>
 8003a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4a:	4798      	blx	r3
 8003a4c:	3601      	adds	r6, #1
 8003a4e:	e7f2      	b.n	8003a36 <__libc_init_array+0x1e>
 8003a50:	08003ab4 	.word	0x08003ab4
 8003a54:	08003ab4 	.word	0x08003ab4
 8003a58:	08003ab4 	.word	0x08003ab4
 8003a5c:	08003ab8 	.word	0x08003ab8

08003a60 <memset>:
 8003a60:	4603      	mov	r3, r0
 8003a62:	4402      	add	r2, r0
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d100      	bne.n	8003a6a <memset+0xa>
 8003a68:	4770      	bx	lr
 8003a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a6e:	e7f9      	b.n	8003a64 <memset+0x4>

08003a70 <_init>:
 8003a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a72:	bf00      	nop
 8003a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a76:	bc08      	pop	{r3}
 8003a78:	469e      	mov	lr, r3
 8003a7a:	4770      	bx	lr

08003a7c <_fini>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr
