
SMART-MICRO-PUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080047dc  080047dc  000147dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004848  08004848  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004848  08004848  00014848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004850  08004850  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004850  08004850  00014850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004854  08004854  00014854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  080048c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080048c8  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f63d  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261b  00000000  00000000  0002f6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00032988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016168  00000000  00000000  00033508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed63  00000000  00000000  00049670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008434d  00000000  00000000  000583d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000dc774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080047c4 	.word	0x080047c4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080047c4 	.word	0x080047c4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC_Init+0xa8>)
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <MX_ADC_Init+0xac>)
 8000498:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_ADC_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_ADC_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_ADC_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_ADC_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_ADC_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_ADC_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_ADC_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC_Init+0xa8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_ADC_Init+0xa8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC_Init+0xa8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC_Init+0xa8>)
 80004e2:	2210      	movs	r2, #16
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_ADC_Init+0xa8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_ADC_Init+0xa8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_ADC_Init+0xa8>)
 80004f6:	f000 fd5d 	bl	8000fb4 <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000500:	f000 f994 	bl	800082c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000504:	2305      	movs	r3, #5
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC_Init+0xa8>)
 8000516:	f000 fe93 	bl	8001240 <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000520:	f000 f984 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000a0 	.word	0x200000a0
 8000530:	40012400 	.word	0x40012400

08000534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <HAL_ADC_MspInit+0x74>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d123      	bne.n	800059e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <HAL_ADC_MspInit+0x78>)
 800055c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000560:	6213      	str	r3, [r2, #32]
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000564:	6a1b      	ldr	r3, [r3, #32]
 8000566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_ADC_MspInit+0x78>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin|ADC_FLOW_Pin|ADC_TRIMPOT_Pin;
 8000586:	2338      	movs	r3, #56	; 0x38
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058a:	2303      	movs	r3, #3
 800058c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_ADC_MspInit+0x7c>)
 800059a:	f001 f92d 	bl	80017f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40012400 	.word	0x40012400
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000

080005b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b31      	ldr	r3, [pc, #196]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a30      	ldr	r2, [pc, #192]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a24      	ldr	r2, [pc, #144]	; (8000690 <MX_GPIO_Init+0xdc>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_GPIO_Init+0xdc>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	481f      	ldr	r0, [pc, #124]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000618:	f001 fa85 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	481d      	ldr	r0, [pc, #116]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000622:	f001 fa80 	bl	8001b26 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_TEST_Pin;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OUT_TEST_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4815      	ldr	r0, [pc, #84]	; (8000694 <MX_GPIO_Init+0xe0>)
 800063e:	f001 f8db 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000646:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <MX_GPIO_Init+0xe8>)
 8000658:	f001 f8ce 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000674:	f001 f8c0 	bl	80017f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2006      	movs	r0, #6
 800067e:	f001 f806 	bl	800168e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000682:	2006      	movs	r0, #6
 8000684:	f001 f81f 	bl	80016c6 <HAL_NVIC_EnableIRQ>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020800 	.word	0x40020800
 8000698:	40020400 	.word	0x40020400
 800069c:	40020000 	.word	0x40020000

080006a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_USER_Pin)		// When edge is detected,
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d102      	bne.n	80006b6 <HAL_GPIO_EXTI_Callback+0x16>
	{									//	Timer 6 starts, for button debounce
		//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 1);
		HAL_TIM_Base_Start_IT(&htim6);
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x20>)
 80006b2:	f002 f845 	bl	8002740 <HAL_TIM_Base_Start_IT>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000134 	.word	0x20000134

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	enum operation_mode op_mode = mode_manual;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fc02 	bl	8000ed6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f85d 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f7ff ff6d 	bl	80005b4 <MX_GPIO_Init>
  MX_ADC_Init();
 80006da:	f7ff fed3 	bl	8000484 <MX_ADC_Init>
  MX_TIM4_Init();
 80006de:	f000 f961 	bl	80009a4 <MX_TIM4_Init>
  MX_TIM6_Init();
 80006e2:	f000 f9d1 	bl	8000a88 <MX_TIM6_Init>
  MX_TIM7_Init();
 80006e6:	f000 fa05 	bl	8000af4 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80006ea:	f000 fb25 	bl	8000d38 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Timer 4 for PWM generation
 80006ee:	2100      	movs	r1, #0
 80006f0:	481e      	ldr	r0, [pc, #120]	; (800076c <main+0xa8>)
 80006f2:	f002 f8e5 	bl	80028c0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim7);				// Timer 7 for sampling period
 80006f6:	481e      	ldr	r0, [pc, #120]	; (8000770 <main+0xac>)
 80006f8:	f002 f822 	bl	8002740 <HAL_TIM_Base_Start_IT>

	sprintf(tx_buffer, "Smart Micro Pump\n");
 80006fc:	491d      	ldr	r1, [pc, #116]	; (8000774 <main+0xb0>)
 80006fe:	481e      	ldr	r0, [pc, #120]	; (8000778 <main+0xb4>)
 8000700:	f003 fc26 	bl	8003f50 <siprintf>
	UART_TX(tx_buffer);
 8000704:	481c      	ldr	r0, [pc, #112]	; (8000778 <main+0xb4>)
 8000706:	f000 fb8d 	bl	8000e24 <UART_TX>
	UART_RX(rx_buffer);
 800070a:	481c      	ldr	r0, [pc, #112]	; (800077c <main+0xb8>)
 800070c:	f000 fba0 	bl	8000e50 <UART_RX>

    /* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		//HAL_Delay(500);

		if (debouncedButtonPressed != 0)	// User button selects between
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <main+0xbc>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d017      	beq.n	800074a <main+0x86>
		{									// Manual and Auto modes
			if (op_mode == mode_manual)
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d107      	bne.n	8000730 <main+0x6c>
			{
				op_mode = mode_auto;
 8000720:	2301      	movs	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	2180      	movs	r1, #128	; 0x80
 8000728:	4816      	ldr	r0, [pc, #88]	; (8000784 <main+0xc0>)
 800072a:	f001 f9fc 	bl	8001b26 <HAL_GPIO_WritePin>
 800072e:	e009      	b.n	8000744 <main+0x80>
			}
			else if (op_mode == mode_auto)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d106      	bne.n	8000744 <main+0x80>
			{
				op_mode = mode_manual;
 8000736:	2300      	movs	r3, #0
 8000738:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	4811      	ldr	r0, [pc, #68]	; (8000784 <main+0xc0>)
 8000740:	f001 f9f1 	bl	8001b26 <HAL_GPIO_WritePin>
			}
			debouncedButtonPressed = 0;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <main+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
		}

		if (debouncedButtonReleased != 0)	// Interrupts are also generated when
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <main+0xc4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d002      	beq.n	800075a <main+0x96>
		{									// button is released
			debouncedButtonReleased = 0;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <main+0xc4>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
		}

		if (flag_dt != 0)	// Sampling time (dt) = 10ms (fS = 100 Hz)
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <main+0xc8>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0d5      	beq.n	8000710 <main+0x4c>

			// Update pump drive level (PWM)

			// Send data (UART)

			flag_dt = 0;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <main+0xc8>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
		if (debouncedButtonPressed != 0)	// User button selects between
 800076a:	e7d1      	b.n	8000710 <main+0x4c>
 800076c:	200000f4 	.word	0x200000f4
 8000770:	20000174 	.word	0x20000174
 8000774:	080047dc 	.word	0x080047dc
 8000778:	200001d4 	.word	0x200001d4
 800077c:	200001b4 	.word	0x200001b4
 8000780:	2000008f 	.word	0x2000008f
 8000784:	40020400 	.word	0x40020400
 8000788:	20000090 	.word	0x20000090
 800078c:	20000091 	.word	0x20000091

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b092      	sub	sp, #72	; 0x48
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	2234      	movs	r2, #52	; 0x34
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fbce 	bl	8003f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	463b      	mov	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b2:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <SystemClock_Config+0x98>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007ba:	4a1b      	ldr	r2, [pc, #108]	; (8000828 <SystemClock_Config+0x98>)
 80007bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007c0:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c2:	2302      	movs	r3, #2
 80007c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ce:	2302      	movs	r3, #2
 80007d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d2:	2300      	movs	r3, #0
 80007d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007d6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 f9ce 	bl	8001b88 <HAL_RCC_OscConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007f2:	f000 f81b 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f6:	230f      	movs	r3, #15
 80007f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fa:	2303      	movs	r3, #3
 80007fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	2101      	movs	r1, #1
 800080e:	4618      	mov	r0, r3
 8000810:	f001 fcea 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800081a:	f000 f807 	bl	800082c <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3748      	adds	r7, #72	; 0x48
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40007000 	.word	0x40007000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_MspInit+0x58>)
 8000840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000842:	4a13      	ldr	r2, [pc, #76]	; (8000890 <HAL_MspInit+0x58>)
 8000844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000848:	6253      	str	r3, [r2, #36]	; 0x24
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_MspInit+0x58>)
 800084c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_MspInit+0x58>)
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_MspInit+0x58>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6213      	str	r3, [r2, #32]
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_MspInit+0x58>)
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x58>)
 8000870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_MspInit+0x58>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6253      	str	r3, [r2, #36]	; 0x24
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_MspInit+0x58>)
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr

080008d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008da:	f000 fb4f 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OUT_TEST_Pin);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f001 f936 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART1_IRQHandler+0x10>)
 80008f6:	f002 fe7b 	bl	80035f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200001f4 	.word	0x200001f4

08000904 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM6_IRQHandler+0x10>)
 800090a:	f002 f86f 	bl	80029ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000134 	.word	0x20000134

08000918 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <TIM7_IRQHandler+0x10>)
 800091e:	f002 f865 	bl	80029ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000174 	.word	0x20000174

0800092c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <_sbrk+0x5c>)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <_sbrk+0x60>)
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <_sbrk+0x64>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_sbrk+0x64>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <_sbrk+0x68>)
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	429a      	cmp	r2, r3
 800095a:	d207      	bcs.n	800096c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800095c:	f003 fac6 	bl	8003eec <__errno>
 8000960:	4603      	mov	r3, r0
 8000962:	220c      	movs	r2, #12
 8000964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <_sbrk+0x64>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <_sbrk+0x64>)
 800097c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097e:	68fb      	ldr	r3, [r7, #12]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20004000 	.word	0x20004000
 800098c:	00000400 	.word	0x00000400
 8000990:	20000094 	.word	0x20000094
 8000994:	20000250 	.word	0x20000250

08000998 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c2:	463b      	mov	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009ce:	4b2c      	ldr	r3, [pc, #176]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009d0:	4a2c      	ldr	r2, [pc, #176]	; (8000a84 <MX_TIM4_Init+0xe0>)
 80009d2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (32 - 1);
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009d6:	221f      	movs	r2, #31
 80009d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (100 - 1);
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009e2:	2263      	movs	r2, #99	; 0x63
 80009e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009f2:	4823      	ldr	r0, [pc, #140]	; (8000a80 <MX_TIM4_Init+0xdc>)
 80009f4:	f001 fe64 	bl	80026c0 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM4_Init+0x5e>
  {
    Error_Handler();
 80009fe:	f7ff ff15 	bl	800082c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <MX_TIM4_Init+0xdc>)
 8000a10:	f002 f986 	bl	8002d20 <HAL_TIM_ConfigClockSource>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000a1a:	f7ff ff07 	bl	800082c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a1e:	4818      	ldr	r0, [pc, #96]	; (8000a80 <MX_TIM4_Init+0xdc>)
 8000a20:	f001 ff06 	bl	8002830 <HAL_TIM_PWM_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000a2a:	f7ff feff 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a36:	f107 0310 	add.w	r3, r7, #16
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4810      	ldr	r0, [pc, #64]	; (8000a80 <MX_TIM4_Init+0xdc>)
 8000a3e:	f002 fc69 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM4_Init+0xa8>
  {
    Error_Handler();
 8000a48:	f7ff fef0 	bl	800082c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4c:	2360      	movs	r3, #96	; 0x60
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <MX_TIM4_Init+0xdc>)
 8000a64:	f002 f89e 	bl	8002ba4 <HAL_TIM_PWM_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM4_Init+0xce>
  {
    Error_Handler();
 8000a6e:	f7ff fedd 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <MX_TIM4_Init+0xdc>)
 8000a74:	f000 f8ca 	bl	8000c0c <HAL_TIM_MspPostInit>

}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	; 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000f4 	.word	0x200000f4
 8000a84:	40000800 	.word	0x40000800

08000a88 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_TIM6_Init+0x64>)
 8000a98:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_TIM6_Init+0x68>)
 8000a9a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (32 - 1);
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_TIM6_Init+0x64>)
 8000a9e:	221f      	movs	r2, #31
 8000aa0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_TIM6_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (1000 - 1);
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_TIM6_Init+0x64>)
 8000aaa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_TIM6_Init+0x64>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ab6:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_TIM6_Init+0x64>)
 8000ab8:	f001 fe02 	bl	80026c0 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ac2:	f7ff feb3 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_TIM6_Init+0x64>)
 8000ad4:	f002 fc1e 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000ade:	f7ff fea5 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000134 	.word	0x20000134
 8000af0:	40001000 	.word	0x40001000

08000af4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b04:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <MX_TIM7_Init+0x68>)
 8000b06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (32 -1);
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b0a:	221f      	movs	r2, #31
 8000b0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (10000 - 1);
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b16:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b24:	f001 fdcc 	bl	80026c0 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b2e:	f7ff fe7d 	bl	800082c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_TIM7_Init+0x64>)
 8000b40:	f002 fbe8 	bl	8003314 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000b4a:	f7ff fe6f 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000174 	.word	0x20000174
 8000b5c:	40001400 	.word	0x40001400

08000b60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <HAL_TIM_Base_MspInit+0x9c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10c      	bne.n	8000b8c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	4a22      	ldr	r2, [pc, #136]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000b8a:	e032      	b.n	8000bf2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <HAL_TIM_Base_MspInit+0xa4>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d114      	bne.n	8000bc0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6253      	str	r3, [r2, #36]	; 0x24
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	202b      	movs	r0, #43	; 0x2b
 8000bb4:	f000 fd6b 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bb8:	202b      	movs	r0, #43	; 0x2b
 8000bba:	f000 fd84 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 8000bbe:	e018      	b.n	8000bf2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_TIM_Base_MspInit+0xa8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d113      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6253      	str	r3, [r2, #36]	; 0x24
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_TIM_Base_MspInit+0xa0>)
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	202c      	movs	r0, #44	; 0x2c
 8000be8:	f000 fd51 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bec:	202c      	movs	r0, #44	; 0x2c
 8000bee:	f000 fd6a 	bl	80016c6 <HAL_NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40000800 	.word	0x40000800
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40001000 	.word	0x40001000
 8000c08:	40001400 	.word	0x40001400

08000c0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a11      	ldr	r2, [pc, #68]	; (8000c70 <HAL_TIM_MspPostInit+0x64>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d11b      	bne.n	8000c66 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_PUMP_Pin;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PUMP_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 030c 	add.w	r3, r7, #12
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_TIM_MspPostInit+0x6c>)
 8000c62:	f000 fdc9 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40000800 	.word	0x40000800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)	// Timed debounce routine:
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d137      	bne.n	8000cfc <HAL_TIM_PeriodElapsedCallback+0x80>
	{					//	After first edge is detected, accumulate
						// 	DEBOUNCE_STABLE_PERIOD equal samples and
						// 	finally set PRESSED or RELEASED flag and
						//	disables this counter until next edge occurs
		previousButton = currentButton;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000c94:	701a      	strb	r2, [r3, #0]
		currentButton  = HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin);
 8000c96:	2101      	movs	r1, #1
 8000c98:	4821      	ldr	r0, [pc, #132]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000c9a:	f000 ff2d 	bl	8001af8 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ca4:	701a      	strb	r2, [r3, #0]

		if (currentButton == previousButton)	// Increments counter if stable
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d107      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			debounceCounter++;
 8000cb6:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cc2:	701a      	strb	r2, [r3, #0]
 8000cc4:	e002      	b.n	8000ccc <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else									// Resets counter if bounce occurs
		{
			debounceCounter = 0;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
		}

		if (debounceCounter >= DEBOUNCE_STABLE_PERIOD)
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b09      	cmp	r3, #9
 8000cd4:	d919      	bls.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x8e>
		{	// Debounce finished
			HAL_TIM_Base_Stop_IT(&htim6);
 8000cd6:	480f      	ldr	r0, [pc, #60]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cd8:	f001 fd84 	bl	80027e4 <HAL_TIM_Base_Stop_IT>
			debounceCounter = 0;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]

			if (currentButton == 1)			// Active HIGH: Button Pressed == 1
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d103      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x78>
			{
				debouncedButtonPressed = 1;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
	}
	else if (htim == &htim7)	//
	{	// Sampling period (dt) has passed
		flag_dt = 1;
	}
}
 8000cf2:	e00a      	b.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x8e>
				debouncedButtonReleased = 1;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
}
 8000cfa:	e006      	b.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x8e>
	else if (htim == &htim7)	//
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d102      	bne.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x8e>
		flag_dt = 1;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000134 	.word	0x20000134
 8000d18:	2000008c 	.word	0x2000008c
 8000d1c:	2000008d 	.word	0x2000008d
 8000d20:	40020000 	.word	0x40020000
 8000d24:	2000008e 	.word	0x2000008e
 8000d28:	2000008f 	.word	0x2000008f
 8000d2c:	20000090 	.word	0x20000090
 8000d30:	20000174 	.word	0x20000174
 8000d34:	20000091 	.word	0x20000091

08000d38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <MX_USART1_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_USART1_UART_Init+0x4c>)
 8000d70:	f002 fb2e 	bl	80033d0 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f7ff fd57 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200001f4 	.word	0x200001f4
 8000d88:	40013800 	.word	0x40013800

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <HAL_UART_MspInit+0x8c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d130      	bne.n	8000e10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <HAL_UART_MspInit+0x90>)
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0x90>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6213      	str	r3, [r2, #32]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x90>)
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_UART_MspInit+0x90>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0x90>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_UART_MspInit+0x90>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000df0:	2307      	movs	r3, #7
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4809      	ldr	r0, [pc, #36]	; (8000e20 <HAL_UART_MspInit+0x94>)
 8000dfc:	f000 fcfc 	bl	80017f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2025      	movs	r0, #37	; 0x25
 8000e06:	f000 fc42 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0a:	2025      	movs	r0, #37	; 0x25
 8000e0c:	f000 fc5b 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <UART_TX>:
}

/* USER CODE BEGIN 1 */

void UART_TX(char* buffer)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff f9a5 	bl	800017c <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <UART_TX+0x28>)
 8000e3e:	f002 fb14 	bl	800346a <HAL_UART_Transmit>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001f4 	.word	0x200001f4

08000e50 <UART_RX>:

void UART_RX(char* buffer)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, BYTES_TO_RX);
 8000e58:	2204      	movs	r2, #4
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	4803      	ldr	r0, [pc, #12]	; (8000e6c <UART_RX+0x1c>)
 8000e5e:	f002 fb96 	bl	800358e <HAL_UART_Receive_IT>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001f4 	.word	0x200001f4

08000e70 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	UART_RX(rx_buffer);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <HAL_UART_RxCpltCallback+0x18>)
 8000e7a:	f7ff ffe9 	bl	8000e50 <UART_RX>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001b4 	.word	0x200001b4

08000e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	; (8000ed0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eb2:	f7ff fd71 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f003 f81f 	bl	8003ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eba:	f7ff fc03 	bl	80006c4 <main>
  bx lr
 8000ebe:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec8:	08004858 	.word	0x08004858
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed0:	2000024c 	.word	0x2000024c

08000ed4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_IRQHandler>

08000ed6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b082      	sub	sp, #8
 8000eda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f000 fbc9 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 f80e 	bl	8000f08 <HAL_InitTick>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	e001      	b.n	8000efc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ef8:	f7ff fc9e 	bl	8000838 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x68>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d022      	beq.n	8000f62 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_InitTick+0x6c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_InitTick+0x68>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fbd6 	bl	80016e2 <HAL_SYSTICK_Config>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10f      	bne.n	8000f5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	d809      	bhi.n	8000f56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	2200      	movs	r2, #0
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4a:	f000 fba0 	bl	800168e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_InitTick+0x70>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e007      	b.n	8000f66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e004      	b.n	8000f66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_IncTick+0x20>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <HAL_IncTick+0x1c>)
 8000f8c:	6013      	str	r3, [r2, #0]
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000238 	.word	0x20000238
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <HAL_GetTick+0x10>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr
 8000fb0:	20000238 	.word	0x20000238

08000fb4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08e      	sub	sp, #56	; 0x38
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e127      	b.n	8001224 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d115      	bne.n	800100e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b8e      	ldr	r3, [pc, #568]	; (800122c <HAL_ADC_Init+0x278>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a8d      	ldr	r2, [pc, #564]	; (800122c <HAL_ADC_Init+0x278>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	4b8b      	ldr	r3, [pc, #556]	; (800122c <HAL_ADC_Init+0x278>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fa93 	bl	8000534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 80ff 	bne.w	800121a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001024:	f023 0302 	bic.w	r3, r3, #2
 8001028:	f043 0202 	orr.w	r2, r3, #2
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8001030:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <HAL_ADC_Init+0x27c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	497c      	ldr	r1, [pc, #496]	; (8001230 <HAL_ADC_Init+0x27c>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800104a:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001052:	4619      	mov	r1, r3
 8001054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001058:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	fa93 f3a3 	rbit	r3, r3
 8001060:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800106e:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001074:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	2302      	movs	r3, #2
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	fab3 f383 	clz	r3, r3
 8001090:	b2db      	uxtb	r3, r3
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001096:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109a:	4313      	orrs	r3, r2
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d007      	beq.n	80010b6 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80010ae:	4313      	orrs	r3, r2
 80010b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010b2:	4313      	orrs	r3, r2
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c0:	2b40      	cmp	r3, #64	; 0x40
 80010c2:	d04f      	beq.n	8001164 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ca:	4313      	orrs	r3, r2
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010d6:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6912      	ldr	r2, [r2, #16]
 80010dc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80010e0:	d003      	beq.n	80010ea <HAL_ADC_Init+0x136>
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	6912      	ldr	r2, [r2, #16]
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d102      	bne.n	80010f0 <HAL_ADC_Init+0x13c>
 80010ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010ee:	e000      	b.n	80010f2 <HAL_ADC_Init+0x13e>
 80010f0:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80010f2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80010f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f6:	4313      	orrs	r3, r2
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001100:	2b01      	cmp	r3, #1
 8001102:	d125      	bne.n	8001150 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800110a:	2b00      	cmp	r3, #0
 800110c:	d114      	bne.n	8001138 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	3b01      	subs	r3, #1
 8001114:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001118:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	fa92 f2a2 	rbit	r2, r2
 8001120:	617a      	str	r2, [r7, #20]
  return result;
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	fab2 f282 	clz	r2, r2
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	4093      	lsls	r3, r2
 800112c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001132:	4313      	orrs	r3, r2
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
 8001136:	e00b      	b.n	8001150 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f043 0220 	orr.w	r2, r3, #32
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <HAL_ADC_Init+0x280>)
 8001158:	4013      	ands	r3, r2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001160:	430b      	orrs	r3, r1
 8001162:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <HAL_ADC_Init+0x284>)
 800116c:	4013      	ands	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001174:	430b      	orrs	r3, r1
 8001176:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001180:	d003      	beq.n	800118a <HAL_ADC_Init+0x1d6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d119      	bne.n	80011be <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001198:	3b01      	subs	r3, #1
 800119a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800119e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	fa92 f2a2 	rbit	r2, r2
 80011a6:	60fa      	str	r2, [r7, #12]
  return result;
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	fab2 f282 	clz	r2, r2
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	fa03 f202 	lsl.w	r2, r3, r2
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
 80011bc:	e007      	b.n	80011ce <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80011cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_ADC_Init+0x288>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011da:	429a      	cmp	r2, r3
 80011dc:	d10b      	bne.n	80011f6 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	f023 0303 	bic.w	r3, r3, #3
 80011ec:	f043 0201 	orr.w	r2, r3, #1
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80011f4:	e014      	b.n	8001220 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f023 0312 	bic.w	r3, r3, #18
 80011fe:	f043 0210 	orr.w	r2, r3, #16
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800120a:	f043 0201 	orr.w	r2, r3, #1
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001218:	e002      	b.n	8001220 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001224:	4618      	mov	r0, r3
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40012700 	.word	0x40012700
 8001234:	fcfc16ff 	.word	0xfcfc16ff
 8001238:	c0fff18d 	.word	0xc0fff18d
 800123c:	bf80fffe 	.word	0xbf80fffe

08001240 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x20>
 800125c:	2302      	movs	r3, #2
 800125e:	e134      	b.n	80014ca <HAL_ADC_ConfigChannel+0x28a>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b06      	cmp	r3, #6
 800126e:	d81c      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	3b05      	subs	r3, #5
 8001282:	221f      	movs	r2, #31
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	4019      	ands	r1, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
 80012a8:	e07e      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b0c      	cmp	r3, #12
 80012b0:	d81c      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	3b23      	subs	r3, #35	; 0x23
 80012c4:	221f      	movs	r2, #31
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4019      	ands	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	3b23      	subs	r3, #35	; 0x23
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80012ea:	e05d      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d81c      	bhi.n	800132e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b41      	subs	r3, #65	; 0x41
 8001306:	221f      	movs	r2, #31
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	4019      	ands	r1, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b41      	subs	r3, #65	; 0x41
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	639a      	str	r2, [r3, #56]	; 0x38
 800132c:	e03c      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b18      	cmp	r3, #24
 8001334:	d81c      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	3b5f      	subs	r3, #95	; 0x5f
 8001348:	221f      	movs	r2, #31
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	4019      	ands	r1, r3
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b5f      	subs	r3, #95	; 0x5f
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	; 0x34
 800136e:	e01b      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b7d      	subs	r3, #125	; 0x7d
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	4019      	ands	r1, r3
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b7d      	subs	r3, #125	; 0x7d
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	d81a      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6959      	ldr	r1, [r3, #20]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	4413      	add	r3, r2
 80013c0:	2207      	movs	r2, #7
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4019      	ands	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	6898      	ldr	r0, [r3, #8]
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	e042      	b.n	800146c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b13      	cmp	r3, #19
 80013ec:	d81c      	bhi.n	8001428 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6919      	ldr	r1, [r3, #16]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	3b1e      	subs	r3, #30
 8001400:	2207      	movs	r2, #7
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	4019      	ands	r1, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	6898      	ldr	r0, [r3, #8]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	3b1e      	subs	r3, #30
 800141a:	fa00 f203 	lsl.w	r2, r0, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	611a      	str	r2, [r3, #16]
 8001426:	e021      	b.n	800146c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b1a      	cmp	r3, #26
 800142e:	d81c      	bhi.n	800146a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68d9      	ldr	r1, [r3, #12]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	3b3c      	subs	r3, #60	; 0x3c
 8001442:	2207      	movs	r2, #7
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	4019      	ands	r1, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6898      	ldr	r0, [r3, #8]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	3b3c      	subs	r3, #60	; 0x3c
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	e000      	b.n	800146c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800146a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b10      	cmp	r3, #16
 8001472:	d003      	beq.n	800147c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001478:	2b11      	cmp	r3, #17
 800147a:	d121      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_ADC_ConfigChannel+0x294>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d11b      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_ADC_ConfigChannel+0x294>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_ADC_ConfigChannel+0x294>)
 800148e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001492:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b10      	cmp	r3, #16
 800149a:	d111      	bne.n	80014c0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_ADC_ConfigChannel+0x298>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_ADC_ConfigChannel+0x29c>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	0c9a      	lsrs	r2, r3, #18
 80014a8:	4613      	mov	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80014b2:	e002      	b.n	80014ba <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f9      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40012700 	.word	0x40012700
 80014d8:	20000000 	.word	0x20000000
 80014dc:	431bde83 	.word	0x431bde83

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <__NVIC_EnableIRQ+0x34>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff2d 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff42 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b085      	sub	sp, #20
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d008      	beq.n	8001724 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2204      	movs	r2, #4
 8001716:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e022      	b.n	800176a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f003 021c 	and.w	r2, r3, #28
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d005      	beq.n	8001798 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2204      	movs	r2, #4
 8001790:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e029      	b.n	80017ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 020e 	bic.w	r2, r2, #14
 80017a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0201 	bic.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 021c 	and.w	r2, r3, #28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c4:	2101      	movs	r1, #1
 80017c6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	4798      	blx	r3
    }
  }
  return status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800180e:	e154      	b.n	8001aba <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8146 	beq.w	8001ab4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	6939      	ldr	r1, [r7, #16]
 800192e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0203 	and.w	r2, r3, #3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80a0 	beq.w	8001ab4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800198c:	4a53      	ldr	r2, [pc, #332]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d019      	beq.n	80019ec <HAL_GPIO_Init+0x1f4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a4a      	ldr	r2, [pc, #296]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x1f0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_GPIO_Init+0x2f0>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_GPIO_Init+0x2f4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1e8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a47      	ldr	r2, [pc, #284]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1e4>
 80019d8:	2304      	movs	r3, #4
 80019da:	e008      	b.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019dc:	2305      	movs	r3, #5
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e004      	b.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019ec:	2300      	movs	r3, #0
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	f002 0203 	and.w	r2, r2, #3
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4093      	lsls	r3, r2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019fe:	4937      	ldr	r1, [pc, #220]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a30:	4a30      	ldr	r2, [pc, #192]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a36:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a5a:	4a26      	ldr	r2, [pc, #152]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_GPIO_Init+0x2fc>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f47f aea3 	bne.w	8001810 <HAL_GPIO_Init+0x18>
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	887b      	ldrh	r3, [r7, #2]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e001      	b.n	8001b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	807b      	strh	r3, [r7, #2]
 8001b32:	4613      	mov	r3, r2
 8001b34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b36:	787b      	ldrb	r3, [r7, #1]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001b42:	e003      	b.n	8001b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	619a      	str	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd92 	bl	80006a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e31d      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b94      	ldr	r3, [pc, #592]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b91      	ldr	r3, [pc, #580]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d07b      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b08      	cmp	r3, #8
 8001bbe:	d006      	beq.n	8001bce <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d10f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5e>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bcc:	d10b      	bne.n	8001be6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bce:	4b87      	ldr	r3, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d06a      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x128>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d166      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e2f7      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d106      	bne.n	8001bfc <HAL_RCC_OscConfig+0x74>
 8001bee:	4b7f      	ldr	r3, [pc, #508]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a7e      	ldr	r2, [pc, #504]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e02d      	b.n	8001c58 <HAL_RCC_OscConfig+0xd0>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x96>
 8001c04:	4b79      	ldr	r3, [pc, #484]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a78      	ldr	r2, [pc, #480]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b76      	ldr	r3, [pc, #472]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a75      	ldr	r2, [pc, #468]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0xd0>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0xb8>
 8001c26:	4b71      	ldr	r3, [pc, #452]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a70      	ldr	r2, [pc, #448]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b6e      	ldr	r3, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6d      	ldr	r2, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0xd0>
 8001c40:	4b6a      	ldr	r3, [pc, #424]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a69      	ldr	r2, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b67      	ldr	r3, [pc, #412]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a66      	ldr	r2, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff f99e 	bl	8000fa0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff f99a 	bl	8000fa0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e2ad      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c7a:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe0>
 8001c86:	e014      	b.n	8001cb2 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f98a 	bl	8000fa0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff f986 	bl	8000fa0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e299      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x108>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d05a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d119      	bne.n	8001cfe <HAL_RCC_OscConfig+0x176>
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d116      	bne.n	8001cfe <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd0:	4b46      	ldr	r3, [pc, #280]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x160>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e276      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b40      	ldr	r3, [pc, #256]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	493d      	ldr	r1, [pc, #244]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfc:	e03a      	b.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d020      	beq.n	8001d48 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCC_OscConfig+0x268>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f948 	bl	8000fa0 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff f944 	bl	8000fa0 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e257      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d26:	4b31      	ldr	r3, [pc, #196]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	492a      	ldr	r1, [pc, #168]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
 8001d46:	e015      	b.n	8001d74 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <HAL_RCC_OscConfig+0x268>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff f927 	bl	8000fa0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff f923 	bl	8000fa0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e236      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80b8 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d170      	bne.n	8001e6a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_RCC_OscConfig+0x218>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e21a      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1a      	ldr	r2, [r3, #32]
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d921      	bls.n	8001df4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fc23 	bl	8002600 <RCC_SetFlashLatencyFromMSIRange>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e208      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4906      	ldr	r1, [pc, #24]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	061b      	lsls	r3, r3, #24
 8001de4:	4901      	ldr	r1, [pc, #4]	; (8001dec <HAL_RCC_OscConfig+0x264>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
 8001dea:	e020      	b.n	8001e2e <HAL_RCC_OscConfig+0x2a6>
 8001dec:	40023800 	.word	0x40023800
 8001df0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df4:	4ba4      	ldr	r3, [pc, #656]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	49a1      	ldr	r1, [pc, #644]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e06:	4ba0      	ldr	r3, [pc, #640]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	061b      	lsls	r3, r3, #24
 8001e14:	499c      	ldr	r1, [pc, #624]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fbee 	bl	8002600 <RCC_SetFlashLatencyFromMSIRange>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1d3      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	0b5b      	lsrs	r3, r3, #13
 8001e34:	3301      	adds	r3, #1
 8001e36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001e3e:	4a92      	ldr	r2, [pc, #584]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001e40:	6892      	ldr	r2, [r2, #8]
 8001e42:	0912      	lsrs	r2, r2, #4
 8001e44:	f002 020f 	and.w	r2, r2, #15
 8001e48:	4990      	ldr	r1, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x504>)
 8001e4a:	5c8a      	ldrb	r2, [r1, r2]
 8001e4c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001e4e:	4a90      	ldr	r2, [pc, #576]	; (8002090 <HAL_RCC_OscConfig+0x508>)
 8001e50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e52:	4b90      	ldr	r3, [pc, #576]	; (8002094 <HAL_RCC_OscConfig+0x50c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f856 	bl	8000f08 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d045      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	e1b5      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d029      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x510>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff f892 	bl	8000fa0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e80:	f7ff f88e 	bl	8000fa0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e1a1      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e92:	4b7d      	ldr	r3, [pc, #500]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e9e:	4b7a      	ldr	r3, [pc, #488]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4977      	ldr	r1, [pc, #476]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb0:	4b75      	ldr	r3, [pc, #468]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	061b      	lsls	r3, r3, #24
 8001ebe:	4972      	ldr	r1, [pc, #456]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
 8001ec4:	e015      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ec6:	4b74      	ldr	r3, [pc, #464]	; (8002098 <HAL_RCC_OscConfig+0x510>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f868 	bl	8000fa0 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed4:	f7ff f864 	bl	8000fa0 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e177      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ee6:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d030      	beq.n	8001f60 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d016      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f06:	4b65      	ldr	r3, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x514>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff f848 	bl	8000fa0 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff f844 	bl	8000fa0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e157      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f26:	4b58      	ldr	r3, [pc, #352]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x38c>
 8001f32:	e015      	b.n	8001f60 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f34:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_OscConfig+0x514>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3a:	f7ff f831 	bl	8000fa0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f42:	f7ff f82d 	bl	8000fa0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e140      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f54:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80b5 	beq.w	80020d8 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	4a41      	ldr	r2, [pc, #260]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6253      	str	r3, [r2, #36]	; 0x24
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f96:	2301      	movs	r3, #1
 8001f98:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_OscConfig+0x518>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d118      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_OscConfig+0x518>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <HAL_RCC_OscConfig+0x518>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fb2:	f7fe fff5 	bl	8000fa0 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fba:	f7fe fff1 	bl	8000fa0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	; 0x64
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e104      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x518>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x466>
 8001fe0:	4b29      	ldr	r3, [pc, #164]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	4a28      	ldr	r2, [pc, #160]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fea:	6353      	str	r3, [r2, #52]	; 0x34
 8001fec:	e02d      	b.n	800204a <HAL_RCC_OscConfig+0x4c2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x488>
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffa:	4a23      	ldr	r2, [pc, #140]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8001ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002000:	6353      	str	r3, [r2, #52]	; 0x34
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	4a20      	ldr	r2, [pc, #128]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800200c:	6353      	str	r3, [r2, #52]	; 0x34
 800200e:	e01c      	b.n	800204a <HAL_RCC_OscConfig+0x4c2>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x4aa>
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 800201a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201c:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002022:	6353      	str	r3, [r2, #52]	; 0x34
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	4a17      	ldr	r2, [pc, #92]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6353      	str	r3, [r2, #52]	; 0x34
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0x4c2>
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	4a14      	ldr	r2, [pc, #80]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800203c:	6353      	str	r3, [r2, #52]	; 0x34
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002042:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002044:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002048:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002052:	f7fe ffa5 	bl	8000fa0 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe ffa1 	bl	8000fa0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	; 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e0b2      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_OscConfig+0x500>)
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ee      	beq.n	800205a <HAL_RCC_OscConfig+0x4d2>
 800207c:	e023      	b.n	80020c6 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe ff8f 	bl	8000fa0 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002084:	e019      	b.n	80020ba <HAL_RCC_OscConfig+0x532>
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800
 800208c:	080047fc 	.word	0x080047fc
 8002090:	20000000 	.word	0x20000000
 8002094:	20000004 	.word	0x20000004
 8002098:	42470020 	.word	0x42470020
 800209c:	42470680 	.word	0x42470680
 80020a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe ff7c 	bl	8000fa0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e08d      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	4a43      	ldr	r2, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d6:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d079      	beq.n	80021d4 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d056      	beq.n	8002194 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d13b      	bne.n	8002166 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x65c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7fe ff54 	bl	8000fa0 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020fc:	f7fe ff50 	bl	8000fa0 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e063      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211a:	4b31      	ldr	r3, [pc, #196]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212a:	4319      	orrs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	430b      	orrs	r3, r1
 8002132:	492b      	ldr	r1, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002138:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_RCC_OscConfig+0x65c>)
 800213a:	2201      	movs	r2, #1
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7fe ff2f 	bl	8000fa0 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002146:	f7fe ff2b 	bl	8000fa0 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e03e      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002158:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCC_OscConfig+0x5be>
 8002164:	e036      	b.n	80021d4 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002166:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <HAL_RCC_OscConfig+0x65c>)
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7fe ff18 	bl	8000fa0 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe ff14 	bl	8000fa0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e027      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x5ec>
 8002192:	e01f      	b.n	80021d4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	2b01      	cmp	r3, #1
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_RCC_OscConfig+0x658>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d106      	bne.n	80021d0 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	42470060 	.word	0x42470060

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e11a      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b8f      	ldr	r3, [pc, #572]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d919      	bls.n	800223e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d105      	bne.n	800221c <HAL_RCC_ClockConfig+0x34>
 8002210:	4b8a      	ldr	r3, [pc, #552]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a89      	ldr	r2, [pc, #548]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 0201 	bic.w	r2, r3, #1
 8002224:	4985      	ldr	r1, [pc, #532]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222c:	4b83      	ldr	r3, [pc, #524]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0f9      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224a:	4b7d      	ldr	r3, [pc, #500]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	497a      	ldr	r1, [pc, #488]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 808e 	beq.w	8002386 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0d7      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0cb      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a2:	4b67      	ldr	r3, [pc, #412]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0bf      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0b7      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	495c      	ldr	r1, [pc, #368]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7fe fe64 	bl	8000fa0 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe fe5c 	bl	8000fa0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e09b      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022fa:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d1ee      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xfc>
 8002306:	e03e      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d112      	bne.n	8002336 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002312:	f7fe fe45 	bl	8000fa0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e084      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b45      	ldr	r3, [pc, #276]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b0c      	cmp	r3, #12
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_ClockConfig+0x12a>
 8002334:	e027      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d11d      	bne.n	800237a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7fe fe2e 	bl	8000fa0 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e06d      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002356:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d1ee      	bne.n	8002340 <HAL_RCC_ClockConfig+0x158>
 8002362:	e010      	b.n	8002386 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7fe fe1c 	bl	8000fa0 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e05b      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1ee      	bne.n	8002364 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d219      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_ClockConfig+0x1be>
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	4b25      	ldr	r3, [pc, #148]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0201 	bic.w	r2, r3, #1
 80023ae:	4923      	ldr	r1, [pc, #140]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCC_ClockConfig+0x254>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e034      	b.n	8002432 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4917      	ldr	r1, [pc, #92]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	490f      	ldr	r1, [pc, #60]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002406:	f000 f823 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_RCC_ClockConfig+0x258>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490b      	ldr	r1, [pc, #44]	; (8002444 <HAL_RCC_ClockConfig+0x25c>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	4a0a      	ldr	r2, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x260>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002422:	4b0a      	ldr	r3, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x264>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fd6e 	bl	8000f08 <HAL_InitTick>
 800242c:	4603      	mov	r3, r0
 800242e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002430:	7afb      	ldrb	r3, [r7, #11]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00
 8002440:	40023800 	.word	0x40023800
 8002444:	080047fc 	.word	0x080047fc
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002456:	4b4d      	ldr	r3, [pc, #308]	; (800258c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b0c      	cmp	r3, #12
 8002464:	d00c      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x30>
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d87c      	bhi.n	8002564 <HAL_RCC_GetSysClockFreq+0x114>
 800246a:	2b04      	cmp	r3, #4
 800246c:	d002      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0x24>
 800246e:	2b08      	cmp	r3, #8
 8002470:	d003      	beq.n	800247a <HAL_RCC_GetSysClockFreq+0x2a>
 8002472:	e077      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_GetSysClockFreq+0x140>)
 8002476:	613b      	str	r3, [r7, #16]
      break;
 8002478:	e082      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800247a:	4b46      	ldr	r3, [pc, #280]	; (8002594 <HAL_RCC_GetSysClockFreq+0x144>)
 800247c:	613b      	str	r3, [r7, #16]
      break;
 800247e:	e07f      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	0c9b      	lsrs	r3, r3, #18
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	4a43      	ldr	r2, [pc, #268]	; (8002598 <HAL_RCC_GetSysClockFreq+0x148>)
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0d9b      	lsrs	r3, r3, #22
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	3301      	adds	r3, #1
 8002498:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	4b3c      	ldr	r3, [pc, #240]	; (800258c <HAL_RCC_GetSysClockFreq+0x13c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d01a      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	461a      	mov	r2, r3
 80024aa:	f04f 0300 	mov.w	r3, #0
 80024ae:	4939      	ldr	r1, [pc, #228]	; (8002594 <HAL_RCC_GetSysClockFreq+0x144>)
 80024b0:	fb01 f003 	mul.w	r0, r1, r3
 80024b4:	2100      	movs	r1, #0
 80024b6:	fb01 f102 	mul.w	r1, r1, r2
 80024ba:	1844      	adds	r4, r0, r1
 80024bc:	4935      	ldr	r1, [pc, #212]	; (8002594 <HAL_RCC_GetSysClockFreq+0x144>)
 80024be:	fba2 0101 	umull	r0, r1, r2, r1
 80024c2:	1863      	adds	r3, r4, r1
 80024c4:	4619      	mov	r1, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	461a      	mov	r2, r3
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	f7fd fe5d 	bl	800018c <__aeabi_uldivmod>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4613      	mov	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	e040      	b.n	800255e <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	461c      	mov	r4, r3
 80024e0:	f04f 0500 	mov.w	r5, #0
 80024e4:	4620      	mov	r0, r4
 80024e6:	4629      	mov	r1, r5
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	014b      	lsls	r3, r1, #5
 80024f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024f6:	0142      	lsls	r2, r0, #5
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	1b00      	subs	r0, r0, r4
 80024fe:	eb61 0105 	sbc.w	r1, r1, r5
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	018b      	lsls	r3, r1, #6
 800250c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002510:	0182      	lsls	r2, r0, #6
 8002512:	1a12      	subs	r2, r2, r0
 8002514:	eb63 0301 	sbc.w	r3, r3, r1
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	00d9      	lsls	r1, r3, #3
 8002522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002526:	00d0      	lsls	r0, r2, #3
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	1912      	adds	r2, r2, r4
 800252e:	eb45 0303 	adc.w	r3, r5, r3
 8002532:	f04f 0000 	mov.w	r0, #0
 8002536:	f04f 0100 	mov.w	r1, #0
 800253a:	0299      	lsls	r1, r3, #10
 800253c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002540:	0290      	lsls	r0, r2, #10
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	461a      	mov	r2, r3
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	f7fd fe1b 	bl	800018c <__aeabi_uldivmod>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4613      	mov	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	613b      	str	r3, [r7, #16]
      break;
 8002562:	e00d      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0b5b      	lsrs	r3, r3, #13
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	613b      	str	r3, [r7, #16]
      break;
 800257e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002580:	693b      	ldr	r3, [r7, #16]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bdb0      	pop	{r4, r5, r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400
 8002594:	016e3600 	.word	0x016e3600
 8002598:	080047f0 	.word	0x080047f0

0800259c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a0:	4b02      	ldr	r3, [pc, #8]	; (80025ac <HAL_RCC_GetHCLKFreq+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000000 	.word	0x20000000

080025b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025b4:	f7ff fff2 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	0800480c 	.word	0x0800480c

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025dc:	f7ff ffde 	bl	800259c <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	0800480c 	.word	0x0800480c

08002600 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002608:	2300      	movs	r3, #0
 800260a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12c      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002624:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	e016      	b.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b20      	ldr	r3, [pc, #128]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	4a1f      	ldr	r2, [pc, #124]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6253      	str	r3, [r2, #36]	; 0x24
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002650:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	4a17      	ldr	r2, [pc, #92]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002664:	d105      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800266c:	d101      	bne.n	8002672 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800266e:	2301      	movs	r3, #1
 8002670:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d105      	bne.n	8002684 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 0201 	bic.w	r2, r3, #1
 800268c:	490b      	ldr	r1, [pc, #44]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d001      	beq.n	80026a6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40007000 	.word	0x40007000
 80026bc:	40023c00 	.word	0x40023c00

080026c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e031      	b.n	8002736 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fa3a 	bl	8000b60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3304      	adds	r3, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4610      	mov	r0, r2
 8002700:	f000 fbf6 	bl	8002ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e03a      	b.n	80027ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002778:	d00e      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a16      	ldr	r2, [pc, #88]	; (80027d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_TIM_Base_Start_IT+0x9c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_TIM_Base_Start_IT+0x58>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d111      	bne.n	80027bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2b06      	cmp	r3, #6
 80027a8:	d010      	beq.n	80027cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ba:	e007      	b.n	80027cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40000800 	.word	0x40000800
 80027e0:	40010800 	.word	0x40010800

080027e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6a1a      	ldr	r2, [r3, #32]
 8002802:	f241 1311 	movw	r3, #4369	; 0x1111
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_TIM_Base_Stop_IT+0x38>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e031      	b.n	80028a6 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d106      	bne.n	800285c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f829 	bl	80028ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	4619      	mov	r1, r3
 800286e:	4610      	mov	r0, r2
 8002870:	f000 fb3e 	bl	8002ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d109      	bne.n	80028e4 <HAL_TIM_PWM_Start+0x24>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	bf14      	ite	ne
 80028dc:	2301      	movne	r3, #1
 80028de:	2300      	moveq	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e022      	b.n	800292a <HAL_TIM_PWM_Start+0x6a>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d109      	bne.n	80028fe <HAL_TIM_PWM_Start+0x3e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	e015      	b.n	800292a <HAL_TIM_PWM_Start+0x6a>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d109      	bne.n	8002918 <HAL_TIM_PWM_Start+0x58>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	bf14      	ite	ne
 8002910:	2301      	movne	r3, #1
 8002912:	2300      	moveq	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e008      	b.n	800292a <HAL_TIM_PWM_Start+0x6a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e051      	b.n	80029d6 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Start+0x82>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002940:	e013      	b.n	800296a <HAL_TIM_PWM_Start+0xaa>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0x92>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002950:	e00b      	b.n	800296a <HAL_TIM_PWM_Start+0xaa>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0xa2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002960:	e003      	b.n	800296a <HAL_TIM_PWM_Start+0xaa>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2201      	movs	r2, #1
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fca9 	bl	80032ca <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d00e      	beq.n	80029a0 <HAL_TIM_PWM_Start+0xe0>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a16      	ldr	r2, [pc, #88]	; (80029e0 <HAL_TIM_PWM_Start+0x120>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_TIM_PWM_Start+0xe0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <HAL_TIM_PWM_Start+0x124>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_PWM_Start+0xe0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a13      	ldr	r2, [pc, #76]	; (80029e8 <HAL_TIM_PWM_Start+0x128>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d111      	bne.n	80029c4 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d010      	beq.n	80029d4 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	e007      	b.n	80029d4 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40000400 	.word	0x40000400
 80029e4:	40000800 	.word	0x40000800
 80029e8:	40010800 	.word	0x40010800

080029ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d122      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d11b      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0202 	mvn.w	r2, #2
 8002a18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa43 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002a34:	e005      	b.n	8002a42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fa36 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fa45 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0204 	mvn.w	r2, #4
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa19 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa0c 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa1b 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0208 	mvn.w	r2, #8
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f9ef 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f9e2 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f9f1 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b10      	cmp	r3, #16
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0210 	mvn.w	r2, #16
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9c5 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9b8 	bl	8002ea8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9c7 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10e      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d107      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0201 	mvn.w	r2, #1
 8002b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe f886 	bl	8000c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d10e      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b40      	cmp	r3, #64	; 0x40
 8002b8a:	d107      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f9a1 	bl	8002ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e0ac      	b.n	8002d18 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	f200 809f 	bhi.w	8002d0c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002bce:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd4:	08002c09 	.word	0x08002c09
 8002bd8:	08002d0d 	.word	0x08002d0d
 8002bdc:	08002d0d 	.word	0x08002d0d
 8002be0:	08002d0d 	.word	0x08002d0d
 8002be4:	08002c49 	.word	0x08002c49
 8002be8:	08002d0d 	.word	0x08002d0d
 8002bec:	08002d0d 	.word	0x08002d0d
 8002bf0:	08002d0d 	.word	0x08002d0d
 8002bf4:	08002c8b 	.word	0x08002c8b
 8002bf8:	08002d0d 	.word	0x08002d0d
 8002bfc:	08002d0d 	.word	0x08002d0d
 8002c00:	08002d0d 	.word	0x08002d0d
 8002c04:	08002ccb 	.word	0x08002ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f9d0 	bl	8002fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0208 	orr.w	r2, r2, #8
 8002c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6999      	ldr	r1, [r3, #24]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	430a      	orrs	r2, r1
 8002c44:	619a      	str	r2, [r3, #24]
      break;
 8002c46:	e062      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f9ec 	bl	800302c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6999      	ldr	r1, [r3, #24]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	619a      	str	r2, [r3, #24]
      break;
 8002c88:	e041      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68b9      	ldr	r1, [r7, #8]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 fa09 	bl	80030a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 0208 	orr.w	r2, r2, #8
 8002ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69da      	ldr	r2, [r3, #28]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0204 	bic.w	r2, r2, #4
 8002cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69d9      	ldr	r1, [r3, #28]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	61da      	str	r2, [r3, #28]
      break;
 8002cc8:	e021      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fa26 	bl	8003122 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69da      	ldr	r2, [r3, #28]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69d9      	ldr	r1, [r3, #28]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	021a      	lsls	r2, r3, #8
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	61da      	str	r2, [r3, #28]
      break;
 8002d0a:	e000      	b.n	8002d0e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_ConfigClockSource+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e0b3      	b.n	8002ea0 <HAL_TIM_ConfigClockSource+0x180>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d70:	d03e      	beq.n	8002df0 <HAL_TIM_ConfigClockSource+0xd0>
 8002d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d76:	f200 8087 	bhi.w	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7e:	f000 8085 	beq.w	8002e8c <HAL_TIM_ConfigClockSource+0x16c>
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d87f      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002d88:	2b70      	cmp	r3, #112	; 0x70
 8002d8a:	d01a      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0xa2>
 8002d8c:	2b70      	cmp	r3, #112	; 0x70
 8002d8e:	d87b      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002d90:	2b60      	cmp	r3, #96	; 0x60
 8002d92:	d050      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0x116>
 8002d94:	2b60      	cmp	r3, #96	; 0x60
 8002d96:	d877      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002d98:	2b50      	cmp	r3, #80	; 0x50
 8002d9a:	d03c      	beq.n	8002e16 <HAL_TIM_ConfigClockSource+0xf6>
 8002d9c:	2b50      	cmp	r3, #80	; 0x50
 8002d9e:	d873      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d058      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x136>
 8002da4:	2b40      	cmp	r3, #64	; 0x40
 8002da6:	d86f      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002da8:	2b30      	cmp	r3, #48	; 0x30
 8002daa:	d064      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x156>
 8002dac:	2b30      	cmp	r3, #48	; 0x30
 8002dae:	d86b      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d060      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x156>
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d867      	bhi.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05c      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x156>
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d05a      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002dc0:	e062      	b.n	8002e88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6899      	ldr	r1, [r3, #8]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f000 fa5b 	bl	800328c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002de4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	609a      	str	r2, [r3, #8]
      break;
 8002dee:	e04e      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f000 fa44 	bl	800328c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e12:	609a      	str	r2, [r3, #8]
      break;
 8002e14:	e03b      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f000 f9bb 	bl	800319e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2150      	movs	r1, #80	; 0x50
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fa12 	bl	8003258 <TIM_ITRx_SetConfig>
      break;
 8002e34:	e02b      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f000 f9d9 	bl	80031fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2160      	movs	r1, #96	; 0x60
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fa02 	bl	8003258 <TIM_ITRx_SetConfig>
      break;
 8002e54:	e01b      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f000 f99b 	bl	800319e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2140      	movs	r1, #64	; 0x40
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 f9f2 	bl	8003258 <TIM_ITRx_SetConfig>
      break;
 8002e74:	e00b      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4610      	mov	r0, r2
 8002e82:	f000 f9e9 	bl	8003258 <TIM_ITRx_SetConfig>
        break;
 8002e86:	e002      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f06:	d007      	beq.n	8002f18 <TIM_Base_SetConfig+0x28>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a25      	ldr	r2, [pc, #148]	; (8002fa0 <TIM_Base_SetConfig+0xb0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_Base_SetConfig+0x28>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a24      	ldr	r2, [pc, #144]	; (8002fa4 <TIM_Base_SetConfig+0xb4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d108      	bne.n	8002f2a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d013      	beq.n	8002f5a <TIM_Base_SetConfig+0x6a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <TIM_Base_SetConfig+0xb0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00f      	beq.n	8002f5a <TIM_Base_SetConfig+0x6a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <TIM_Base_SetConfig+0xb4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <TIM_Base_SetConfig+0x6a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <TIM_Base_SetConfig+0xb8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <TIM_Base_SetConfig+0x6a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a17      	ldr	r2, [pc, #92]	; (8002fac <TIM_Base_SetConfig+0xbc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d003      	beq.n	8002f5a <TIM_Base_SetConfig+0x6a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <TIM_Base_SetConfig+0xc0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d108      	bne.n	8002f6c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	615a      	str	r2, [r3, #20]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr
 8002fa0:	40000400 	.word	0x40000400
 8002fa4:	40000800 	.word	0x40000800
 8002fa8:	40010800 	.word	0x40010800
 8002fac:	40010c00 	.word	0x40010c00
 8002fb0:	40011000 	.word	0x40011000

08002fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0201 	bic.w	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0303 	bic.w	r3, r3, #3
 8002fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f023 0302 	bic.w	r3, r3, #2
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	621a      	str	r2, [r3, #32]
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0210 	bic.w	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800305a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	4313      	orrs	r3, r2
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0320 	bic.w	r3, r3, #32
 8003076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	621a      	str	r2, [r3, #32]
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0303 	bic.w	r3, r3, #3
 80030de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	621a      	str	r2, [r3, #32]
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003150:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800316c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	031b      	lsls	r3, r3, #12
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800319e:	b480      	push	{r7}
 80031a0:	b087      	sub	sp, #28
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 0201 	bic.w	r2, r3, #1
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 030a 	bic.w	r3, r3, #10
 80031da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	621a      	str	r2, [r3, #32]
}
 80031f0:	bf00      	nop
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b087      	sub	sp, #28
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	f023 0210 	bic.w	r2, r3, #16
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	031b      	lsls	r3, r3, #12
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr

08003258 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4313      	orrs	r3, r2
 8003276:	f043 0307 	orr.w	r3, r3, #7
 800327a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	609a      	str	r2, [r3, #8]
}
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr

0800328c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	021a      	lsls	r2, r3, #8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b087      	sub	sp, #28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2201      	movs	r2, #1
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	401a      	ands	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f003 031f 	and.w	r3, r3, #31
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
	...

08003314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003328:	2302      	movs	r3, #2
 800332a:	e046      	b.n	80033ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336e:	d00e      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10c      	bne.n	80033a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003394:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	4313      	orrs	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40000400 	.word	0x40000400
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40010800 	.word	0x40010800

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e03f      	b.n	8003462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fcc8 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fc85 	bl	8003d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	; 0x28
 800346e:	af02      	add	r7, sp, #8
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b20      	cmp	r3, #32
 8003488:	d17c      	bne.n	8003584 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_UART_Transmit+0x2c>
 8003490:	88fb      	ldrh	r3, [r7, #6]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e075      	b.n	8003586 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d101      	bne.n	80034a8 <HAL_UART_Transmit+0x3e>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e06e      	b.n	8003586 <HAL_UART_Transmit+0x11c>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2221      	movs	r2, #33	; 0x21
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034be:	f7fd fd6f 	bl	8000fa0 <HAL_GetTick>
 80034c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	88fa      	ldrh	r2, [r7, #6]
 80034c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x82>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80034fc:	e02a      	b.n	8003554 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2200      	movs	r2, #0
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fa38 	bl	800397e <UART_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e036      	b.n	8003586 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10b      	bne.n	8003536 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800352c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	3302      	adds	r3, #2
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	e007      	b.n	8003546 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1cf      	bne.n	80034fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fa08 	bl	800397e <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e006      	b.n	8003586 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	3720      	adds	r7, #32
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d11d      	bne.n	80035e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_UART_Receive_IT+0x26>
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e016      	b.n	80035e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Receive_IT+0x38>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e00f      	b.n	80035e6 <HAL_UART_Receive_IT+0x58>
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	461a      	mov	r2, r3
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fa19 	bl	8003a12 <UART_Start_Receive_IT>
 80035e0:	4603      	mov	r3, r0
 80035e2:	e000      	b.n	80035e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fac9 	bl	8003bd2 <UART_Receive_IT>
      return;
 8003640:	e17b      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b1 	beq.w	80037ac <HAL_UART_IRQHandler+0x1bc>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_UART_IRQHandler+0x70>
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a6 	beq.w	80037ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003670:	2b00      	cmp	r3, #0
 8003672:	d005      	beq.n	8003680 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f043 0201 	orr.w	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f043 0202 	orr.w	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	f043 0204 	orr.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00f      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d104      	bne.n	80036de <HAL_UART_IRQHandler+0xee>
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f043 0208 	orr.w	r2, r3, #8
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 811e 	beq.w	8003930 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_UART_IRQHandler+0x11e>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 fa62 	bl	8003bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003718:	2b40      	cmp	r3, #64	; 0x40
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_UART_IRQHandler+0x146>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d031      	beq.n	800379a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f9a4 	bl	8003a84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003746:	2b40      	cmp	r3, #64	; 0x40
 8003748:	d123      	bne.n	8003792 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003758:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d013      	beq.n	800378a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	4a76      	ldr	r2, [pc, #472]	; (8003940 <HAL_UART_IRQHandler+0x350>)
 8003768:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f800 	bl	8001774 <HAL_DMA_Abort_IT>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003784:	4610      	mov	r0, r2
 8003786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e00e      	b.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f8e3 	bl	8003956 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e00a      	b.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f8df 	bl	8003956 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	e006      	b.n	80037a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f8db 	bl	8003956 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037a6:	e0c3      	b.n	8003930 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	bf00      	nop
    return;
 80037aa:	e0c1      	b.n	8003930 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 80a1 	bne.w	80038f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 809b 	beq.w	80038f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f003 0310 	and.w	r3, r3, #16
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8095 	beq.w	80038f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ee:	2b40      	cmp	r3, #64	; 0x40
 80037f0:	d14e      	bne.n	8003890 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80037fc:	8a3b      	ldrh	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8098 	beq.w	8003934 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003808:	8a3a      	ldrh	r2, [r7, #16]
 800380a:	429a      	cmp	r2, r3
 800380c:	f080 8092 	bcs.w	8003934 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8a3a      	ldrh	r2, [r7, #16]
 8003814:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b20      	cmp	r3, #32
 800381e:	d02b      	beq.n	8003878 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68da      	ldr	r2, [r3, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800382e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0210 	bic.w	r2, r2, #16
 800386c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd ff41 	bl	80016fa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003880:	b29b      	uxth	r3, r3
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	b29b      	uxth	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f86d 	bl	8003968 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800388e:	e051      	b.n	8003934 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003898:	b29b      	uxth	r3, r3
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d047      	beq.n	8003938 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038a8:	8a7b      	ldrh	r3, [r7, #18]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d044      	beq.n	8003938 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0210 	bic.w	r2, r2, #16
 80038ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ec:	8a7b      	ldrh	r3, [r7, #18]
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f839 	bl	8003968 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038f6:	e01f      	b.n	8003938 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_UART_IRQHandler+0x324>
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f8f9 	bl	8003b04 <UART_Transmit_IT>
    return;
 8003912:	e012      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <HAL_UART_IRQHandler+0x34a>
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f93a 	bl	8003ba2 <UART_EndTransmit_IT>
    return;
 800392e:	e004      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
    return;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
      return;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <HAL_UART_IRQHandler+0x34a>
      return;
 8003938:	bf00      	nop
  }
}
 800393a:	3728      	adds	r7, #40	; 0x28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	08003add 	.word	0x08003add

08003944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr

08003956 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4613      	mov	r3, r2
 800398c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398e:	e02c      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d028      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x30>
 800399e:	f7fd faff 	bl	8000fa0 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d21d      	bcs.n	80039ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695a      	ldr	r2, [r3, #20]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0201 	bic.w	r2, r2, #1
 80039cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00f      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d0c3      	beq.n	8003990 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	88fa      	ldrh	r2, [r7, #6]
 8003a2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	88fa      	ldrh	r2, [r7, #6]
 8003a30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2222      	movs	r2, #34	; 0x22
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a56:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f042 0201 	orr.w	r2, r2, #1
 8003a66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0220 	orr.w	r2, r2, #32
 8003a76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0210 	bic.w	r2, r2, #16
 8003ac2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff ff2d 	bl	8003956 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b21      	cmp	r3, #33	; 0x21
 8003b16:	d13e      	bne.n	8003b96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b20:	d114      	bne.n	8003b4c <UART_Transmit_IT+0x48>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d110      	bne.n	8003b4c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	1c9a      	adds	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	621a      	str	r2, [r3, #32]
 8003b4a:	e008      	b.n	8003b5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	1c59      	adds	r1, r3, #1
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6211      	str	r1, [r2, #32]
 8003b56:	781a      	ldrb	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr

08003ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff febe 	bl	8003944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b22      	cmp	r3, #34	; 0x22
 8003be4:	f040 8099 	bne.w	8003d1a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d117      	bne.n	8003c22 <UART_Receive_IT+0x50>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c20:	e026      	b.n	8003c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d007      	beq.n	8003c46 <UART_Receive_IT+0x74>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <UART_Receive_IT+0x82>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e008      	b.n	8003c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d148      	bne.n	8003d16 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0220 	bic.w	r2, r2, #32
 8003c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d123      	bne.n	8003d0c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0210 	bic.w	r2, r2, #16
 8003cd8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d10a      	bne.n	8003cfe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fe2f 	bl	8003968 <HAL_UARTEx_RxEventCallback>
 8003d0a:	e002      	b.n	8003d12 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd f8af 	bl	8000e70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e002      	b.n	8003d1c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d1a:	2302      	movs	r3, #2
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d64:	f023 030c 	bic.w	r3, r3, #12
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a55      	ldr	r2, [pc, #340]	; (8003ee4 <UART_SetConfig+0x1c0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d103      	bne.n	8003d9a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d92:	f7fe fc21 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	e002      	b.n	8003da0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d9a:	f7fe fc09 	bl	80025b0 <HAL_RCC_GetPCLK1Freq>
 8003d9e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da8:	d14c      	bne.n	8003e44 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009a      	lsls	r2, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	4a49      	ldr	r2, [pc, #292]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	0119      	lsls	r1, r3, #4
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003de0:	4b41      	ldr	r3, [pc, #260]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003de2:	fba3 0302 	umull	r0, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2064      	movs	r0, #100	; 0x64
 8003dea:	fb00 f303 	mul.w	r3, r0, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e02:	4419      	add	r1, r3
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	441a      	add	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e1a:	4b33      	ldr	r3, [pc, #204]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003e1c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	2064      	movs	r0, #100	; 0x64
 8003e24:	fb00 f303 	mul.w	r3, r0, r3
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	3332      	adds	r3, #50	; 0x32
 8003e2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003e30:	fba2 2303 	umull	r2, r3, r2, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	f003 0207 	and.w	r2, r3, #7
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	440a      	add	r2, r1
 8003e40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e42:	e04a      	b.n	8003eda <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009a      	lsls	r2, r3, #2
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	0119      	lsls	r1, r3, #4
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	441a      	add	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003e7c:	fba3 0302 	umull	r0, r3, r3, r2
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	2064      	movs	r0, #100	; 0x64
 8003e84:	fb00 f303 	mul.w	r3, r0, r3
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	3332      	adds	r3, #50	; 0x32
 8003e8e:	4a16      	ldr	r2, [pc, #88]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9a:	4419      	add	r1, r3
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009a      	lsls	r2, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003eb4:	fba3 0302 	umull	r0, r3, r3, r2
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	2064      	movs	r0, #100	; 0x64
 8003ebc:	fb00 f303 	mul.w	r3, r0, r3
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	3332      	adds	r3, #50	; 0x32
 8003ec6:	4a08      	ldr	r2, [pc, #32]	; (8003ee8 <UART_SetConfig+0x1c4>)
 8003ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40013800 	.word	0x40013800
 8003ee8:	51eb851f 	.word	0x51eb851f

08003eec <__errno>:
 8003eec:	4b01      	ldr	r3, [pc, #4]	; (8003ef4 <__errno+0x8>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c

08003ef8 <__libc_init_array>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	2600      	movs	r6, #0
 8003efc:	4d0c      	ldr	r5, [pc, #48]	; (8003f30 <__libc_init_array+0x38>)
 8003efe:	4c0d      	ldr	r4, [pc, #52]	; (8003f34 <__libc_init_array+0x3c>)
 8003f00:	1b64      	subs	r4, r4, r5
 8003f02:	10a4      	asrs	r4, r4, #2
 8003f04:	42a6      	cmp	r6, r4
 8003f06:	d109      	bne.n	8003f1c <__libc_init_array+0x24>
 8003f08:	f000 fc5c 	bl	80047c4 <_init>
 8003f0c:	2600      	movs	r6, #0
 8003f0e:	4d0a      	ldr	r5, [pc, #40]	; (8003f38 <__libc_init_array+0x40>)
 8003f10:	4c0a      	ldr	r4, [pc, #40]	; (8003f3c <__libc_init_array+0x44>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	42a6      	cmp	r6, r4
 8003f18:	d105      	bne.n	8003f26 <__libc_init_array+0x2e>
 8003f1a:	bd70      	pop	{r4, r5, r6, pc}
 8003f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f20:	4798      	blx	r3
 8003f22:	3601      	adds	r6, #1
 8003f24:	e7ee      	b.n	8003f04 <__libc_init_array+0xc>
 8003f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f2a:	4798      	blx	r3
 8003f2c:	3601      	adds	r6, #1
 8003f2e:	e7f2      	b.n	8003f16 <__libc_init_array+0x1e>
 8003f30:	08004850 	.word	0x08004850
 8003f34:	08004850 	.word	0x08004850
 8003f38:	08004850 	.word	0x08004850
 8003f3c:	08004854 	.word	0x08004854

08003f40 <memset>:
 8003f40:	4603      	mov	r3, r0
 8003f42:	4402      	add	r2, r0
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d100      	bne.n	8003f4a <memset+0xa>
 8003f48:	4770      	bx	lr
 8003f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4e:	e7f9      	b.n	8003f44 <memset+0x4>

08003f50 <siprintf>:
 8003f50:	b40e      	push	{r1, r2, r3}
 8003f52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f56:	b500      	push	{lr}
 8003f58:	b09c      	sub	sp, #112	; 0x70
 8003f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f5c:	9002      	str	r0, [sp, #8]
 8003f5e:	9006      	str	r0, [sp, #24]
 8003f60:	9107      	str	r1, [sp, #28]
 8003f62:	9104      	str	r1, [sp, #16]
 8003f64:	4808      	ldr	r0, [pc, #32]	; (8003f88 <siprintf+0x38>)
 8003f66:	4909      	ldr	r1, [pc, #36]	; (8003f8c <siprintf+0x3c>)
 8003f68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f6c:	9105      	str	r1, [sp, #20]
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	a902      	add	r1, sp, #8
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	f000 f868 	bl	8004048 <_svfiprintf_r>
 8003f78:	2200      	movs	r2, #0
 8003f7a:	9b02      	ldr	r3, [sp, #8]
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	b01c      	add	sp, #112	; 0x70
 8003f80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f84:	b003      	add	sp, #12
 8003f86:	4770      	bx	lr
 8003f88:	2000000c 	.word	0x2000000c
 8003f8c:	ffff0208 	.word	0xffff0208

08003f90 <__ssputs_r>:
 8003f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f94:	688e      	ldr	r6, [r1, #8]
 8003f96:	4682      	mov	sl, r0
 8003f98:	429e      	cmp	r6, r3
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	4690      	mov	r8, r2
 8003f9e:	461f      	mov	r7, r3
 8003fa0:	d838      	bhi.n	8004014 <__ssputs_r+0x84>
 8003fa2:	898a      	ldrh	r2, [r1, #12]
 8003fa4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fa8:	d032      	beq.n	8004010 <__ssputs_r+0x80>
 8003faa:	6825      	ldr	r5, [r4, #0]
 8003fac:	6909      	ldr	r1, [r1, #16]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	eba5 0901 	sub.w	r9, r5, r1
 8003fb4:	6965      	ldr	r5, [r4, #20]
 8003fb6:	444b      	add	r3, r9
 8003fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fc0:	106d      	asrs	r5, r5, #1
 8003fc2:	429d      	cmp	r5, r3
 8003fc4:	bf38      	it	cc
 8003fc6:	461d      	movcc	r5, r3
 8003fc8:	0553      	lsls	r3, r2, #21
 8003fca:	d531      	bpl.n	8004030 <__ssputs_r+0xa0>
 8003fcc:	4629      	mov	r1, r5
 8003fce:	f000 fb53 	bl	8004678 <_malloc_r>
 8003fd2:	4606      	mov	r6, r0
 8003fd4:	b950      	cbnz	r0, 8003fec <__ssputs_r+0x5c>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	f8ca 3000 	str.w	r3, [sl]
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	464a      	mov	r2, r9
 8003fee:	6921      	ldr	r1, [r4, #16]
 8003ff0:	f000 face 	bl	8004590 <memcpy>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	6126      	str	r6, [r4, #16]
 8004002:	444e      	add	r6, r9
 8004004:	6026      	str	r6, [r4, #0]
 8004006:	463e      	mov	r6, r7
 8004008:	6165      	str	r5, [r4, #20]
 800400a:	eba5 0509 	sub.w	r5, r5, r9
 800400e:	60a5      	str	r5, [r4, #8]
 8004010:	42be      	cmp	r6, r7
 8004012:	d900      	bls.n	8004016 <__ssputs_r+0x86>
 8004014:	463e      	mov	r6, r7
 8004016:	4632      	mov	r2, r6
 8004018:	4641      	mov	r1, r8
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	f000 fac6 	bl	80045ac <memmove>
 8004020:	68a3      	ldr	r3, [r4, #8]
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	1b9b      	subs	r3, r3, r6
 8004026:	4432      	add	r2, r6
 8004028:	2000      	movs	r0, #0
 800402a:	60a3      	str	r3, [r4, #8]
 800402c:	6022      	str	r2, [r4, #0]
 800402e:	e7db      	b.n	8003fe8 <__ssputs_r+0x58>
 8004030:	462a      	mov	r2, r5
 8004032:	f000 fb7b 	bl	800472c <_realloc_r>
 8004036:	4606      	mov	r6, r0
 8004038:	2800      	cmp	r0, #0
 800403a:	d1e1      	bne.n	8004000 <__ssputs_r+0x70>
 800403c:	4650      	mov	r0, sl
 800403e:	6921      	ldr	r1, [r4, #16]
 8004040:	f000 face 	bl	80045e0 <_free_r>
 8004044:	e7c7      	b.n	8003fd6 <__ssputs_r+0x46>
	...

08004048 <_svfiprintf_r>:
 8004048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800404c:	4698      	mov	r8, r3
 800404e:	898b      	ldrh	r3, [r1, #12]
 8004050:	4607      	mov	r7, r0
 8004052:	061b      	lsls	r3, r3, #24
 8004054:	460d      	mov	r5, r1
 8004056:	4614      	mov	r4, r2
 8004058:	b09d      	sub	sp, #116	; 0x74
 800405a:	d50e      	bpl.n	800407a <_svfiprintf_r+0x32>
 800405c:	690b      	ldr	r3, [r1, #16]
 800405e:	b963      	cbnz	r3, 800407a <_svfiprintf_r+0x32>
 8004060:	2140      	movs	r1, #64	; 0x40
 8004062:	f000 fb09 	bl	8004678 <_malloc_r>
 8004066:	6028      	str	r0, [r5, #0]
 8004068:	6128      	str	r0, [r5, #16]
 800406a:	b920      	cbnz	r0, 8004076 <_svfiprintf_r+0x2e>
 800406c:	230c      	movs	r3, #12
 800406e:	603b      	str	r3, [r7, #0]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	e0d1      	b.n	800421a <_svfiprintf_r+0x1d2>
 8004076:	2340      	movs	r3, #64	; 0x40
 8004078:	616b      	str	r3, [r5, #20]
 800407a:	2300      	movs	r3, #0
 800407c:	9309      	str	r3, [sp, #36]	; 0x24
 800407e:	2320      	movs	r3, #32
 8004080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004084:	2330      	movs	r3, #48	; 0x30
 8004086:	f04f 0901 	mov.w	r9, #1
 800408a:	f8cd 800c 	str.w	r8, [sp, #12]
 800408e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004234 <_svfiprintf_r+0x1ec>
 8004092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004096:	4623      	mov	r3, r4
 8004098:	469a      	mov	sl, r3
 800409a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800409e:	b10a      	cbz	r2, 80040a4 <_svfiprintf_r+0x5c>
 80040a0:	2a25      	cmp	r2, #37	; 0x25
 80040a2:	d1f9      	bne.n	8004098 <_svfiprintf_r+0x50>
 80040a4:	ebba 0b04 	subs.w	fp, sl, r4
 80040a8:	d00b      	beq.n	80040c2 <_svfiprintf_r+0x7a>
 80040aa:	465b      	mov	r3, fp
 80040ac:	4622      	mov	r2, r4
 80040ae:	4629      	mov	r1, r5
 80040b0:	4638      	mov	r0, r7
 80040b2:	f7ff ff6d 	bl	8003f90 <__ssputs_r>
 80040b6:	3001      	adds	r0, #1
 80040b8:	f000 80aa 	beq.w	8004210 <_svfiprintf_r+0x1c8>
 80040bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040be:	445a      	add	r2, fp
 80040c0:	9209      	str	r2, [sp, #36]	; 0x24
 80040c2:	f89a 3000 	ldrb.w	r3, [sl]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80a2 	beq.w	8004210 <_svfiprintf_r+0x1c8>
 80040cc:	2300      	movs	r3, #0
 80040ce:	f04f 32ff 	mov.w	r2, #4294967295
 80040d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040d6:	f10a 0a01 	add.w	sl, sl, #1
 80040da:	9304      	str	r3, [sp, #16]
 80040dc:	9307      	str	r3, [sp, #28]
 80040de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040e2:	931a      	str	r3, [sp, #104]	; 0x68
 80040e4:	4654      	mov	r4, sl
 80040e6:	2205      	movs	r2, #5
 80040e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ec:	4851      	ldr	r0, [pc, #324]	; (8004234 <_svfiprintf_r+0x1ec>)
 80040ee:	f000 fa41 	bl	8004574 <memchr>
 80040f2:	9a04      	ldr	r2, [sp, #16]
 80040f4:	b9d8      	cbnz	r0, 800412e <_svfiprintf_r+0xe6>
 80040f6:	06d0      	lsls	r0, r2, #27
 80040f8:	bf44      	itt	mi
 80040fa:	2320      	movmi	r3, #32
 80040fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004100:	0711      	lsls	r1, r2, #28
 8004102:	bf44      	itt	mi
 8004104:	232b      	movmi	r3, #43	; 0x2b
 8004106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800410a:	f89a 3000 	ldrb.w	r3, [sl]
 800410e:	2b2a      	cmp	r3, #42	; 0x2a
 8004110:	d015      	beq.n	800413e <_svfiprintf_r+0xf6>
 8004112:	4654      	mov	r4, sl
 8004114:	2000      	movs	r0, #0
 8004116:	f04f 0c0a 	mov.w	ip, #10
 800411a:	9a07      	ldr	r2, [sp, #28]
 800411c:	4621      	mov	r1, r4
 800411e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004122:	3b30      	subs	r3, #48	; 0x30
 8004124:	2b09      	cmp	r3, #9
 8004126:	d94e      	bls.n	80041c6 <_svfiprintf_r+0x17e>
 8004128:	b1b0      	cbz	r0, 8004158 <_svfiprintf_r+0x110>
 800412a:	9207      	str	r2, [sp, #28]
 800412c:	e014      	b.n	8004158 <_svfiprintf_r+0x110>
 800412e:	eba0 0308 	sub.w	r3, r0, r8
 8004132:	fa09 f303 	lsl.w	r3, r9, r3
 8004136:	4313      	orrs	r3, r2
 8004138:	46a2      	mov	sl, r4
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	e7d2      	b.n	80040e4 <_svfiprintf_r+0x9c>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	1d19      	adds	r1, r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	9103      	str	r1, [sp, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bfbb      	ittet	lt
 800414a:	425b      	neglt	r3, r3
 800414c:	f042 0202 	orrlt.w	r2, r2, #2
 8004150:	9307      	strge	r3, [sp, #28]
 8004152:	9307      	strlt	r3, [sp, #28]
 8004154:	bfb8      	it	lt
 8004156:	9204      	strlt	r2, [sp, #16]
 8004158:	7823      	ldrb	r3, [r4, #0]
 800415a:	2b2e      	cmp	r3, #46	; 0x2e
 800415c:	d10c      	bne.n	8004178 <_svfiprintf_r+0x130>
 800415e:	7863      	ldrb	r3, [r4, #1]
 8004160:	2b2a      	cmp	r3, #42	; 0x2a
 8004162:	d135      	bne.n	80041d0 <_svfiprintf_r+0x188>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	3402      	adds	r4, #2
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	9203      	str	r2, [sp, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	bfb8      	it	lt
 8004172:	f04f 33ff 	movlt.w	r3, #4294967295
 8004176:	9305      	str	r3, [sp, #20]
 8004178:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004244 <_svfiprintf_r+0x1fc>
 800417c:	2203      	movs	r2, #3
 800417e:	4650      	mov	r0, sl
 8004180:	7821      	ldrb	r1, [r4, #0]
 8004182:	f000 f9f7 	bl	8004574 <memchr>
 8004186:	b140      	cbz	r0, 800419a <_svfiprintf_r+0x152>
 8004188:	2340      	movs	r3, #64	; 0x40
 800418a:	eba0 000a 	sub.w	r0, r0, sl
 800418e:	fa03 f000 	lsl.w	r0, r3, r0
 8004192:	9b04      	ldr	r3, [sp, #16]
 8004194:	3401      	adds	r4, #1
 8004196:	4303      	orrs	r3, r0
 8004198:	9304      	str	r3, [sp, #16]
 800419a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800419e:	2206      	movs	r2, #6
 80041a0:	4825      	ldr	r0, [pc, #148]	; (8004238 <_svfiprintf_r+0x1f0>)
 80041a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a6:	f000 f9e5 	bl	8004574 <memchr>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d038      	beq.n	8004220 <_svfiprintf_r+0x1d8>
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <_svfiprintf_r+0x1f4>)
 80041b0:	bb1b      	cbnz	r3, 80041fa <_svfiprintf_r+0x1b2>
 80041b2:	9b03      	ldr	r3, [sp, #12]
 80041b4:	3307      	adds	r3, #7
 80041b6:	f023 0307 	bic.w	r3, r3, #7
 80041ba:	3308      	adds	r3, #8
 80041bc:	9303      	str	r3, [sp, #12]
 80041be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c0:	4433      	add	r3, r6
 80041c2:	9309      	str	r3, [sp, #36]	; 0x24
 80041c4:	e767      	b.n	8004096 <_svfiprintf_r+0x4e>
 80041c6:	460c      	mov	r4, r1
 80041c8:	2001      	movs	r0, #1
 80041ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ce:	e7a5      	b.n	800411c <_svfiprintf_r+0xd4>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f04f 0c0a 	mov.w	ip, #10
 80041d6:	4619      	mov	r1, r3
 80041d8:	3401      	adds	r4, #1
 80041da:	9305      	str	r3, [sp, #20]
 80041dc:	4620      	mov	r0, r4
 80041de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041e2:	3a30      	subs	r2, #48	; 0x30
 80041e4:	2a09      	cmp	r2, #9
 80041e6:	d903      	bls.n	80041f0 <_svfiprintf_r+0x1a8>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0c5      	beq.n	8004178 <_svfiprintf_r+0x130>
 80041ec:	9105      	str	r1, [sp, #20]
 80041ee:	e7c3      	b.n	8004178 <_svfiprintf_r+0x130>
 80041f0:	4604      	mov	r4, r0
 80041f2:	2301      	movs	r3, #1
 80041f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80041f8:	e7f0      	b.n	80041dc <_svfiprintf_r+0x194>
 80041fa:	ab03      	add	r3, sp, #12
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	462a      	mov	r2, r5
 8004200:	4638      	mov	r0, r7
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <_svfiprintf_r+0x1f8>)
 8004204:	a904      	add	r1, sp, #16
 8004206:	f3af 8000 	nop.w
 800420a:	1c42      	adds	r2, r0, #1
 800420c:	4606      	mov	r6, r0
 800420e:	d1d6      	bne.n	80041be <_svfiprintf_r+0x176>
 8004210:	89ab      	ldrh	r3, [r5, #12]
 8004212:	065b      	lsls	r3, r3, #25
 8004214:	f53f af2c 	bmi.w	8004070 <_svfiprintf_r+0x28>
 8004218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800421a:	b01d      	add	sp, #116	; 0x74
 800421c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004220:	ab03      	add	r3, sp, #12
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	462a      	mov	r2, r5
 8004226:	4638      	mov	r0, r7
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <_svfiprintf_r+0x1f8>)
 800422a:	a904      	add	r1, sp, #16
 800422c:	f000 f87c 	bl	8004328 <_printf_i>
 8004230:	e7eb      	b.n	800420a <_svfiprintf_r+0x1c2>
 8004232:	bf00      	nop
 8004234:	08004814 	.word	0x08004814
 8004238:	0800481e 	.word	0x0800481e
 800423c:	00000000 	.word	0x00000000
 8004240:	08003f91 	.word	0x08003f91
 8004244:	0800481a 	.word	0x0800481a

08004248 <_printf_common>:
 8004248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800424c:	4616      	mov	r6, r2
 800424e:	4699      	mov	r9, r3
 8004250:	688a      	ldr	r2, [r1, #8]
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4607      	mov	r7, r0
 8004256:	4293      	cmp	r3, r2
 8004258:	bfb8      	it	lt
 800425a:	4613      	movlt	r3, r2
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004262:	460c      	mov	r4, r1
 8004264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004268:	b10a      	cbz	r2, 800426e <_printf_common+0x26>
 800426a:	3301      	adds	r3, #1
 800426c:	6033      	str	r3, [r6, #0]
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	0699      	lsls	r1, r3, #26
 8004272:	bf42      	ittt	mi
 8004274:	6833      	ldrmi	r3, [r6, #0]
 8004276:	3302      	addmi	r3, #2
 8004278:	6033      	strmi	r3, [r6, #0]
 800427a:	6825      	ldr	r5, [r4, #0]
 800427c:	f015 0506 	ands.w	r5, r5, #6
 8004280:	d106      	bne.n	8004290 <_printf_common+0x48>
 8004282:	f104 0a19 	add.w	sl, r4, #25
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	6832      	ldr	r2, [r6, #0]
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	42ab      	cmp	r3, r5
 800428e:	dc28      	bgt.n	80042e2 <_printf_common+0x9a>
 8004290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004294:	1e13      	subs	r3, r2, #0
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	bf18      	it	ne
 800429a:	2301      	movne	r3, #1
 800429c:	0692      	lsls	r2, r2, #26
 800429e:	d42d      	bmi.n	80042fc <_printf_common+0xb4>
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a8:	47c0      	blx	r8
 80042aa:	3001      	adds	r0, #1
 80042ac:	d020      	beq.n	80042f0 <_printf_common+0xa8>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	68e5      	ldr	r5, [r4, #12]
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	bf18      	it	ne
 80042ba:	2500      	movne	r5, #0
 80042bc:	6832      	ldr	r2, [r6, #0]
 80042be:	f04f 0600 	mov.w	r6, #0
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	bf08      	it	eq
 80042c6:	1aad      	subeq	r5, r5, r2
 80042c8:	6922      	ldr	r2, [r4, #16]
 80042ca:	bf08      	it	eq
 80042cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bfc4      	itt	gt
 80042d4:	1a9b      	subgt	r3, r3, r2
 80042d6:	18ed      	addgt	r5, r5, r3
 80042d8:	341a      	adds	r4, #26
 80042da:	42b5      	cmp	r5, r6
 80042dc:	d11a      	bne.n	8004314 <_printf_common+0xcc>
 80042de:	2000      	movs	r0, #0
 80042e0:	e008      	b.n	80042f4 <_printf_common+0xac>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4652      	mov	r2, sl
 80042e6:	4649      	mov	r1, r9
 80042e8:	4638      	mov	r0, r7
 80042ea:	47c0      	blx	r8
 80042ec:	3001      	adds	r0, #1
 80042ee:	d103      	bne.n	80042f8 <_printf_common+0xb0>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f8:	3501      	adds	r5, #1
 80042fa:	e7c4      	b.n	8004286 <_printf_common+0x3e>
 80042fc:	2030      	movs	r0, #48	; 0x30
 80042fe:	18e1      	adds	r1, r4, r3
 8004300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800430a:	4422      	add	r2, r4
 800430c:	3302      	adds	r3, #2
 800430e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004312:	e7c5      	b.n	80042a0 <_printf_common+0x58>
 8004314:	2301      	movs	r3, #1
 8004316:	4622      	mov	r2, r4
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d0e6      	beq.n	80042f0 <_printf_common+0xa8>
 8004322:	3601      	adds	r6, #1
 8004324:	e7d9      	b.n	80042da <_printf_common+0x92>
	...

08004328 <_printf_i>:
 8004328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	460c      	mov	r4, r1
 800432e:	7e27      	ldrb	r7, [r4, #24]
 8004330:	4691      	mov	r9, r2
 8004332:	2f78      	cmp	r7, #120	; 0x78
 8004334:	4680      	mov	r8, r0
 8004336:	469a      	mov	sl, r3
 8004338:	990c      	ldr	r1, [sp, #48]	; 0x30
 800433a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800433e:	d807      	bhi.n	8004350 <_printf_i+0x28>
 8004340:	2f62      	cmp	r7, #98	; 0x62
 8004342:	d80a      	bhi.n	800435a <_printf_i+0x32>
 8004344:	2f00      	cmp	r7, #0
 8004346:	f000 80d9 	beq.w	80044fc <_printf_i+0x1d4>
 800434a:	2f58      	cmp	r7, #88	; 0x58
 800434c:	f000 80a4 	beq.w	8004498 <_printf_i+0x170>
 8004350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004358:	e03a      	b.n	80043d0 <_printf_i+0xa8>
 800435a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800435e:	2b15      	cmp	r3, #21
 8004360:	d8f6      	bhi.n	8004350 <_printf_i+0x28>
 8004362:	a001      	add	r0, pc, #4	; (adr r0, 8004368 <_printf_i+0x40>)
 8004364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043d5 	.word	0x080043d5
 8004370:	08004351 	.word	0x08004351
 8004374:	08004351 	.word	0x08004351
 8004378:	08004351 	.word	0x08004351
 800437c:	08004351 	.word	0x08004351
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004351 	.word	0x08004351
 8004388:	08004351 	.word	0x08004351
 800438c:	08004351 	.word	0x08004351
 8004390:	08004351 	.word	0x08004351
 8004394:	080044e3 	.word	0x080044e3
 8004398:	08004405 	.word	0x08004405
 800439c:	080044c5 	.word	0x080044c5
 80043a0:	08004351 	.word	0x08004351
 80043a4:	08004351 	.word	0x08004351
 80043a8:	08004505 	.word	0x08004505
 80043ac:	08004351 	.word	0x08004351
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004351 	.word	0x08004351
 80043b8:	08004351 	.word	0x08004351
 80043bc:	080044cd 	.word	0x080044cd
 80043c0:	680b      	ldr	r3, [r1, #0]
 80043c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043c6:	1d1a      	adds	r2, r3, #4
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	600a      	str	r2, [r1, #0]
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a4      	b.n	800451e <_printf_i+0x1f6>
 80043d4:	6825      	ldr	r5, [r4, #0]
 80043d6:	6808      	ldr	r0, [r1, #0]
 80043d8:	062e      	lsls	r6, r5, #24
 80043da:	f100 0304 	add.w	r3, r0, #4
 80043de:	d50a      	bpl.n	80043f6 <_printf_i+0xce>
 80043e0:	6805      	ldr	r5, [r0, #0]
 80043e2:	600b      	str	r3, [r1, #0]
 80043e4:	2d00      	cmp	r5, #0
 80043e6:	da03      	bge.n	80043f0 <_printf_i+0xc8>
 80043e8:	232d      	movs	r3, #45	; 0x2d
 80043ea:	426d      	negs	r5, r5
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f0:	230a      	movs	r3, #10
 80043f2:	485e      	ldr	r0, [pc, #376]	; (800456c <_printf_i+0x244>)
 80043f4:	e019      	b.n	800442a <_printf_i+0x102>
 80043f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80043fa:	6805      	ldr	r5, [r0, #0]
 80043fc:	600b      	str	r3, [r1, #0]
 80043fe:	bf18      	it	ne
 8004400:	b22d      	sxthne	r5, r5
 8004402:	e7ef      	b.n	80043e4 <_printf_i+0xbc>
 8004404:	680b      	ldr	r3, [r1, #0]
 8004406:	6825      	ldr	r5, [r4, #0]
 8004408:	1d18      	adds	r0, r3, #4
 800440a:	6008      	str	r0, [r1, #0]
 800440c:	0628      	lsls	r0, r5, #24
 800440e:	d501      	bpl.n	8004414 <_printf_i+0xec>
 8004410:	681d      	ldr	r5, [r3, #0]
 8004412:	e002      	b.n	800441a <_printf_i+0xf2>
 8004414:	0669      	lsls	r1, r5, #25
 8004416:	d5fb      	bpl.n	8004410 <_printf_i+0xe8>
 8004418:	881d      	ldrh	r5, [r3, #0]
 800441a:	2f6f      	cmp	r7, #111	; 0x6f
 800441c:	bf0c      	ite	eq
 800441e:	2308      	moveq	r3, #8
 8004420:	230a      	movne	r3, #10
 8004422:	4852      	ldr	r0, [pc, #328]	; (800456c <_printf_i+0x244>)
 8004424:	2100      	movs	r1, #0
 8004426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800442a:	6866      	ldr	r6, [r4, #4]
 800442c:	2e00      	cmp	r6, #0
 800442e:	bfa8      	it	ge
 8004430:	6821      	ldrge	r1, [r4, #0]
 8004432:	60a6      	str	r6, [r4, #8]
 8004434:	bfa4      	itt	ge
 8004436:	f021 0104 	bicge.w	r1, r1, #4
 800443a:	6021      	strge	r1, [r4, #0]
 800443c:	b90d      	cbnz	r5, 8004442 <_printf_i+0x11a>
 800443e:	2e00      	cmp	r6, #0
 8004440:	d04d      	beq.n	80044de <_printf_i+0x1b6>
 8004442:	4616      	mov	r6, r2
 8004444:	fbb5 f1f3 	udiv	r1, r5, r3
 8004448:	fb03 5711 	mls	r7, r3, r1, r5
 800444c:	5dc7      	ldrb	r7, [r0, r7]
 800444e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004452:	462f      	mov	r7, r5
 8004454:	42bb      	cmp	r3, r7
 8004456:	460d      	mov	r5, r1
 8004458:	d9f4      	bls.n	8004444 <_printf_i+0x11c>
 800445a:	2b08      	cmp	r3, #8
 800445c:	d10b      	bne.n	8004476 <_printf_i+0x14e>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	07df      	lsls	r7, r3, #31
 8004462:	d508      	bpl.n	8004476 <_printf_i+0x14e>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	6861      	ldr	r1, [r4, #4]
 8004468:	4299      	cmp	r1, r3
 800446a:	bfde      	ittt	le
 800446c:	2330      	movle	r3, #48	; 0x30
 800446e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004472:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004476:	1b92      	subs	r2, r2, r6
 8004478:	6122      	str	r2, [r4, #16]
 800447a:	464b      	mov	r3, r9
 800447c:	4621      	mov	r1, r4
 800447e:	4640      	mov	r0, r8
 8004480:	f8cd a000 	str.w	sl, [sp]
 8004484:	aa03      	add	r2, sp, #12
 8004486:	f7ff fedf 	bl	8004248 <_printf_common>
 800448a:	3001      	adds	r0, #1
 800448c:	d14c      	bne.n	8004528 <_printf_i+0x200>
 800448e:	f04f 30ff 	mov.w	r0, #4294967295
 8004492:	b004      	add	sp, #16
 8004494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004498:	4834      	ldr	r0, [pc, #208]	; (800456c <_printf_i+0x244>)
 800449a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800449e:	680e      	ldr	r6, [r1, #0]
 80044a0:	6823      	ldr	r3, [r4, #0]
 80044a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80044a6:	061f      	lsls	r7, r3, #24
 80044a8:	600e      	str	r6, [r1, #0]
 80044aa:	d514      	bpl.n	80044d6 <_printf_i+0x1ae>
 80044ac:	07d9      	lsls	r1, r3, #31
 80044ae:	bf44      	itt	mi
 80044b0:	f043 0320 	orrmi.w	r3, r3, #32
 80044b4:	6023      	strmi	r3, [r4, #0]
 80044b6:	b91d      	cbnz	r5, 80044c0 <_printf_i+0x198>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f023 0320 	bic.w	r3, r3, #32
 80044be:	6023      	str	r3, [r4, #0]
 80044c0:	2310      	movs	r3, #16
 80044c2:	e7af      	b.n	8004424 <_printf_i+0xfc>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	f043 0320 	orr.w	r3, r3, #32
 80044ca:	6023      	str	r3, [r4, #0]
 80044cc:	2378      	movs	r3, #120	; 0x78
 80044ce:	4828      	ldr	r0, [pc, #160]	; (8004570 <_printf_i+0x248>)
 80044d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044d4:	e7e3      	b.n	800449e <_printf_i+0x176>
 80044d6:	065e      	lsls	r6, r3, #25
 80044d8:	bf48      	it	mi
 80044da:	b2ad      	uxthmi	r5, r5
 80044dc:	e7e6      	b.n	80044ac <_printf_i+0x184>
 80044de:	4616      	mov	r6, r2
 80044e0:	e7bb      	b.n	800445a <_printf_i+0x132>
 80044e2:	680b      	ldr	r3, [r1, #0]
 80044e4:	6826      	ldr	r6, [r4, #0]
 80044e6:	1d1d      	adds	r5, r3, #4
 80044e8:	6960      	ldr	r0, [r4, #20]
 80044ea:	600d      	str	r5, [r1, #0]
 80044ec:	0635      	lsls	r5, r6, #24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	d501      	bpl.n	80044f6 <_printf_i+0x1ce>
 80044f2:	6018      	str	r0, [r3, #0]
 80044f4:	e002      	b.n	80044fc <_printf_i+0x1d4>
 80044f6:	0671      	lsls	r1, r6, #25
 80044f8:	d5fb      	bpl.n	80044f2 <_printf_i+0x1ca>
 80044fa:	8018      	strh	r0, [r3, #0]
 80044fc:	2300      	movs	r3, #0
 80044fe:	4616      	mov	r6, r2
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	e7ba      	b.n	800447a <_printf_i+0x152>
 8004504:	680b      	ldr	r3, [r1, #0]
 8004506:	1d1a      	adds	r2, r3, #4
 8004508:	600a      	str	r2, [r1, #0]
 800450a:	681e      	ldr	r6, [r3, #0]
 800450c:	2100      	movs	r1, #0
 800450e:	4630      	mov	r0, r6
 8004510:	6862      	ldr	r2, [r4, #4]
 8004512:	f000 f82f 	bl	8004574 <memchr>
 8004516:	b108      	cbz	r0, 800451c <_printf_i+0x1f4>
 8004518:	1b80      	subs	r0, r0, r6
 800451a:	6060      	str	r0, [r4, #4]
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	6123      	str	r3, [r4, #16]
 8004520:	2300      	movs	r3, #0
 8004522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004526:	e7a8      	b.n	800447a <_printf_i+0x152>
 8004528:	4632      	mov	r2, r6
 800452a:	4649      	mov	r1, r9
 800452c:	4640      	mov	r0, r8
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	47d0      	blx	sl
 8004532:	3001      	adds	r0, #1
 8004534:	d0ab      	beq.n	800448e <_printf_i+0x166>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	079b      	lsls	r3, r3, #30
 800453a:	d413      	bmi.n	8004564 <_printf_i+0x23c>
 800453c:	68e0      	ldr	r0, [r4, #12]
 800453e:	9b03      	ldr	r3, [sp, #12]
 8004540:	4298      	cmp	r0, r3
 8004542:	bfb8      	it	lt
 8004544:	4618      	movlt	r0, r3
 8004546:	e7a4      	b.n	8004492 <_printf_i+0x16a>
 8004548:	2301      	movs	r3, #1
 800454a:	4632      	mov	r2, r6
 800454c:	4649      	mov	r1, r9
 800454e:	4640      	mov	r0, r8
 8004550:	47d0      	blx	sl
 8004552:	3001      	adds	r0, #1
 8004554:	d09b      	beq.n	800448e <_printf_i+0x166>
 8004556:	3501      	adds	r5, #1
 8004558:	68e3      	ldr	r3, [r4, #12]
 800455a:	9903      	ldr	r1, [sp, #12]
 800455c:	1a5b      	subs	r3, r3, r1
 800455e:	42ab      	cmp	r3, r5
 8004560:	dcf2      	bgt.n	8004548 <_printf_i+0x220>
 8004562:	e7eb      	b.n	800453c <_printf_i+0x214>
 8004564:	2500      	movs	r5, #0
 8004566:	f104 0619 	add.w	r6, r4, #25
 800456a:	e7f5      	b.n	8004558 <_printf_i+0x230>
 800456c:	08004825 	.word	0x08004825
 8004570:	08004836 	.word	0x08004836

08004574 <memchr>:
 8004574:	4603      	mov	r3, r0
 8004576:	b510      	push	{r4, lr}
 8004578:	b2c9      	uxtb	r1, r1
 800457a:	4402      	add	r2, r0
 800457c:	4293      	cmp	r3, r2
 800457e:	4618      	mov	r0, r3
 8004580:	d101      	bne.n	8004586 <memchr+0x12>
 8004582:	2000      	movs	r0, #0
 8004584:	e003      	b.n	800458e <memchr+0x1a>
 8004586:	7804      	ldrb	r4, [r0, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	428c      	cmp	r4, r1
 800458c:	d1f6      	bne.n	800457c <memchr+0x8>
 800458e:	bd10      	pop	{r4, pc}

08004590 <memcpy>:
 8004590:	440a      	add	r2, r1
 8004592:	4291      	cmp	r1, r2
 8004594:	f100 33ff 	add.w	r3, r0, #4294967295
 8004598:	d100      	bne.n	800459c <memcpy+0xc>
 800459a:	4770      	bx	lr
 800459c:	b510      	push	{r4, lr}
 800459e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045a2:	4291      	cmp	r1, r2
 80045a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045a8:	d1f9      	bne.n	800459e <memcpy+0xe>
 80045aa:	bd10      	pop	{r4, pc}

080045ac <memmove>:
 80045ac:	4288      	cmp	r0, r1
 80045ae:	b510      	push	{r4, lr}
 80045b0:	eb01 0402 	add.w	r4, r1, r2
 80045b4:	d902      	bls.n	80045bc <memmove+0x10>
 80045b6:	4284      	cmp	r4, r0
 80045b8:	4623      	mov	r3, r4
 80045ba:	d807      	bhi.n	80045cc <memmove+0x20>
 80045bc:	1e43      	subs	r3, r0, #1
 80045be:	42a1      	cmp	r1, r4
 80045c0:	d008      	beq.n	80045d4 <memmove+0x28>
 80045c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045ca:	e7f8      	b.n	80045be <memmove+0x12>
 80045cc:	4601      	mov	r1, r0
 80045ce:	4402      	add	r2, r0
 80045d0:	428a      	cmp	r2, r1
 80045d2:	d100      	bne.n	80045d6 <memmove+0x2a>
 80045d4:	bd10      	pop	{r4, pc}
 80045d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045de:	e7f7      	b.n	80045d0 <memmove+0x24>

080045e0 <_free_r>:
 80045e0:	b538      	push	{r3, r4, r5, lr}
 80045e2:	4605      	mov	r5, r0
 80045e4:	2900      	cmp	r1, #0
 80045e6:	d043      	beq.n	8004670 <_free_r+0x90>
 80045e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ec:	1f0c      	subs	r4, r1, #4
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	bfb8      	it	lt
 80045f2:	18e4      	addlt	r4, r4, r3
 80045f4:	f000 f8d0 	bl	8004798 <__malloc_lock>
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <_free_r+0x94>)
 80045fa:	6813      	ldr	r3, [r2, #0]
 80045fc:	4610      	mov	r0, r2
 80045fe:	b933      	cbnz	r3, 800460e <_free_r+0x2e>
 8004600:	6063      	str	r3, [r4, #4]
 8004602:	6014      	str	r4, [r2, #0]
 8004604:	4628      	mov	r0, r5
 8004606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800460a:	f000 b8cb 	b.w	80047a4 <__malloc_unlock>
 800460e:	42a3      	cmp	r3, r4
 8004610:	d90a      	bls.n	8004628 <_free_r+0x48>
 8004612:	6821      	ldr	r1, [r4, #0]
 8004614:	1862      	adds	r2, r4, r1
 8004616:	4293      	cmp	r3, r2
 8004618:	bf01      	itttt	eq
 800461a:	681a      	ldreq	r2, [r3, #0]
 800461c:	685b      	ldreq	r3, [r3, #4]
 800461e:	1852      	addeq	r2, r2, r1
 8004620:	6022      	streq	r2, [r4, #0]
 8004622:	6063      	str	r3, [r4, #4]
 8004624:	6004      	str	r4, [r0, #0]
 8004626:	e7ed      	b.n	8004604 <_free_r+0x24>
 8004628:	461a      	mov	r2, r3
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	b10b      	cbz	r3, 8004632 <_free_r+0x52>
 800462e:	42a3      	cmp	r3, r4
 8004630:	d9fa      	bls.n	8004628 <_free_r+0x48>
 8004632:	6811      	ldr	r1, [r2, #0]
 8004634:	1850      	adds	r0, r2, r1
 8004636:	42a0      	cmp	r0, r4
 8004638:	d10b      	bne.n	8004652 <_free_r+0x72>
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	4401      	add	r1, r0
 800463e:	1850      	adds	r0, r2, r1
 8004640:	4283      	cmp	r3, r0
 8004642:	6011      	str	r1, [r2, #0]
 8004644:	d1de      	bne.n	8004604 <_free_r+0x24>
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4401      	add	r1, r0
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	6053      	str	r3, [r2, #4]
 8004650:	e7d8      	b.n	8004604 <_free_r+0x24>
 8004652:	d902      	bls.n	800465a <_free_r+0x7a>
 8004654:	230c      	movs	r3, #12
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	e7d4      	b.n	8004604 <_free_r+0x24>
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	1821      	adds	r1, r4, r0
 800465e:	428b      	cmp	r3, r1
 8004660:	bf01      	itttt	eq
 8004662:	6819      	ldreq	r1, [r3, #0]
 8004664:	685b      	ldreq	r3, [r3, #4]
 8004666:	1809      	addeq	r1, r1, r0
 8004668:	6021      	streq	r1, [r4, #0]
 800466a:	6063      	str	r3, [r4, #4]
 800466c:	6054      	str	r4, [r2, #4]
 800466e:	e7c9      	b.n	8004604 <_free_r+0x24>
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	20000098 	.word	0x20000098

08004678 <_malloc_r>:
 8004678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467a:	1ccd      	adds	r5, r1, #3
 800467c:	f025 0503 	bic.w	r5, r5, #3
 8004680:	3508      	adds	r5, #8
 8004682:	2d0c      	cmp	r5, #12
 8004684:	bf38      	it	cc
 8004686:	250c      	movcc	r5, #12
 8004688:	2d00      	cmp	r5, #0
 800468a:	4606      	mov	r6, r0
 800468c:	db01      	blt.n	8004692 <_malloc_r+0x1a>
 800468e:	42a9      	cmp	r1, r5
 8004690:	d903      	bls.n	800469a <_malloc_r+0x22>
 8004692:	230c      	movs	r3, #12
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	2000      	movs	r0, #0
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469a:	f000 f87d 	bl	8004798 <__malloc_lock>
 800469e:	4921      	ldr	r1, [pc, #132]	; (8004724 <_malloc_r+0xac>)
 80046a0:	680a      	ldr	r2, [r1, #0]
 80046a2:	4614      	mov	r4, r2
 80046a4:	b99c      	cbnz	r4, 80046ce <_malloc_r+0x56>
 80046a6:	4f20      	ldr	r7, [pc, #128]	; (8004728 <_malloc_r+0xb0>)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b923      	cbnz	r3, 80046b6 <_malloc_r+0x3e>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4630      	mov	r0, r6
 80046b0:	f000 f862 	bl	8004778 <_sbrk_r>
 80046b4:	6038      	str	r0, [r7, #0]
 80046b6:	4629      	mov	r1, r5
 80046b8:	4630      	mov	r0, r6
 80046ba:	f000 f85d 	bl	8004778 <_sbrk_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	d123      	bne.n	800470a <_malloc_r+0x92>
 80046c2:	230c      	movs	r3, #12
 80046c4:	4630      	mov	r0, r6
 80046c6:	6033      	str	r3, [r6, #0]
 80046c8:	f000 f86c 	bl	80047a4 <__malloc_unlock>
 80046cc:	e7e3      	b.n	8004696 <_malloc_r+0x1e>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	1b5b      	subs	r3, r3, r5
 80046d2:	d417      	bmi.n	8004704 <_malloc_r+0x8c>
 80046d4:	2b0b      	cmp	r3, #11
 80046d6:	d903      	bls.n	80046e0 <_malloc_r+0x68>
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	441c      	add	r4, r3
 80046dc:	6025      	str	r5, [r4, #0]
 80046de:	e004      	b.n	80046ea <_malloc_r+0x72>
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	42a2      	cmp	r2, r4
 80046e4:	bf0c      	ite	eq
 80046e6:	600b      	streq	r3, [r1, #0]
 80046e8:	6053      	strne	r3, [r2, #4]
 80046ea:	4630      	mov	r0, r6
 80046ec:	f000 f85a 	bl	80047a4 <__malloc_unlock>
 80046f0:	f104 000b 	add.w	r0, r4, #11
 80046f4:	1d23      	adds	r3, r4, #4
 80046f6:	f020 0007 	bic.w	r0, r0, #7
 80046fa:	1ac2      	subs	r2, r0, r3
 80046fc:	d0cc      	beq.n	8004698 <_malloc_r+0x20>
 80046fe:	1a1b      	subs	r3, r3, r0
 8004700:	50a3      	str	r3, [r4, r2]
 8004702:	e7c9      	b.n	8004698 <_malloc_r+0x20>
 8004704:	4622      	mov	r2, r4
 8004706:	6864      	ldr	r4, [r4, #4]
 8004708:	e7cc      	b.n	80046a4 <_malloc_r+0x2c>
 800470a:	1cc4      	adds	r4, r0, #3
 800470c:	f024 0403 	bic.w	r4, r4, #3
 8004710:	42a0      	cmp	r0, r4
 8004712:	d0e3      	beq.n	80046dc <_malloc_r+0x64>
 8004714:	1a21      	subs	r1, r4, r0
 8004716:	4630      	mov	r0, r6
 8004718:	f000 f82e 	bl	8004778 <_sbrk_r>
 800471c:	3001      	adds	r0, #1
 800471e:	d1dd      	bne.n	80046dc <_malloc_r+0x64>
 8004720:	e7cf      	b.n	80046c2 <_malloc_r+0x4a>
 8004722:	bf00      	nop
 8004724:	20000098 	.word	0x20000098
 8004728:	2000009c 	.word	0x2000009c

0800472c <_realloc_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	4607      	mov	r7, r0
 8004730:	4614      	mov	r4, r2
 8004732:	460e      	mov	r6, r1
 8004734:	b921      	cbnz	r1, 8004740 <_realloc_r+0x14>
 8004736:	4611      	mov	r1, r2
 8004738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800473c:	f7ff bf9c 	b.w	8004678 <_malloc_r>
 8004740:	b922      	cbnz	r2, 800474c <_realloc_r+0x20>
 8004742:	f7ff ff4d 	bl	80045e0 <_free_r>
 8004746:	4625      	mov	r5, r4
 8004748:	4628      	mov	r0, r5
 800474a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474c:	f000 f830 	bl	80047b0 <_malloc_usable_size_r>
 8004750:	42a0      	cmp	r0, r4
 8004752:	d20f      	bcs.n	8004774 <_realloc_r+0x48>
 8004754:	4621      	mov	r1, r4
 8004756:	4638      	mov	r0, r7
 8004758:	f7ff ff8e 	bl	8004678 <_malloc_r>
 800475c:	4605      	mov	r5, r0
 800475e:	2800      	cmp	r0, #0
 8004760:	d0f2      	beq.n	8004748 <_realloc_r+0x1c>
 8004762:	4631      	mov	r1, r6
 8004764:	4622      	mov	r2, r4
 8004766:	f7ff ff13 	bl	8004590 <memcpy>
 800476a:	4631      	mov	r1, r6
 800476c:	4638      	mov	r0, r7
 800476e:	f7ff ff37 	bl	80045e0 <_free_r>
 8004772:	e7e9      	b.n	8004748 <_realloc_r+0x1c>
 8004774:	4635      	mov	r5, r6
 8004776:	e7e7      	b.n	8004748 <_realloc_r+0x1c>

08004778 <_sbrk_r>:
 8004778:	b538      	push	{r3, r4, r5, lr}
 800477a:	2300      	movs	r3, #0
 800477c:	4d05      	ldr	r5, [pc, #20]	; (8004794 <_sbrk_r+0x1c>)
 800477e:	4604      	mov	r4, r0
 8004780:	4608      	mov	r0, r1
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	f7fc f8d2 	bl	800092c <_sbrk>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	d102      	bne.n	8004792 <_sbrk_r+0x1a>
 800478c:	682b      	ldr	r3, [r5, #0]
 800478e:	b103      	cbz	r3, 8004792 <_sbrk_r+0x1a>
 8004790:	6023      	str	r3, [r4, #0]
 8004792:	bd38      	pop	{r3, r4, r5, pc}
 8004794:	2000023c 	.word	0x2000023c

08004798 <__malloc_lock>:
 8004798:	4801      	ldr	r0, [pc, #4]	; (80047a0 <__malloc_lock+0x8>)
 800479a:	f000 b811 	b.w	80047c0 <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	20000244 	.word	0x20000244

080047a4 <__malloc_unlock>:
 80047a4:	4801      	ldr	r0, [pc, #4]	; (80047ac <__malloc_unlock+0x8>)
 80047a6:	f000 b80c 	b.w	80047c2 <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	20000244 	.word	0x20000244

080047b0 <_malloc_usable_size_r>:
 80047b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b4:	1f18      	subs	r0, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bfbc      	itt	lt
 80047ba:	580b      	ldrlt	r3, [r1, r0]
 80047bc:	18c0      	addlt	r0, r0, r3
 80047be:	4770      	bx	lr

080047c0 <__retarget_lock_acquire_recursive>:
 80047c0:	4770      	bx	lr

080047c2 <__retarget_lock_release_recursive>:
 80047c2:	4770      	bx	lr

080047c4 <_init>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	bf00      	nop
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr

080047d0 <_fini>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	bf00      	nop
 80047d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d6:	bc08      	pop	{r3}
 80047d8:	469e      	mov	lr, r3
 80047da:	4770      	bx	lr
