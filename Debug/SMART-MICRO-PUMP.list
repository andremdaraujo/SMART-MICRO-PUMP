
SMART-MICRO-PUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a9c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bfc  08003bfc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bfc  08003bfc  00013bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c04  08003c04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c04  08003c04  00013c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08003c18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003c18  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e302  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002427  00000000  00000000  0002e337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  000313c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d25  00000000  00000000  00031f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e687  00000000  00000000  00047c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083e10  00000000  00000000  000562cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da0dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003208  00000000  00000000  000da130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003bc0 	.word	0x08003bc0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08003bc0 	.word	0x08003bc0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000484:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_ADC_Init+0xa8>)
 8000486:	4a26      	ldr	r2, [pc, #152]	; (8000520 <MX_ADC_Init+0xac>)
 8000488:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800048a:	4b24      	ldr	r3, [pc, #144]	; (800051c <MX_ADC_Init+0xa8>)
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000490:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_ADC_Init+0xa8>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <MX_ADC_Init+0xa8>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800049c:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_ADC_Init+0xa8>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004a2:	4b1e      	ldr	r3, [pc, #120]	; (800051c <MX_ADC_Init+0xa8>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <MX_ADC_Init+0xa8>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	; (800051c <MX_ADC_Init+0xa8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004b4:	4b19      	ldr	r3, [pc, #100]	; (800051c <MX_ADC_Init+0xa8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <MX_ADC_Init+0xa8>)
 80004bc:	2200      	movs	r2, #0
 80004be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <MX_ADC_Init+0xa8>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <MX_ADC_Init+0xa8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <MX_ADC_Init+0xa8>)
 80004d2:	2210      	movs	r2, #16
 80004d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <MX_ADC_Init+0xa8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <MX_ADC_Init+0xa8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <MX_ADC_Init+0xa8>)
 80004e6:	f000 fcc7 	bl	8000e78 <HAL_ADC_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80004f0:	f000 f968 	bl	80007c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80004f4:	2305      	movs	r3, #5
 80004f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000500:	1d3b      	adds	r3, r7, #4
 8000502:	4619      	mov	r1, r3
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <MX_ADC_Init+0xa8>)
 8000506:	f000 fdfd 	bl	8001104 <HAL_ADC_ConfigChannel>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000510:	f000 f958 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	3710      	adds	r7, #16
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000030 	.word	0x20000030
 8000520:	40012400 	.word	0x40012400

08000524 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	; 0x28
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a15      	ldr	r2, [pc, #84]	; (8000598 <HAL_ADC_MspInit+0x74>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d123      	bne.n	800058e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000546:	4b15      	ldr	r3, [pc, #84]	; (800059c <HAL_ADC_MspInit+0x78>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	4a14      	ldr	r2, [pc, #80]	; (800059c <HAL_ADC_MspInit+0x78>)
 800054c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000550:	6213      	str	r3, [r2, #32]
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_ADC_MspInit+0x78>)
 8000554:	6a1b      	ldr	r3, [r3, #32]
 8000556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	; (800059c <HAL_ADC_MspInit+0x78>)
 8000560:	69db      	ldr	r3, [r3, #28]
 8000562:	4a0e      	ldr	r2, [pc, #56]	; (800059c <HAL_ADC_MspInit+0x78>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	61d3      	str	r3, [r2, #28]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <HAL_ADC_MspInit+0x78>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin|ADC_FLOW_Pin|ADC_TRIMPOT_Pin;
 8000576:	2338      	movs	r3, #56	; 0x38
 8000578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800057a:	2303      	movs	r3, #3
 800057c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	4619      	mov	r1, r3
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <HAL_ADC_MspInit+0x7c>)
 800058a:	f001 f897 	bl	80016bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	; 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40012400 	.word	0x40012400
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020000 	.word	0x40020000

080005a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <MX_GPIO_Init+0xa0>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a21      	ldr	r2, [pc, #132]	; (8000644 <MX_GPIO_Init+0xa0>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_GPIO_Init+0xa0>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_GPIO_Init+0xa0>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <MX_GPIO_Init+0xa0>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_GPIO_Init+0xa0>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 0302 	and.w	r3, r3, #2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4816      	ldr	r0, [pc, #88]	; (8000648 <MX_GPIO_Init+0xa4>)
 80005f0:	f001 f9fb 	bl	80019ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 80005f4:	2301      	movs	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005f8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4619      	mov	r1, r3
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <MX_GPIO_Init+0xa8>)
 800060a:	f001 f857 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 030c 	add.w	r3, r7, #12
 8000622:	4619      	mov	r1, r3
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <MX_GPIO_Init+0xa4>)
 8000626:	f001 f849 	bl	80016bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2006      	movs	r0, #6
 8000630:	f000 ff8f 	bl	8001552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000634:	2006      	movs	r0, #6
 8000636:	f000 ffa8 	bl	800158a <HAL_NVIC_EnableIRQ>

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40020400 	.word	0x40020400
 800064c:	40020000 	.word	0x40020000

08000650 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_USER_Pin)		// When edge is detected,
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d102      	bne.n	8000666 <HAL_GPIO_EXTI_Callback+0x16>
	{									//	Timer 6 starts, for button debounce
		//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 1);
		HAL_TIM_Base_Start_IT(&htim6);
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <HAL_GPIO_EXTI_Callback+0x20>)
 8000662:	f001 ffe7 	bl	8002634 <HAL_TIM_Base_Start_IT>
	}
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000c4 	.word	0x200000c4

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
//	uint32_t* heap_pointer;
//
//	volatile uint32_t uninit_var;
//	volatile uint32_t init_var = 0xCC55;

	enum op_mode mode = manual_mode;
 800067a:	2300      	movs	r3, #0
 800067c:	71fb      	strb	r3, [r7, #7]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800067e:	f000 fb8c 	bl	8000d9a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000682:	f000 f851 	bl	8000728 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000686:	f7ff ff8d 	bl	80005a4 <MX_GPIO_Init>
	MX_ADC_Init();
 800068a:	f7ff fef3 	bl	8000474 <MX_ADC_Init>
	MX_TIM4_Init();
 800068e:	f000 f91f 	bl	80008d0 <MX_TIM4_Init>
	MX_TIM6_Init();
 8000692:	f000 f98f 	bl	80009b4 <MX_TIM6_Init>
	MX_TIM7_Init();
 8000696:	f000 f9c3 	bl	8000a20 <MX_TIM7_Init>
	MX_USART1_UART_Init();
 800069a:	f000 fae3 	bl	8000c64 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Timer 4 for PWM generation
 800069e:	2100      	movs	r1, #0
 80006a0:	481b      	ldr	r0, [pc, #108]	; (8000710 <main+0x9c>)
 80006a2:	f002 f887 	bl	80027b4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim7);				// Timer 7 for sampling period
 80006a6:	481b      	ldr	r0, [pc, #108]	; (8000714 <main+0xa0>)
 80006a8:	f001 ffc4 	bl	8002634 <HAL_TIM_Base_Start_IT>

    /* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		//HAL_Delay(500);

		if (debouncedButtonPressed != 0)	// User button selects between
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <main+0xa4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d017      	beq.n	80006e6 <main+0x72>
		{									// Manual and Auto modes
			if (mode == manual_mode)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d107      	bne.n	80006cc <main+0x58>
			{
				mode = auto_mode;
 80006bc:	2301      	movs	r3, #1
 80006be:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4815      	ldr	r0, [pc, #84]	; (800071c <main+0xa8>)
 80006c6:	f001 f990 	bl	80019ea <HAL_GPIO_WritePin>
 80006ca:	e009      	b.n	80006e0 <main+0x6c>
			}
			else if (mode == auto_mode)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d106      	bne.n	80006e0 <main+0x6c>
			{
				mode = manual_mode;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2180      	movs	r1, #128	; 0x80
 80006da:	4810      	ldr	r0, [pc, #64]	; (800071c <main+0xa8>)
 80006dc:	f001 f985 	bl	80019ea <HAL_GPIO_WritePin>
			}
			debouncedButtonPressed = 0;
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <main+0xa4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
		}

		if (debouncedButtonReleased != 0)	// Interrupts are also generated when
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <main+0xac>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <main+0x82>
		{									// button is released
			debouncedButtonReleased = 0;
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <main+0xac>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
		}

		if (flag_dt != 0)	// Sampling time (dt) = 10ms (fS = 100 Hz)
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <main+0xb0>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0d5      	beq.n	80006ac <main+0x38>
		{					// according to Timer 7 interrupts
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);	// Toggle Green LED
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <main+0xa8>)
 8000704:	f001 f989 	bl	8001a1a <HAL_GPIO_TogglePin>
			flag_dt = 0;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <main+0xb0>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
		if (debouncedButtonPressed != 0)	// User button selects between
 800070e:	e7cd      	b.n	80006ac <main+0x38>
 8000710:	20000084 	.word	0x20000084
 8000714:	20000104 	.word	0x20000104
 8000718:	2000002b 	.word	0x2000002b
 800071c:	40020400 	.word	0x40020400
 8000720:	2000002c 	.word	0x2000002c
 8000724:	2000002d 	.word	0x2000002d

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b092      	sub	sp, #72	; 0x48
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fa3a 	bl	8003bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	463b      	mov	r3, r7
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <SystemClock_Config+0x98>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000752:	4a1b      	ldr	r2, [pc, #108]	; (80007c0 <SystemClock_Config+0x98>)
 8000754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000758:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000762:	2310      	movs	r3, #16
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076a:	2300      	movs	r3, #0
 800076c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800076e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000774:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000778:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f97c 	bl	8001a7c <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800078a:	f000 f81b 	bl	80007c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2303      	movs	r3, #3
 8000794:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	2101      	movs	r1, #1
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 fc98 	bl	80020dc <HAL_RCC_ClockConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007b2:	f000 f807 	bl	80007c4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	3748      	adds	r7, #72	; 0x48
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40007000 	.word	0x40007000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	; (8000828 <HAL_MspInit+0x58>)
 80007d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007da:	4a13      	ldr	r2, [pc, #76]	; (8000828 <HAL_MspInit+0x58>)
 80007dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e0:	6253      	str	r3, [r2, #36]	; 0x24
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <HAL_MspInit+0x58>)
 80007e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_MspInit+0x58>)
 80007f0:	6a1b      	ldr	r3, [r3, #32]
 80007f2:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <HAL_MspInit+0x58>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6213      	str	r3, [r2, #32]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <HAL_MspInit+0x58>)
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x58>)
 8000808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_MspInit+0x58>)
 800080c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000810:	6253      	str	r3, [r2, #36]	; 0x24
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_MspInit+0x58>)
 8000814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800

0800082c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <NMI_Handler+0x4>

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000872:	f000 fae5 	bl	8000e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}

0800087a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_Pin);
 800087e:	2001      	movs	r0, #1
 8000880:	f001 f8e4 	bl	8001a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <USART1_IRQHandler+0x10>)
 800088e:	f002 fd67 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000144 	.word	0x20000144

0800089c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <TIM6_IRQHandler+0x10>)
 80008a2:	f002 f81d 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200000c4 	.word	0x200000c4

080008b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80008b4:	4802      	ldr	r0, [pc, #8]	; (80008c0 <TIM7_IRQHandler+0x10>)
 80008b6:	f002 f813 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000104 	.word	0x20000104

080008c4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr

080008d0 <MX_TIM4_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	f107 0318 	add.w	r3, r7, #24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008fa:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <MX_TIM4_Init+0xdc>)
 80008fc:	4a2c      	ldr	r2, [pc, #176]	; (80009b0 <MX_TIM4_Init+0xe0>)
 80008fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (32 - 1);
 8000900:	4b2a      	ldr	r3, [pc, #168]	; (80009ac <MX_TIM4_Init+0xdc>)
 8000902:	221f      	movs	r2, #31
 8000904:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_TIM4_Init+0xdc>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (100 - 1);
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <MX_TIM4_Init+0xdc>)
 800090e:	2263      	movs	r2, #99	; 0x63
 8000910:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_TIM4_Init+0xdc>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <MX_TIM4_Init+0xdc>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800091e:	4823      	ldr	r0, [pc, #140]	; (80009ac <MX_TIM4_Init+0xdc>)
 8000920:	f001 fe48 	bl	80025b4 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM4_Init+0x5e>
  {
    Error_Handler();
 800092a:	f7ff ff4b 	bl	80007c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000934:	f107 0318 	add.w	r3, r7, #24
 8000938:	4619      	mov	r1, r3
 800093a:	481c      	ldr	r0, [pc, #112]	; (80009ac <MX_TIM4_Init+0xdc>)
 800093c:	f002 f96a 	bl	8002c14 <HAL_TIM_ConfigClockSource>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000946:	f7ff ff3d 	bl	80007c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_TIM4_Init+0xdc>)
 800094c:	f001 feea 	bl	8002724 <HAL_TIM_PWM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000956:	f7ff ff35 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_TIM4_Init+0xdc>)
 800096a:	f002 fc4d 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM4_Init+0xa8>
  {
    Error_Handler();
 8000974:	f7ff ff26 	bl	80007c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000978:	2360      	movs	r3, #96	; 0x60
 800097a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	4619      	mov	r1, r3
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM4_Init+0xdc>)
 8000990:	f002 f882 	bl	8002a98 <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM4_Init+0xce>
  {
    Error_Handler();
 800099a:	f7ff ff13 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM4_Init+0xdc>)
 80009a0:	f000 f8ca 	bl	8000b38 <HAL_TIM_MspPostInit>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000084 	.word	0x20000084
 80009b0:	40000800 	.word	0x40000800

080009b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009c2:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_TIM6_Init+0x64>)
 80009c4:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_TIM6_Init+0x68>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (32 - 1);
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_TIM6_Init+0x64>)
 80009ca:	221f      	movs	r2, #31
 80009cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_TIM6_Init+0x64>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (1000 - 1);
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_TIM6_Init+0x64>)
 80009d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_TIM6_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009e2:	480d      	ldr	r0, [pc, #52]	; (8000a18 <MX_TIM6_Init+0x64>)
 80009e4:	f001 fde6 	bl	80025b4 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80009ee:	f7ff fee9 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	4619      	mov	r1, r3
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_TIM6_Init+0x64>)
 8000a00:	f002 fc02 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000a0a:	f7ff fedb 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000c4 	.word	0x200000c4
 8000a1c:	40001000 	.word	0x40001000

08000a20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a30:	4a15      	ldr	r2, [pc, #84]	; (8000a88 <MX_TIM7_Init+0x68>)
 8000a32:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (32 -1);
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a36:	221f      	movs	r2, #31
 8000a38:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (10000 - 1);
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a42:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a46:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a50:	f001 fdb0 	bl	80025b4 <HAL_TIM_Base_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000a5a:	f7ff feb3 	bl	80007c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_TIM7_Init+0x64>)
 8000a6c:	f002 fbcc 	bl	8003208 <HAL_TIMEx_MasterConfigSynchronization>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000a76:	f7ff fea5 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000104 	.word	0x20000104
 8000a88:	40001400 	.word	0x40001400

08000a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <HAL_TIM_Base_MspInit+0x9c>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d10c      	bne.n	8000ab8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa2:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6253      	str	r3, [r2, #36]	; 0x24
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000ab6:	e032      	b.n	8000b1e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <HAL_TIM_Base_MspInit+0xa4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d114      	bne.n	8000aec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	6253      	str	r3, [r2, #36]	; 0x24
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	202b      	movs	r0, #43	; 0x2b
 8000ae0:	f000 fd37 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ae4:	202b      	movs	r0, #43	; 0x2b
 8000ae6:	f000 fd50 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 8000aea:	e018      	b.n	8000b1e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_TIM_Base_MspInit+0xa8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d113      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	4a0c      	ldr	r2, [pc, #48]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	6253      	str	r3, [r2, #36]	; 0x24
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <HAL_TIM_Base_MspInit+0xa0>)
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	f003 0320 	and.w	r3, r3, #32
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	202c      	movs	r0, #44	; 0x2c
 8000b14:	f000 fd1d 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000b18:	202c      	movs	r0, #44	; 0x2c
 8000b1a:	f000 fd36 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40000800 	.word	0x40000800
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40001000 	.word	0x40001000
 8000b34:	40001400 	.word	0x40001400

08000b38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a11      	ldr	r2, [pc, #68]	; (8000b9c <HAL_TIM_MspPostInit+0x64>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d11b      	bne.n	8000b92 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_TIM_MspPostInit+0x68>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_TIM_MspPostInit+0x68>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	61d3      	str	r3, [r2, #28]
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_TIM_MspPostInit+0x68>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_PUMP_Pin;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PUMP_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_TIM_MspPostInit+0x6c>)
 8000b8e:	f000 fd95 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3720      	adds	r7, #32
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40000800 	.word	0x40000800
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400

08000ba8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)	// Timed debounce routine:
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d137      	bne.n	8000c28 <HAL_TIM_PeriodElapsedCallback+0x80>
	{					//	After first edge is detected, accumulate
						// 	DEBOUNCE_STABLE_PERIOD equal samples and
						// 	finally set PRESSED or RELEASED flag and
						//	disables this counter until next edge occurs
		previousButton = currentButton;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bc0:	701a      	strb	r2, [r3, #0]
		currentButton  = HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000bc6:	f000 fef9 	bl	80019bc <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bd0:	701a      	strb	r2, [r3, #0]

		if (currentButton == previousButton)	// Increments counter if stable
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d107      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			debounceCounter++;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	3301      	adds	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bee:	701a      	strb	r2, [r3, #0]
 8000bf0:	e002      	b.n	8000bf8 <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else									// Resets counter if bounce occurs
		{
			debounceCounter = 0;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
		}

		if (debounceCounter >= DEBOUNCE_STABLE_PERIOD)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b09      	cmp	r3, #9
 8000c00:	d919      	bls.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{	// Debounce finished
			HAL_TIM_Base_Stop_IT(&htim6);
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c04:	f001 fd68 	bl	80026d8 <HAL_TIM_Base_Stop_IT>
			debounceCounter = 0;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]

			if (currentButton == 1)			// Active HIGH: Button Pressed == 1
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d103      	bne.n	8000c20 <HAL_TIM_PeriodElapsedCallback+0x78>
			{
				debouncedButtonPressed = 1;
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	701a      	strb	r2, [r3, #0]
	}
	else if (htim == &htim7)	//
	{	// Sampling period (dt) has passed
		flag_dt = 1;
	}
}
 8000c1e:	e00a      	b.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x8e>
				debouncedButtonReleased = 1;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
}
 8000c26:	e006      	b.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x8e>
	else if (htim == &htim7)	//
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d102      	bne.n	8000c36 <HAL_TIM_PeriodElapsedCallback+0x8e>
		flag_dt = 1;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000c4 	.word	0x200000c4
 8000c44:	20000028 	.word	0x20000028
 8000c48:	20000029 	.word	0x20000029
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	2000002a 	.word	0x2000002a
 8000c54:	2000002b 	.word	0x2000002b
 8000c58:	2000002c 	.word	0x2000002c
 8000c5c:	20000104 	.word	0x20000104
 8000c60:	2000002d 	.word	0x2000002d

08000c64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <MX_USART1_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	f002 fb12 	bl	80032c4 <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f7ff fd8d 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000144 	.word	0x20000144
 8000cb4:	40013800 	.word	0x40013800

08000cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0x8c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d130      	bne.n	8000d3c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cdc:	6a1b      	ldr	r3, [r3, #32]
 8000cde:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce4:	6213      	str	r3, [r2, #32]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cf4:	69db      	ldr	r3, [r3, #28]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	61d3      	str	r3, [r2, #28]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_UART_MspInit+0x90>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <HAL_UART_MspInit+0x94>)
 8000d28:	f000 fcc8 	bl	80016bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2025      	movs	r0, #37	; 0x25
 8000d32:	f000 fc0e 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d36:	2025      	movs	r0, #37	; 0x25
 8000d38:	f000 fc27 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40013800 	.word	0x40013800
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d76:	f7ff fda5 	bl	80008c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f002 fef5 	bl	8003b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fc79 	bl	8000674 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d8c:	08003c0c 	.word	0x08003c0c
  ldr r2, =_sbss
 8000d90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d94:	2000018c 	.word	0x2000018c

08000d98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_IRQHandler>

08000d9a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 fbc9 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f80e 	bl	8000dcc <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d002      	beq.n	8000dbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	71fb      	strb	r3, [r7, #7]
 8000dba:	e001      	b.n	8000dc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dbc:	f7ff fd08 	bl	80007d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_InitTick+0x68>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d022      	beq.n	8000e26 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <HAL_InitTick+0x6c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_InitTick+0x68>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fbd6 	bl	80015a6 <HAL_SYSTICK_Config>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10f      	bne.n	8000e20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	d809      	bhi.n	8000e1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	2200      	movs	r2, #0
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0e:	f000 fba0 	bl	8001552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_InitTick+0x70>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e004      	b.n	8000e2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e001      	b.n	8000e2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000004 	.word	0x20000004

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x1c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_IncTick+0x20>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <HAL_IncTick+0x1c>)
 8000e50:	6013      	str	r3, [r2, #0]
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000188 	.word	0x20000188
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <HAL_GetTick+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000188 	.word	0x20000188

08000e78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e127      	b.n	80010e8 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d115      	bne.n	8000ed2 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b8e      	ldr	r3, [pc, #568]	; (80010f0 <HAL_ADC_Init+0x278>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a8d      	ldr	r2, [pc, #564]	; (80010f0 <HAL_ADC_Init+0x278>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	4b8b      	ldr	r3, [pc, #556]	; (80010f0 <HAL_ADC_Init+0x278>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fb29 	bl	8000524 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0310 	and.w	r3, r3, #16
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 80ff 	bne.w	80010de <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ee8:	f023 0302 	bic.w	r3, r3, #2
 8000eec:	f043 0202 	orr.w	r2, r3, #2
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000ef4:	4b7f      	ldr	r3, [pc, #508]	; (80010f4 <HAL_ADC_Init+0x27c>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	497c      	ldr	r1, [pc, #496]	; (80010f4 <HAL_ADC_Init+0x27c>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f0e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f16:	4619      	mov	r1, r3
 8000f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	fa93 f3a3 	rbit	r3, r3
 8000f24:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000f32:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000f38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f48:	fa93 f3a3 	rbit	r3, r3
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000f5a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	d007      	beq.n	8000f7a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000f72:	4313      	orrs	r3, r2
 8000f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f76:	4313      	orrs	r3, r2
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f84:	2b40      	cmp	r3, #64	; 0x40
 8000f86:	d04f      	beq.n	8001028 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000f9a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6912      	ldr	r2, [r2, #16]
 8000fa0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000fa4:	d003      	beq.n	8000fae <HAL_ADC_Init+0x136>
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	6912      	ldr	r2, [r2, #16]
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d102      	bne.n	8000fb4 <HAL_ADC_Init+0x13c>
 8000fae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb2:	e000      	b.n	8000fb6 <HAL_ADC_Init+0x13e>
 8000fb4:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000fb6:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d125      	bne.n	8001014 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d114      	bne.n	8000ffc <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000fdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	fa92 f2a2 	rbit	r2, r2
 8000fe4:	617a      	str	r2, [r7, #20]
  return result;
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	fab2 f282 	clz	r2, r2
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
 8000ffa:	e00b      	b.n	8001014 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	f043 0220 	orr.w	r2, r3, #32
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800100c:	f043 0201 	orr.w	r2, r3, #1
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_ADC_Init+0x280>)
 800101c:	4013      	ands	r3, r2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001024:	430b      	orrs	r3, r1
 8001026:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <HAL_ADC_Init+0x284>)
 8001030:	4013      	ands	r3, r2
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	6812      	ldr	r2, [r2, #0]
 8001036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001038:	430b      	orrs	r3, r1
 800103a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001044:	d003      	beq.n	800104e <HAL_ADC_Init+0x1d6>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d119      	bne.n	8001082 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800105c:	3b01      	subs	r3, #1
 800105e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001062:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	fa92 f2a2 	rbit	r2, r2
 800106a:	60fa      	str	r2, [r7, #12]
  return result;
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	fa03 f202 	lsl.w	r2, r3, r2
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
 8001080:	e007      	b.n	8001092 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_ADC_Init+0x288>)
 800109a:	4013      	ands	r3, r2
 800109c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800109e:	429a      	cmp	r2, r3
 80010a0:	d10b      	bne.n	80010ba <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ac:	f023 0303 	bic.w	r3, r3, #3
 80010b0:	f043 0201 	orr.w	r2, r3, #1
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80010b8:	e014      	b.n	80010e4 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f023 0312 	bic.w	r3, r3, #18
 80010c2:	f043 0210 	orr.w	r2, r3, #16
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ce:	f043 0201 	orr.w	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80010dc:	e002      	b.n	80010e4 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3738      	adds	r7, #56	; 0x38
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40012700 	.word	0x40012700
 80010f8:	fcfc16ff 	.word	0xfcfc16ff
 80010fc:	c0fff18d 	.word	0xc0fff18d
 8001100:	bf80fffe 	.word	0xbf80fffe

08001104 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x20>
 8001120:	2302      	movs	r3, #2
 8001122:	e134      	b.n	800138e <HAL_ADC_ConfigChannel+0x28a>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2201      	movs	r2, #1
 8001128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b06      	cmp	r3, #6
 8001132:	d81c      	bhi.n	800116e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	3b05      	subs	r3, #5
 8001146:	221f      	movs	r2, #31
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	4019      	ands	r1, r3
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	3b05      	subs	r3, #5
 8001160:	fa00 f203 	lsl.w	r2, r0, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	430a      	orrs	r2, r1
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
 800116c:	e07e      	b.n	800126c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b0c      	cmp	r3, #12
 8001174:	d81c      	bhi.n	80011b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	3b23      	subs	r3, #35	; 0x23
 8001188:	221f      	movs	r2, #31
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	4019      	ands	r1, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	3b23      	subs	r3, #35	; 0x23
 80011a2:	fa00 f203 	lsl.w	r2, r0, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ae:	e05d      	b.n	800126c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b12      	cmp	r3, #18
 80011b6:	d81c      	bhi.n	80011f2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	3b41      	subs	r3, #65	; 0x41
 80011ca:	221f      	movs	r2, #31
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4019      	ands	r1, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	3b41      	subs	r3, #65	; 0x41
 80011e4:	fa00 f203 	lsl.w	r2, r0, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	639a      	str	r2, [r3, #56]	; 0x38
 80011f0:	e03c      	b.n	800126c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b18      	cmp	r3, #24
 80011f8:	d81c      	bhi.n	8001234 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	3b5f      	subs	r3, #95	; 0x5f
 800120c:	221f      	movs	r2, #31
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	4019      	ands	r1, r3
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	6818      	ldr	r0, [r3, #0]
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685a      	ldr	r2, [r3, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	3b5f      	subs	r3, #95	; 0x5f
 8001226:	fa00 f203 	lsl.w	r2, r0, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
 8001232:	e01b      	b.n	800126c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b7d      	subs	r3, #125	; 0x7d
 8001246:	221f      	movs	r2, #31
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	4019      	ands	r1, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	3b7d      	subs	r3, #125	; 0x7d
 8001260:	fa00 f203 	lsl.w	r2, r0, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d81a      	bhi.n	80012aa <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6959      	ldr	r1, [r3, #20]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	2207      	movs	r2, #7
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	4019      	ands	r1, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	6898      	ldr	r0, [r3, #8]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	fa00 f203 	lsl.w	r2, r0, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	430a      	orrs	r2, r1
 80012a6:	615a      	str	r2, [r3, #20]
 80012a8:	e042      	b.n	8001330 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b13      	cmp	r3, #19
 80012b0:	d81c      	bhi.n	80012ec <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	3b1e      	subs	r3, #30
 80012c4:	2207      	movs	r2, #7
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	4019      	ands	r1, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6898      	ldr	r0, [r3, #8]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	3b1e      	subs	r3, #30
 80012de:	fa00 f203 	lsl.w	r2, r0, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	611a      	str	r2, [r3, #16]
 80012ea:	e021      	b.n	8001330 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b1a      	cmp	r3, #26
 80012f2:	d81c      	bhi.n	800132e <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	68d9      	ldr	r1, [r3, #12]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	4613      	mov	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	3b3c      	subs	r3, #60	; 0x3c
 8001306:	2207      	movs	r2, #7
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	4019      	ands	r1, r3
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	6898      	ldr	r0, [r3, #8]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	3b3c      	subs	r3, #60	; 0x3c
 8001320:	fa00 f203 	lsl.w	r2, r0, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	e000      	b.n	8001330 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 800132e:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b10      	cmp	r3, #16
 8001336:	d003      	beq.n	8001340 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800133c:	2b11      	cmp	r3, #17
 800133e:	d121      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_ADC_ConfigChannel+0x294>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d11b      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_ADC_ConfigChannel+0x294>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_ADC_ConfigChannel+0x294>)
 8001352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001356:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b10      	cmp	r3, #16
 800135e:	d111      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_ADC_ConfigChannel+0x298>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_ADC_ConfigChannel+0x29c>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0c9a      	lsrs	r2, r3, #18
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001376:	e002      	b.n	800137e <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3b01      	subs	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40012700 	.word	0x40012700
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4906      	ldr	r1, [pc, #24]	; (800143c <__NVIC_EnableIRQ+0x34>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100

08001440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	db0a      	blt.n	800146a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	490c      	ldr	r1, [pc, #48]	; (800148c <__NVIC_SetPriority+0x4c>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	0112      	lsls	r2, r2, #4
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	440b      	add	r3, r1
 8001464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001468:	e00a      	b.n	8001480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <__NVIC_SetPriority+0x50>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	f003 030f 	and.w	r3, r3, #15
 8001476:	3b04      	subs	r3, #4
 8001478:	0112      	lsls	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	440b      	add	r3, r1
 800147e:	761a      	strb	r2, [r3, #24]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000e100 	.word	0xe000e100
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001494:	b480      	push	{r7}
 8001496:	b089      	sub	sp, #36	; 0x24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f1c3 0307 	rsb	r3, r3, #7
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	bf28      	it	cs
 80014b2:	2304      	movcs	r3, #4
 80014b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d902      	bls.n	80014c4 <NVIC_EncodePriority+0x30>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3b03      	subs	r3, #3
 80014c2:	e000      	b.n	80014c6 <NVIC_EncodePriority+0x32>
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	401a      	ands	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014dc:	f04f 31ff 	mov.w	r1, #4294967295
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa01 f303 	lsl.w	r3, r1, r3
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	4313      	orrs	r3, r2
         );
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff90 	bl	8001440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff2d 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff42 	bl	80013ec <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff90 	bl	8001494 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5f 	bl	8001440 <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff35 	bl	8001408 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d008      	beq.n	80015e8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2204      	movs	r2, #4
 80015da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e022      	b.n	800162e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 020e 	bic.w	r2, r2, #14
 80015f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 021c 	and.w	r2, r3, #28
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d005      	beq.n	800165c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2204      	movs	r2, #4
 8001654:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e029      	b.n	80016b0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 020e 	bic.w	r2, r2, #14
 800166a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f003 021c 	and.w	r2, r3, #28
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
    }
  }
  return status;
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80016d2:	e154      	b.n	800197e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8146 	beq.w	8001978 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001700:	2b02      	cmp	r3, #2
 8001702:	d130      	bne.n	8001766 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800173a:	2201      	movs	r2, #1
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	091b      	lsrs	r3, r3, #4
 8001750:	f003 0201 	and.w	r2, r3, #1
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b03      	cmp	r3, #3
 8001770:	d017      	beq.n	80017a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d123      	bne.n	80017f6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	6939      	ldr	r1, [r7, #16]
 80017f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	2203      	movs	r2, #3
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 0203 	and.w	r2, r3, #3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 80a0 	beq.w	8001978 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <HAL_GPIO_Init+0x2e0>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a57      	ldr	r2, [pc, #348]	; (800199c <HAL_GPIO_Init+0x2e0>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b55      	ldr	r3, [pc, #340]	; (800199c <HAL_GPIO_Init+0x2e0>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001850:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <HAL_GPIO_Init+0x2e4>)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a4b      	ldr	r2, [pc, #300]	; (80019a4 <HAL_GPIO_Init+0x2e8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d019      	beq.n	80018b0 <HAL_GPIO_Init+0x1f4>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a4a      	ldr	r2, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x2ec>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d013      	beq.n	80018ac <HAL_GPIO_Init+0x1f0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a49      	ldr	r2, [pc, #292]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d00d      	beq.n	80018a8 <HAL_GPIO_Init+0x1ec>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a48      	ldr	r2, [pc, #288]	; (80019b0 <HAL_GPIO_Init+0x2f4>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d007      	beq.n	80018a4 <HAL_GPIO_Init+0x1e8>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a47      	ldr	r2, [pc, #284]	; (80019b4 <HAL_GPIO_Init+0x2f8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d101      	bne.n	80018a0 <HAL_GPIO_Init+0x1e4>
 800189c:	2304      	movs	r3, #4
 800189e:	e008      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018a0:	2305      	movs	r3, #5
 80018a2:	e006      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018a4:	2303      	movs	r3, #3
 80018a6:	e004      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e002      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_GPIO_Init+0x1f6>
 80018b0:	2300      	movs	r3, #0
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	f002 0203 	and.w	r2, r2, #3
 80018b8:	0092      	lsls	r2, r2, #2
 80018ba:	4093      	lsls	r3, r2
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80018c2:	4937      	ldr	r1, [pc, #220]	; (80019a0 <HAL_GPIO_Init+0x2e4>)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	3302      	adds	r3, #2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018d0:	4b39      	ldr	r3, [pc, #228]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018f4:	4a30      	ldr	r2, [pc, #192]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018fa:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800191e:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001972:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_GPIO_Init+0x2fc>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	3301      	adds	r3, #1
 800197c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	f47f aea3 	bne.w	80016d4 <HAL_GPIO_Init+0x18>
  }
}
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40010000 	.word	0x40010000
 80019a4:	40020000 	.word	0x40020000
 80019a8:	40020400 	.word	0x40020400
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40021000 	.word	0x40021000
 80019b8:	40010400 	.word	0x40010400

080019bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d002      	beq.n	80019da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
 80019d8:	e001      	b.n	80019de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr

080019ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	807b      	strh	r3, [r7, #2]
 80019f6:	4613      	mov	r3, r2
 80019f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019fa:	787b      	ldrb	r3, [r7, #1]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a00:	887a      	ldrh	r2, [r7, #2]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001a06:	e003      	b.n	8001a10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	041a      	lsls	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	619a      	str	r2, [r3, #24]
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b085      	sub	sp, #20
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a2c:	887a      	ldrh	r2, [r7, #2]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4013      	ands	r3, r2
 8001a32:	041a      	lsls	r2, r3, #16
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fdf0 	bl	8000650 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e31d      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8e:	4b94      	ldr	r3, [pc, #592]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a98:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d07b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d006      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d10f      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d10b      	bne.n	8001ada <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac2:	4b87      	ldr	r3, [pc, #540]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d06a      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x128>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d166      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e2f7      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x74>
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e02d      	b.n	8001b4c <HAL_RCC_OscConfig+0xd0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10c      	bne.n	8001b12 <HAL_RCC_OscConfig+0x96>
 8001af8:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a78      	ldr	r2, [pc, #480]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e01c      	b.n	8001b4c <HAL_RCC_OscConfig+0xd0>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0xb8>
 8001b1a:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a70      	ldr	r2, [pc, #448]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6e      	ldr	r3, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6d      	ldr	r2, [pc, #436]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xd0>
 8001b34:	4b6a      	ldr	r3, [pc, #424]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a69      	ldr	r2, [pc, #420]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b67      	ldr	r3, [pc, #412]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f986 	bl	8000e64 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f982 	bl	8000e64 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e2ad      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe0>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f972 	bl	8000e64 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f96e 	bl	8000e64 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e299      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b96:	4b52      	ldr	r3, [pc, #328]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x108>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d05a      	beq.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x176>
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d116      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc4:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x160>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e276      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	493d      	ldr	r1, [pc, #244]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf0:	e03a      	b.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d020      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_RCC_OscConfig+0x268>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f930 	bl	8000e64 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff f92c 	bl	8000e64 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e257      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b2e      	ldr	r3, [pc, #184]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	492a      	ldr	r1, [pc, #168]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
 8001c3a:	e015      	b.n	8001c68 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_RCC_OscConfig+0x268>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff f90f 	bl	8000e64 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c4a:	f7ff f90b 	bl	8000e64 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e236      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0310 	and.w	r3, r3, #16
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80b8 	beq.w	8001de6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d170      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c7c:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x218>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e21a      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a1a      	ldr	r2, [r3, #32]
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d921      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fc23 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e208      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4906      	ldr	r1, [pc, #24]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	061b      	lsls	r3, r3, #24
 8001cd8:	4901      	ldr	r1, [pc, #4]	; (8001ce0 <HAL_RCC_OscConfig+0x264>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
 8001cde:	e020      	b.n	8001d22 <HAL_RCC_OscConfig+0x2a6>
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce8:	4ba4      	ldr	r3, [pc, #656]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	49a1      	ldr	r1, [pc, #644]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cfa:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	061b      	lsls	r3, r3, #24
 8001d08:	499c      	ldr	r1, [pc, #624]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 fbee 	bl	80024f4 <RCC_SetFlashLatencyFromMSIRange>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e1d3      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	0b5b      	lsrs	r3, r3, #13
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d32:	4a92      	ldr	r2, [pc, #584]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001d34:	6892      	ldr	r2, [r2, #8]
 8001d36:	0912      	lsrs	r2, r2, #4
 8001d38:	f002 020f 	and.w	r2, r2, #15
 8001d3c:	4990      	ldr	r1, [pc, #576]	; (8001f80 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	5c8a      	ldrb	r2, [r1, r2]
 8001d40:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d42:	4a90      	ldr	r2, [pc, #576]	; (8001f84 <HAL_RCC_OscConfig+0x508>)
 8001d44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d46:	4b90      	ldr	r3, [pc, #576]	; (8001f88 <HAL_RCC_OscConfig+0x50c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f83e 	bl	8000dcc <HAL_InitTick>
 8001d50:	4603      	mov	r3, r0
 8001d52:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d045      	beq.n	8001de6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	e1b5      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d029      	beq.n	8001dba <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d66:	4b89      	ldr	r3, [pc, #548]	; (8001f8c <HAL_RCC_OscConfig+0x510>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f87a 	bl	8000e64 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d74:	f7ff f876 	bl	8000e64 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1a1      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d86:	4b7d      	ldr	r3, [pc, #500]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d92:	4b7a      	ldr	r3, [pc, #488]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4977      	ldr	r1, [pc, #476]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da4:	4b75      	ldr	r3, [pc, #468]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	4972      	ldr	r1, [pc, #456]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dba:	4b74      	ldr	r3, [pc, #464]	; (8001f8c <HAL_RCC_OscConfig+0x510>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f850 	bl	8000e64 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f84c 	bl	8000e64 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e177      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001dda:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d030      	beq.n	8001e54 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfa:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x514>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff f830 	bl	8000e64 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e08:	f7ff f82c 	bl	8000e64 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e157      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e1a:	4b58      	ldr	r3, [pc, #352]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x38c>
 8001e26:	e015      	b.n	8001e54 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <HAL_RCC_OscConfig+0x514>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2e:	f7ff f819 	bl	8000e64 <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e34:	e008      	b.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e36:	f7ff f815 	bl	8000e64 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e140      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e48:	4b4c      	ldr	r3, [pc, #304]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f0      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80b5 	beq.w	8001fcc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b45      	ldr	r3, [pc, #276]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10d      	bne.n	8001e8e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b42      	ldr	r3, [pc, #264]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	4a41      	ldr	r2, [pc, #260]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6253      	str	r3, [r2, #36]	; 0x24
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <HAL_RCC_OscConfig+0x518>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d118      	bne.n	8001ecc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <HAL_RCC_OscConfig+0x518>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a3d      	ldr	r2, [pc, #244]	; (8001f94 <HAL_RCC_OscConfig+0x518>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea6:	f7fe ffdd 	bl	8000e64 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eae:	f7fe ffd9 	bl	8000e64 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	; 0x64
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e104      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec0:	4b34      	ldr	r3, [pc, #208]	; (8001f94 <HAL_RCC_OscConfig+0x518>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x466>
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	4a28      	ldr	r2, [pc, #160]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6353      	str	r3, [r2, #52]	; 0x34
 8001ee0:	e02d      	b.n	8001f3e <HAL_RCC_OscConfig+0x4c2>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10c      	bne.n	8001f04 <HAL_RCC_OscConfig+0x488>
 8001eea:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eee:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef4:	6353      	str	r3, [r2, #52]	; 0x34
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efa:	4a20      	ldr	r2, [pc, #128]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f00:	6353      	str	r3, [r2, #52]	; 0x34
 8001f02:	e01c      	b.n	8001f3e <HAL_RCC_OscConfig+0x4c2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x4aa>
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f10:	4a1a      	ldr	r2, [pc, #104]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f16:	6353      	str	r3, [r2, #52]	; 0x34
 8001f18:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f22:	6353      	str	r3, [r2, #52]	; 0x34
 8001f24:	e00b      	b.n	8001f3e <HAL_RCC_OscConfig+0x4c2>
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f30:	6353      	str	r3, [r2, #52]	; 0x34
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f3c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d015      	beq.n	8001f72 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7fe ff8d 	bl	8000e64 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe ff89 	bl	8000e64 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e0b2      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <HAL_RCC_OscConfig+0x500>)
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0ee      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4d2>
 8001f70:	e023      	b.n	8001fba <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7fe ff77 	bl	8000e64 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f78:	e019      	b.n	8001fae <HAL_RCC_OscConfig+0x532>
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08003be4 	.word	0x08003be4
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	42470020 	.word	0x42470020
 8001f90:	42470680 	.word	0x42470680
 8001f94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f98:	f7fe ff64 	bl	8000e64 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e08d      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fae:	4b49      	ldr	r3, [pc, #292]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8001fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1ee      	bne.n	8001f98 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc0:	4b44      	ldr	r3, [pc, #272]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	4a43      	ldr	r2, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8001fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d079      	beq.n	80020c8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d056      	beq.n	8002088 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d13b      	bne.n	800205a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <HAL_RCC_OscConfig+0x65c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7fe ff3c 	bl	8000e64 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7fe ff38 	bl	8000e64 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e063      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200e:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	4319      	orrs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	430b      	orrs	r3, r1
 8002026:	492b      	ldr	r1, [pc, #172]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8002028:	4313      	orrs	r3, r2
 800202a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <HAL_RCC_OscConfig+0x65c>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002032:	f7fe ff17 	bl	8000e64 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203a:	f7fe ff13 	bl	8000e64 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e03e      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x5be>
 8002058:	e036      	b.n	80020c8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HAL_RCC_OscConfig+0x65c>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe ff00 	bl	8000e64 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe fefc 	bl	8000e64 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e027      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207a:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x5ec>
 8002086:	e01f      	b.n	80020c8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e01a      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002094:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <HAL_RCC_OscConfig+0x658>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d10d      	bne.n	80020c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d106      	bne.n	80020c4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3720      	adds	r7, #32
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800
 80020d8:	42470060 	.word	0x42470060

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e11a      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d919      	bls.n	8002132 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d105      	bne.n	8002110 <HAL_RCC_ClockConfig+0x34>
 8002104:	4b8a      	ldr	r3, [pc, #552]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a89      	ldr	r2, [pc, #548]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b87      	ldr	r3, [pc, #540]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 0201 	bic.w	r2, r3, #1
 8002118:	4985      	ldr	r1, [pc, #532]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002120:	4b83      	ldr	r3, [pc, #524]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0f9      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213e:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	497a      	ldr	r1, [pc, #488]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 808e 	beq.w	800227a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002166:	4b73      	ldr	r3, [pc, #460]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d121      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e0d7      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800217e:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0cb      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0bf      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021a6:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e0b7      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021b6:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f023 0203 	bic.w	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	495c      	ldr	r1, [pc, #368]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021c8:	f7fe fe4c 	bl	8000e64 <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d112      	bne.n	80021fc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7fe fe44 	bl	8000e64 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e09b      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d1ee      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xfc>
 80021fa:	e03e      	b.n	800227a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d112      	bne.n	800222a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002204:	e00a      	b.n	800221c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002206:	f7fe fe2d 	bl	8000e64 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e084      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800221c:	4b45      	ldr	r3, [pc, #276]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b0c      	cmp	r3, #12
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_ClockConfig+0x12a>
 8002228:	e027      	b.n	800227a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d11d      	bne.n	800226e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe fe16 	bl	8000e64 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e06d      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b04      	cmp	r3, #4
 8002254:	d1ee      	bne.n	8002234 <HAL_RCC_ClockConfig+0x158>
 8002256:	e010      	b.n	800227a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002258:	f7fe fe04 	bl	8000e64 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e05b      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ee      	bne.n	8002258 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d219      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_ClockConfig+0x1be>
 800228e:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a27      	ldr	r2, [pc, #156]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0201 	bic.w	r2, r3, #1
 80022a2:	4923      	ldr	r1, [pc, #140]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <HAL_RCC_ClockConfig+0x254>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e034      	b.n	8002326 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4917      	ldr	r1, [pc, #92]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490f      	ldr	r1, [pc, #60]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 f823 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <HAL_RCC_ClockConfig+0x258>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490b      	ldr	r1, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x25c>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_RCC_ClockConfig+0x260>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_RCC_ClockConfig+0x264>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe fd56 	bl	8000dcc <HAL_InitTick>
 8002320:	4603      	mov	r3, r0
 8002322:	72fb      	strb	r3, [r7, #11]

  return status;
 8002324:	7afb      	ldrb	r3, [r7, #11]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00
 8002334:	40023800 	.word	0x40023800
 8002338:	08003be4 	.word	0x08003be4
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800234a:	4b4d      	ldr	r3, [pc, #308]	; (8002480 <HAL_RCC_GetSysClockFreq+0x13c>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d00c      	beq.n	8002374 <HAL_RCC_GetSysClockFreq+0x30>
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d87c      	bhi.n	8002458 <HAL_RCC_GetSysClockFreq+0x114>
 800235e:	2b04      	cmp	r3, #4
 8002360:	d002      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x24>
 8002362:	2b08      	cmp	r3, #8
 8002364:	d003      	beq.n	800236e <HAL_RCC_GetSysClockFreq+0x2a>
 8002366:	e077      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_GetSysClockFreq+0x140>)
 800236a:	613b      	str	r3, [r7, #16]
      break;
 800236c:	e082      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCC_GetSysClockFreq+0x144>)
 8002370:	613b      	str	r3, [r7, #16]
      break;
 8002372:	e07f      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	0c9b      	lsrs	r3, r3, #18
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	4a43      	ldr	r2, [pc, #268]	; (800248c <HAL_RCC_GetSysClockFreq+0x148>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	0d9b      	lsrs	r3, r3, #22
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238e:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d01a      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	461a      	mov	r2, r3
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	4939      	ldr	r1, [pc, #228]	; (8002488 <HAL_RCC_GetSysClockFreq+0x144>)
 80023a4:	fb01 f003 	mul.w	r0, r1, r3
 80023a8:	2100      	movs	r1, #0
 80023aa:	fb01 f102 	mul.w	r1, r1, r2
 80023ae:	1844      	adds	r4, r0, r1
 80023b0:	4935      	ldr	r1, [pc, #212]	; (8002488 <HAL_RCC_GetSysClockFreq+0x144>)
 80023b2:	fba2 0101 	umull	r0, r1, r2, r1
 80023b6:	1863      	adds	r3, r4, r1
 80023b8:	4619      	mov	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	461a      	mov	r2, r3
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	f7fd fedb 	bl	800017c <__aeabi_uldivmod>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4613      	mov	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e040      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	461c      	mov	r4, r3
 80023d4:	f04f 0500 	mov.w	r5, #0
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	014b      	lsls	r3, r1, #5
 80023e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023ea:	0142      	lsls	r2, r0, #5
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	1b00      	subs	r0, r0, r4
 80023f2:	eb61 0105 	sbc.w	r1, r1, r5
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	018b      	lsls	r3, r1, #6
 8002400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002404:	0182      	lsls	r2, r0, #6
 8002406:	1a12      	subs	r2, r2, r0
 8002408:	eb63 0301 	sbc.w	r3, r3, r1
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	f04f 0100 	mov.w	r1, #0
 8002414:	00d9      	lsls	r1, r3, #3
 8002416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800241a:	00d0      	lsls	r0, r2, #3
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	1912      	adds	r2, r2, r4
 8002422:	eb45 0303 	adc.w	r3, r5, r3
 8002426:	f04f 0000 	mov.w	r0, #0
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	0299      	lsls	r1, r3, #10
 8002430:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002434:	0290      	lsls	r0, r2, #10
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	461a      	mov	r2, r3
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	f7fd fe99 	bl	800017c <__aeabi_uldivmod>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4613      	mov	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	613b      	str	r3, [r7, #16]
      break;
 8002456:	e00d      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_GetSysClockFreq+0x13c>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0b5b      	lsrs	r3, r3, #13
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	613b      	str	r3, [r7, #16]
      break;
 8002472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002474:	693b      	ldr	r3, [r7, #16]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bdb0      	pop	{r4, r5, r7, pc}
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	016e3600 	.word	0x016e3600
 800248c:	08003bd8 	.word	0x08003bd8

08002490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002494:	4b02      	ldr	r3, [pc, #8]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002496:	681b      	ldr	r3, [r3, #0]
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000000 	.word	0x20000000

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff2 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08003bf4 	.word	0x08003bf4

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffde 	bl	8002490 <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0adb      	lsrs	r3, r3, #11
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08003bf4 	.word	0x08003bf4

080024f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d12c      	bne.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e016      	b.n	8002552 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	6253      	str	r3, [r2, #36]	; 0x24
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002544:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800254c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002550:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002558:	d105      	bne.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002560:	d101      	bne.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002562:	2301      	movs	r3, #1
 8002564:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d105      	bne.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0f      	ldr	r2, [pc, #60]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 0201 	bic.w	r2, r3, #1
 8002580:	490b      	ldr	r1, [pc, #44]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	429a      	cmp	r2, r3
 8002594:	d001      	beq.n	800259a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40007000 	.word	0x40007000
 80025b0:	40023c00 	.word	0x40023c00

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e031      	b.n	800262a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fa56 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 fbf6 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d001      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e03a      	b.n	80026c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266c:	d00e      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x58>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a16      	ldr	r2, [pc, #88]	; (80026cc <HAL_TIM_Base_Start_IT+0x98>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d009      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x58>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <HAL_TIM_Base_Start_IT+0x58>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d111      	bne.n	80026b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b06      	cmp	r3, #6
 800269c:	d010      	beq.n	80026c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ae:	e007      	b.n	80026c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40010800 	.word	0x40010800

080026d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_Base_Stop_IT+0x38>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e031      	b.n	800279a <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f829 	bl	80027a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 fb3e 	bl	8002de4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <HAL_TIM_PWM_Start+0x24>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	bf14      	ite	ne
 80027d0:	2301      	movne	r3, #1
 80027d2:	2300      	moveq	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	e022      	b.n	800281e <HAL_TIM_PWM_Start+0x6a>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d109      	bne.n	80027f2 <HAL_TIM_PWM_Start+0x3e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	e015      	b.n	800281e <HAL_TIM_PWM_Start+0x6a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d109      	bne.n	800280c <HAL_TIM_PWM_Start+0x58>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b01      	cmp	r3, #1
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e008      	b.n	800281e <HAL_TIM_PWM_Start+0x6a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e051      	b.n	80028ca <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <HAL_TIM_PWM_Start+0x82>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002834:	e013      	b.n	800285e <HAL_TIM_PWM_Start+0xaa>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d104      	bne.n	8002846 <HAL_TIM_PWM_Start+0x92>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002844:	e00b      	b.n	800285e <HAL_TIM_PWM_Start+0xaa>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d104      	bne.n	8002856 <HAL_TIM_PWM_Start+0xa2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002854:	e003      	b.n	800285e <HAL_TIM_PWM_Start+0xaa>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	6839      	ldr	r1, [r7, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fca9 	bl	80031be <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002874:	d00e      	beq.n	8002894 <HAL_TIM_PWM_Start+0xe0>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_TIM_PWM_Start+0x120>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_TIM_PWM_Start+0xe0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <HAL_TIM_PWM_Start+0x124>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_PWM_Start+0xe0>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <HAL_TIM_PWM_Start+0x128>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d010      	beq.n	80028c8 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	e007      	b.n	80028c8 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	40010800 	.word	0x40010800

080028e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0202 	mvn.w	r2, #2
 800290c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fa43 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa36 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fa45 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fa19 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fa0c 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fa1b 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0208 	mvn.w	r2, #8
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9ef 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9e2 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9f1 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0210 	mvn.w	r2, #16
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9c5 	bl	8002dae <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9b8 	bl	8002d9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9c7 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f8a2 	bl	8000ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9a1 	bl	8002dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e0ac      	b.n	8002c0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0c      	cmp	r3, #12
 8002abe:	f200 809f 	bhi.w	8002c00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ac2:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002afd 	.word	0x08002afd
 8002acc:	08002c01 	.word	0x08002c01
 8002ad0:	08002c01 	.word	0x08002c01
 8002ad4:	08002c01 	.word	0x08002c01
 8002ad8:	08002b3d 	.word	0x08002b3d
 8002adc:	08002c01 	.word	0x08002c01
 8002ae0:	08002c01 	.word	0x08002c01
 8002ae4:	08002c01 	.word	0x08002c01
 8002ae8:	08002b7f 	.word	0x08002b7f
 8002aec:	08002c01 	.word	0x08002c01
 8002af0:	08002c01 	.word	0x08002c01
 8002af4:	08002c01 	.word	0x08002c01
 8002af8:	08002bbf 	.word	0x08002bbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 f9d0 	bl	8002ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0208 	orr.w	r2, r2, #8
 8002b16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0204 	bic.w	r2, r2, #4
 8002b26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	619a      	str	r2, [r3, #24]
      break;
 8002b3a:	e062      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f9ec 	bl	8002f20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699a      	ldr	r2, [r3, #24]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6999      	ldr	r1, [r3, #24]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	021a      	lsls	r2, r3, #8
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]
      break;
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa09 	bl	8002f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f042 0208 	orr.w	r2, r2, #8
 8002b98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	69da      	ldr	r2, [r3, #28]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0204 	bic.w	r2, r2, #4
 8002ba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69d9      	ldr	r1, [r3, #28]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      break;
 8002bbc:	e021      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fa26 	bl	8003016 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69da      	ldr	r2, [r3, #28]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	69da      	ldr	r2, [r3, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69d9      	ldr	r1, [r3, #28]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	021a      	lsls	r2, r3, #8
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	61da      	str	r2, [r3, #28]
      break;
 8002bfe:	e000      	b.n	8002c02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <HAL_TIM_ConfigClockSource+0x18>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e0b3      	b.n	8002d94 <HAL_TIM_ConfigClockSource+0x180>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c64:	d03e      	beq.n	8002ce4 <HAL_TIM_ConfigClockSource+0xd0>
 8002c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c6a:	f200 8087 	bhi.w	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	f000 8085 	beq.w	8002d80 <HAL_TIM_ConfigClockSource+0x16c>
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	d87f      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c7c:	2b70      	cmp	r3, #112	; 0x70
 8002c7e:	d01a      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0xa2>
 8002c80:	2b70      	cmp	r3, #112	; 0x70
 8002c82:	d87b      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c84:	2b60      	cmp	r3, #96	; 0x60
 8002c86:	d050      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x116>
 8002c88:	2b60      	cmp	r3, #96	; 0x60
 8002c8a:	d877      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c8c:	2b50      	cmp	r3, #80	; 0x50
 8002c8e:	d03c      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0xf6>
 8002c90:	2b50      	cmp	r3, #80	; 0x50
 8002c92:	d873      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d058      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x136>
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d86f      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002c9c:	2b30      	cmp	r3, #48	; 0x30
 8002c9e:	d064      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
 8002ca0:	2b30      	cmp	r3, #48	; 0x30
 8002ca2:	d86b      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002ca4:	2b20      	cmp	r3, #32
 8002ca6:	d060      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d867      	bhi.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d05c      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d05a      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002cb4:	e062      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f000 fa5b 	bl	8003180 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	609a      	str	r2, [r3, #8]
      break;
 8002ce2:	e04e      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6899      	ldr	r1, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f000 fa44 	bl	8003180 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d06:	609a      	str	r2, [r3, #8]
      break;
 8002d08:	e03b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	461a      	mov	r2, r3
 8002d18:	f000 f9bb 	bl	8003092 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2150      	movs	r1, #80	; 0x50
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fa12 	bl	800314c <TIM_ITRx_SetConfig>
      break;
 8002d28:	e02b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f000 f9d9 	bl	80030ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2160      	movs	r1, #96	; 0x60
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fa02 	bl	800314c <TIM_ITRx_SetConfig>
      break;
 8002d48:	e01b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f000 f99b 	bl	8003092 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2140      	movs	r1, #64	; 0x40
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f9f2 	bl	800314c <TIM_ITRx_SetConfig>
      break;
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4619      	mov	r1, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	f000 f9e9 	bl	800314c <TIM_ITRx_SetConfig>
        break;
 8002d7a:	e002      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d007      	beq.n	8002e0c <TIM_Base_SetConfig+0x28>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <TIM_Base_SetConfig+0xb0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0x28>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a24      	ldr	r2, [pc, #144]	; (8002e98 <TIM_Base_SetConfig+0xb4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d108      	bne.n	8002e1e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d013      	beq.n	8002e4e <TIM_Base_SetConfig+0x6a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <TIM_Base_SetConfig+0xb0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00f      	beq.n	8002e4e <TIM_Base_SetConfig+0x6a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <TIM_Base_SetConfig+0xb4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <TIM_Base_SetConfig+0x6a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <TIM_Base_SetConfig+0xb8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <TIM_Base_SetConfig+0x6a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a17      	ldr	r2, [pc, #92]	; (8002ea0 <TIM_Base_SetConfig+0xbc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d003      	beq.n	8002e4e <TIM_Base_SetConfig+0x6a>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <TIM_Base_SetConfig+0xc0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d108      	bne.n	8002e60 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	615a      	str	r2, [r3, #20]
}
 8002e8a:	bf00      	nop
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40010800 	.word	0x40010800
 8002ea0:	40010c00 	.word	0x40010c00
 8002ea4:	40011000 	.word	0x40011000

08002ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0201 	bic.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 0302 	bic.w	r3, r3, #2
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	621a      	str	r2, [r3, #32]
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0210 	bic.w	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0320 	bic.w	r3, r3, #32
 8002f6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	621a      	str	r2, [r3, #32]
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	621a      	str	r2, [r3, #32]
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003044:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	031b      	lsls	r3, r3, #12
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003092:	b480      	push	{r7}
 8003094:	b087      	sub	sp, #28
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f023 0201 	bic.w	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 030a 	bic.w	r3, r3, #10
 80030ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	621a      	str	r2, [r3, #32]
}
 80030e4:	bf00      	nop
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bc80      	pop	{r7}
 80030ec:	4770      	bx	lr

080030ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b087      	sub	sp, #28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	f023 0210 	bic.w	r2, r3, #16
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	031b      	lsls	r3, r3, #12
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800312a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	f043 0307 	orr.w	r3, r3, #7
 800316e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	609a      	str	r2, [r3, #8]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	021a      	lsls	r2, r3, #8
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031be:	b480      	push	{r7}
 80031c0:	b087      	sub	sp, #28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	2201      	movs	r2, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	43db      	mvns	r3, r3
 80031e0:	401a      	ands	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	431a      	orrs	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	621a      	str	r2, [r3, #32]
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
	...

08003208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800321c:	2302      	movs	r3, #2
 800321e:	e046      	b.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d00e      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d009      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a12      	ldr	r2, [pc, #72]	; (80032bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d004      	beq.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10c      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40010800 	.word	0x40010800

080032c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e03f      	b.n	8003356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fce4 	bl	8000cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2224      	movs	r2, #36	; 0x24
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 fb49 	bl	80039a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800331c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800332c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800333c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_UART_IRQHandler+0x52>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa4f 	bl	800384e <UART_Receive_IT>
      return;
 80033b0:	e17b      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80b1 	beq.w	800351c <HAL_UART_IRQHandler+0x1bc>
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_UART_IRQHandler+0x70>
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a6 	beq.w	800351c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_UART_IRQHandler+0x90>
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_UART_IRQHandler+0xb0>
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	f043 0202 	orr.w	r2, r3, #2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_UART_IRQHandler+0xd0>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00f      	beq.n	800345a <HAL_UART_IRQHandler+0xfa>
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_UART_IRQHandler+0xee>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	f043 0208 	orr.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 811e 	beq.w	80036a0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <HAL_UART_IRQHandler+0x11e>
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f9e8 	bl	800384e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	bf0c      	ite	eq
 800348c:	2301      	moveq	r3, #1
 800348e:	2300      	movne	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b00      	cmp	r3, #0
 800349e:	d102      	bne.n	80034a6 <HAL_UART_IRQHandler+0x146>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d031      	beq.n	800350a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f92a 	bl	8003700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b6:	2b40      	cmp	r3, #64	; 0x40
 80034b8:	d123      	bne.n	8003502 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d013      	beq.n	80034fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a76      	ldr	r2, [pc, #472]	; (80036b0 <HAL_UART_IRQHandler+0x350>)
 80034d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe f8aa 	bl	8001638 <HAL_DMA_Abort_IT>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d016      	beq.n	8003518 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034f4:	4610      	mov	r0, r2
 80034f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f8:	e00e      	b.n	8003518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8ec 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	e00a      	b.n	8003518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f8e8 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	e006      	b.n	8003518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8e4 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003516:	e0c3      	b.n	80036a0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	bf00      	nop
    return;
 800351a:	e0c1      	b.n	80036a0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2b01      	cmp	r3, #1
 8003522:	f040 80a1 	bne.w	8003668 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 809b 	beq.w	8003668 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	f003 0310 	and.w	r3, r3, #16
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8095 	beq.w	8003668 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d14e      	bne.n	8003600 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800356c:	8a3b      	ldrh	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8098 	beq.w	80036a4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003578:	8a3a      	ldrh	r2, [r7, #16]
 800357a:	429a      	cmp	r2, r3
 800357c:	f080 8092 	bcs.w	80036a4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8a3a      	ldrh	r2, [r7, #16]
 8003584:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	2b20      	cmp	r3, #32
 800358e:	d02b      	beq.n	80035e8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800359e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0210 	bic.w	r2, r2, #16
 80035dc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd ffeb 	bl	80015be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f876 	bl	80036ea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035fe:	e051      	b.n	80036a4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d047      	beq.n	80036a8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003618:	8a7b      	ldrh	r3, [r7, #18]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800362c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0201 	bic.w	r2, r2, #1
 800363c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0210 	bic.w	r2, r2, #16
 800365a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365c:	8a7b      	ldrh	r3, [r7, #18]
 800365e:	4619      	mov	r1, r3
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f842 	bl	80036ea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003666:	e01f      	b.n	80036a8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_UART_IRQHandler+0x324>
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f87f 	bl	8003780 <UART_Transmit_IT>
    return;
 8003682:	e012      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_UART_IRQHandler+0x34a>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f8c0 	bl	800381e <UART_EndTransmit_IT>
    return;
 800369e:	e004      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
    return;
 80036a0:	bf00      	nop
 80036a2:	e002      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
      return;
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <HAL_UART_IRQHandler+0x34a>
      return;
 80036a8:	bf00      	nop
  }
}
 80036aa:	3728      	adds	r7, #40	; 0x28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08003759 	.word	0x08003759

080036b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003716:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0210 	bic.w	r2, r2, #16
 800373e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff ffb0 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b21      	cmp	r3, #33	; 0x21
 8003792:	d13e      	bne.n	8003812 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379c:	d114      	bne.n	80037c8 <UART_Transmit_IT+0x48>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d110      	bne.n	80037c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	1c9a      	adds	r2, r3, #2
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]
 80037c6:	e008      	b.n	80037da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	1c59      	adds	r1, r3, #1
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6211      	str	r1, [r2, #32]
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4619      	mov	r1, r3
 80037e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10f      	bne.n	800380e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003812:	2302      	movs	r3, #2
  }
}
 8003814:	4618      	mov	r0, r3
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003834:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7ff ff38 	bl	80036b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b22      	cmp	r3, #34	; 0x22
 8003860:	f040 8099 	bne.w	8003996 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386c:	d117      	bne.n	800389e <UART_Receive_IT+0x50>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388c:	b29a      	uxth	r2, r3
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
 800389c:	e026      	b.n	80038ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d007      	beq.n	80038c2 <UART_Receive_IT+0x74>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <UART_Receive_IT+0x82>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	701a      	strb	r2, [r3, #0]
 80038ce:	e008      	b.n	80038e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4619      	mov	r1, r3
 80038fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d148      	bne.n	8003992 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0220 	bic.w	r2, r2, #32
 800390e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800391e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	2b01      	cmp	r3, #1
 800393e:	d123      	bne.n	8003988 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0210 	bic.w	r2, r2, #16
 8003954:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0310 	and.w	r3, r3, #16
 8003960:	2b10      	cmp	r3, #16
 8003962:	d10a      	bne.n	800397a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff feb2 	bl	80036ea <HAL_UARTEx_RxEventCallback>
 8003986:	e002      	b.n	800398e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff fe9c 	bl	80036c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e002      	b.n	8003998 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039e0:	f023 030c 	bic.w	r3, r3, #12
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	430b      	orrs	r3, r1
 80039ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a55      	ldr	r2, [pc, #340]	; (8003b60 <UART_SetConfig+0x1c0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d103      	bne.n	8003a16 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a0e:	f7fe fd5d 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	e002      	b.n	8003a1c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7fe fd45 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 8003a1a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d14c      	bne.n	8003ac0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	4a49      	ldr	r2, [pc, #292]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	0119      	lsls	r1, r3, #4
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009a      	lsls	r2, r3, #2
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a5c:	4b41      	ldr	r3, [pc, #260]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2064      	movs	r0, #100	; 0x64
 8003a66:	fb00 f303 	mul.w	r3, r0, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a7e:	4419      	add	r1, r3
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009a      	lsls	r2, r3, #2
 8003a8a:	441a      	add	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a96:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003a98:	fba3 0302 	umull	r0, r3, r3, r2
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	2064      	movs	r0, #100	; 0x64
 8003aa0:	fb00 f303 	mul.w	r3, r0, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	3332      	adds	r3, #50	; 0x32
 8003aaa:	4a2e      	ldr	r2, [pc, #184]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	f003 0207 	and.w	r2, r3, #7
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	440a      	add	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003abe:	e04a      	b.n	8003b56 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad6:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	0119      	lsls	r1, r3, #4
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009a      	lsls	r2, r3, #2
 8003aea:	441a      	add	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003af8:	fba3 0302 	umull	r0, r3, r3, r2
 8003afc:	095b      	lsrs	r3, r3, #5
 8003afe:	2064      	movs	r0, #100	; 0x64
 8003b00:	fb00 f303 	mul.w	r3, r0, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	3332      	adds	r3, #50	; 0x32
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	095b      	lsrs	r3, r3, #5
 8003b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b16:	4419      	add	r1, r3
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	009a      	lsls	r2, r3, #2
 8003b22:	441a      	add	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003b30:	fba3 0302 	umull	r0, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	2064      	movs	r0, #100	; 0x64
 8003b38:	fb00 f303 	mul.w	r3, r0, r3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	3332      	adds	r3, #50	; 0x32
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <UART_SetConfig+0x1c4>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 020f 	and.w	r2, r3, #15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	440a      	add	r2, r1
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40013800 	.word	0x40013800
 8003b64:	51eb851f 	.word	0x51eb851f

08003b68 <__libc_init_array>:
 8003b68:	b570      	push	{r4, r5, r6, lr}
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	4d0c      	ldr	r5, [pc, #48]	; (8003ba0 <__libc_init_array+0x38>)
 8003b6e:	4c0d      	ldr	r4, [pc, #52]	; (8003ba4 <__libc_init_array+0x3c>)
 8003b70:	1b64      	subs	r4, r4, r5
 8003b72:	10a4      	asrs	r4, r4, #2
 8003b74:	42a6      	cmp	r6, r4
 8003b76:	d109      	bne.n	8003b8c <__libc_init_array+0x24>
 8003b78:	f000 f822 	bl	8003bc0 <_init>
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	4d0a      	ldr	r5, [pc, #40]	; (8003ba8 <__libc_init_array+0x40>)
 8003b80:	4c0a      	ldr	r4, [pc, #40]	; (8003bac <__libc_init_array+0x44>)
 8003b82:	1b64      	subs	r4, r4, r5
 8003b84:	10a4      	asrs	r4, r4, #2
 8003b86:	42a6      	cmp	r6, r4
 8003b88:	d105      	bne.n	8003b96 <__libc_init_array+0x2e>
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b90:	4798      	blx	r3
 8003b92:	3601      	adds	r6, #1
 8003b94:	e7ee      	b.n	8003b74 <__libc_init_array+0xc>
 8003b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9a:	4798      	blx	r3
 8003b9c:	3601      	adds	r6, #1
 8003b9e:	e7f2      	b.n	8003b86 <__libc_init_array+0x1e>
 8003ba0:	08003c04 	.word	0x08003c04
 8003ba4:	08003c04 	.word	0x08003c04
 8003ba8:	08003c04 	.word	0x08003c04
 8003bac:	08003c08 	.word	0x08003c08

08003bb0 <memset>:
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4402      	add	r2, r0
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d100      	bne.n	8003bba <memset+0xa>
 8003bb8:	4770      	bx	lr
 8003bba:	f803 1b01 	strb.w	r1, [r3], #1
 8003bbe:	e7f9      	b.n	8003bb4 <memset+0x4>

08003bc0 <_init>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr

08003bcc <_fini>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	bf00      	nop
 8003bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd2:	bc08      	pop	{r3}
 8003bd4:	469e      	mov	lr, r3
 8003bd6:	4770      	bx	lr
