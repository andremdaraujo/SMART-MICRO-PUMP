
SMART-MICRO-PUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005684  08005684  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800568c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000070  080056fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080056fc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102af  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000291f  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  00033948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001656a  00000000  00000000  000344f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcb5  00000000  00000000  0004aa62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084446  00000000  00000000  0005a717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000deb5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d8  00000000  00000000  000debb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080055e4 	.word	0x080055e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080055e4 	.word	0x080055e4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_frsub>:
 800018c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000190:	e002      	b.n	8000198 <__addsf3>
 8000192:	bf00      	nop

08000194 <__aeabi_fsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000198 <__addsf3>:
 8000198:	0042      	lsls	r2, r0, #1
 800019a:	bf1f      	itttt	ne
 800019c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001a0:	ea92 0f03 	teqne	r2, r3
 80001a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001ac:	d06a      	beq.n	8000284 <__addsf3+0xec>
 80001ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001b6:	bfc1      	itttt	gt
 80001b8:	18d2      	addgt	r2, r2, r3
 80001ba:	4041      	eorgt	r1, r0
 80001bc:	4048      	eorgt	r0, r1
 80001be:	4041      	eorgt	r1, r0
 80001c0:	bfb8      	it	lt
 80001c2:	425b      	neglt	r3, r3
 80001c4:	2b19      	cmp	r3, #25
 80001c6:	bf88      	it	hi
 80001c8:	4770      	bxhi	lr
 80001ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4240      	negne	r0, r0
 80001da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001e6:	bf18      	it	ne
 80001e8:	4249      	negne	r1, r1
 80001ea:	ea92 0f03 	teq	r2, r3
 80001ee:	d03f      	beq.n	8000270 <__addsf3+0xd8>
 80001f0:	f1a2 0201 	sub.w	r2, r2, #1
 80001f4:	fa41 fc03 	asr.w	ip, r1, r3
 80001f8:	eb10 000c 	adds.w	r0, r0, ip
 80001fc:	f1c3 0320 	rsb	r3, r3, #32
 8000200:	fa01 f103 	lsl.w	r1, r1, r3
 8000204:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000208:	d502      	bpl.n	8000210 <__addsf3+0x78>
 800020a:	4249      	negs	r1, r1
 800020c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000210:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000214:	d313      	bcc.n	800023e <__addsf3+0xa6>
 8000216:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800021a:	d306      	bcc.n	800022a <__addsf3+0x92>
 800021c:	0840      	lsrs	r0, r0, #1
 800021e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000222:	f102 0201 	add.w	r2, r2, #1
 8000226:	2afe      	cmp	r2, #254	; 0xfe
 8000228:	d251      	bcs.n	80002ce <__addsf3+0x136>
 800022a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800022e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000232:	bf08      	it	eq
 8000234:	f020 0001 	biceq.w	r0, r0, #1
 8000238:	ea40 0003 	orr.w	r0, r0, r3
 800023c:	4770      	bx	lr
 800023e:	0049      	lsls	r1, r1, #1
 8000240:	eb40 0000 	adc.w	r0, r0, r0
 8000244:	3a01      	subs	r2, #1
 8000246:	bf28      	it	cs
 8000248:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800024c:	d2ed      	bcs.n	800022a <__addsf3+0x92>
 800024e:	fab0 fc80 	clz	ip, r0
 8000252:	f1ac 0c08 	sub.w	ip, ip, #8
 8000256:	ebb2 020c 	subs.w	r2, r2, ip
 800025a:	fa00 f00c 	lsl.w	r0, r0, ip
 800025e:	bfaa      	itet	ge
 8000260:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000264:	4252      	neglt	r2, r2
 8000266:	4318      	orrge	r0, r3
 8000268:	bfbc      	itt	lt
 800026a:	40d0      	lsrlt	r0, r2
 800026c:	4318      	orrlt	r0, r3
 800026e:	4770      	bx	lr
 8000270:	f092 0f00 	teq	r2, #0
 8000274:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000278:	bf06      	itte	eq
 800027a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800027e:	3201      	addeq	r2, #1
 8000280:	3b01      	subne	r3, #1
 8000282:	e7b5      	b.n	80001f0 <__addsf3+0x58>
 8000284:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000288:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800028c:	bf18      	it	ne
 800028e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000292:	d021      	beq.n	80002d8 <__addsf3+0x140>
 8000294:	ea92 0f03 	teq	r2, r3
 8000298:	d004      	beq.n	80002a4 <__addsf3+0x10c>
 800029a:	f092 0f00 	teq	r2, #0
 800029e:	bf08      	it	eq
 80002a0:	4608      	moveq	r0, r1
 80002a2:	4770      	bx	lr
 80002a4:	ea90 0f01 	teq	r0, r1
 80002a8:	bf1c      	itt	ne
 80002aa:	2000      	movne	r0, #0
 80002ac:	4770      	bxne	lr
 80002ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002b2:	d104      	bne.n	80002be <__addsf3+0x126>
 80002b4:	0040      	lsls	r0, r0, #1
 80002b6:	bf28      	it	cs
 80002b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002bc:	4770      	bx	lr
 80002be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002c2:	bf3c      	itt	cc
 80002c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002c8:	4770      	bxcc	lr
 80002ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d6:	4770      	bx	lr
 80002d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002dc:	bf16      	itet	ne
 80002de:	4608      	movne	r0, r1
 80002e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e4:	4601      	movne	r1, r0
 80002e6:	0242      	lsls	r2, r0, #9
 80002e8:	bf06      	itte	eq
 80002ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ee:	ea90 0f01 	teqeq	r0, r1
 80002f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002f6:	4770      	bx	lr

080002f8 <__aeabi_ui2f>:
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e004      	b.n	8000308 <__aeabi_i2f+0x8>
 80002fe:	bf00      	nop

08000300 <__aeabi_i2f>:
 8000300:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000304:	bf48      	it	mi
 8000306:	4240      	negmi	r0, r0
 8000308:	ea5f 0c00 	movs.w	ip, r0
 800030c:	bf08      	it	eq
 800030e:	4770      	bxeq	lr
 8000310:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000314:	4601      	mov	r1, r0
 8000316:	f04f 0000 	mov.w	r0, #0
 800031a:	e01c      	b.n	8000356 <__aeabi_l2f+0x2a>

0800031c <__aeabi_ul2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f04f 0300 	mov.w	r3, #0
 8000328:	e00a      	b.n	8000340 <__aeabi_l2f+0x14>
 800032a:	bf00      	nop

0800032c <__aeabi_l2f>:
 800032c:	ea50 0201 	orrs.w	r2, r0, r1
 8000330:	bf08      	it	eq
 8000332:	4770      	bxeq	lr
 8000334:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000338:	d502      	bpl.n	8000340 <__aeabi_l2f+0x14>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	ea5f 0c01 	movs.w	ip, r1
 8000344:	bf02      	ittt	eq
 8000346:	4684      	moveq	ip, r0
 8000348:	4601      	moveq	r1, r0
 800034a:	2000      	moveq	r0, #0
 800034c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000350:	bf08      	it	eq
 8000352:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000356:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800035a:	fabc f28c 	clz	r2, ip
 800035e:	3a08      	subs	r2, #8
 8000360:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000364:	db10      	blt.n	8000388 <__aeabi_l2f+0x5c>
 8000366:	fa01 fc02 	lsl.w	ip, r1, r2
 800036a:	4463      	add	r3, ip
 800036c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000370:	f1c2 0220 	rsb	r2, r2, #32
 8000374:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000378:	fa20 f202 	lsr.w	r2, r0, r2
 800037c:	eb43 0002 	adc.w	r0, r3, r2
 8000380:	bf08      	it	eq
 8000382:	f020 0001 	biceq.w	r0, r0, #1
 8000386:	4770      	bx	lr
 8000388:	f102 0220 	add.w	r2, r2, #32
 800038c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000390:	f1c2 0220 	rsb	r2, r2, #32
 8000394:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000398:	fa21 f202 	lsr.w	r2, r1, r2
 800039c:	eb43 0002 	adc.w	r0, r3, r2
 80003a0:	bf08      	it	eq
 80003a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003a6:	4770      	bx	lr

080003a8 <__aeabi_fmul>:
 80003a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003b0:	bf1e      	ittt	ne
 80003b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b6:	ea92 0f0c 	teqne	r2, ip
 80003ba:	ea93 0f0c 	teqne	r3, ip
 80003be:	d06f      	beq.n	80004a0 <__aeabi_fmul+0xf8>
 80003c0:	441a      	add	r2, r3
 80003c2:	ea80 0c01 	eor.w	ip, r0, r1
 80003c6:	0240      	lsls	r0, r0, #9
 80003c8:	bf18      	it	ne
 80003ca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ce:	d01e      	beq.n	800040e <__aeabi_fmul+0x66>
 80003d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003dc:	fba0 3101 	umull	r3, r1, r0, r1
 80003e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e8:	bf3e      	ittt	cc
 80003ea:	0049      	lslcc	r1, r1, #1
 80003ec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003f0:	005b      	lslcc	r3, r3, #1
 80003f2:	ea40 0001 	orr.w	r0, r0, r1
 80003f6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003fa:	2afd      	cmp	r2, #253	; 0xfd
 80003fc:	d81d      	bhi.n	800043a <__aeabi_fmul+0x92>
 80003fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000402:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000406:	bf08      	it	eq
 8000408:	f020 0001 	biceq.w	r0, r0, #1
 800040c:	4770      	bx	lr
 800040e:	f090 0f00 	teq	r0, #0
 8000412:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000416:	bf08      	it	eq
 8000418:	0249      	lsleq	r1, r1, #9
 800041a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000422:	3a7f      	subs	r2, #127	; 0x7f
 8000424:	bfc2      	ittt	gt
 8000426:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800042a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042e:	4770      	bxgt	lr
 8000430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	3a01      	subs	r2, #1
 800043a:	dc5d      	bgt.n	80004f8 <__aeabi_fmul+0x150>
 800043c:	f112 0f19 	cmn.w	r2, #25
 8000440:	bfdc      	itt	le
 8000442:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000446:	4770      	bxle	lr
 8000448:	f1c2 0200 	rsb	r2, r2, #0
 800044c:	0041      	lsls	r1, r0, #1
 800044e:	fa21 f102 	lsr.w	r1, r1, r2
 8000452:	f1c2 0220 	rsb	r2, r2, #32
 8000456:	fa00 fc02 	lsl.w	ip, r0, r2
 800045a:	ea5f 0031 	movs.w	r0, r1, rrx
 800045e:	f140 0000 	adc.w	r0, r0, #0
 8000462:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000466:	bf08      	it	eq
 8000468:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800046c:	4770      	bx	lr
 800046e:	f092 0f00 	teq	r2, #0
 8000472:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000476:	bf02      	ittt	eq
 8000478:	0040      	lsleq	r0, r0, #1
 800047a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047e:	3a01      	subeq	r2, #1
 8000480:	d0f9      	beq.n	8000476 <__aeabi_fmul+0xce>
 8000482:	ea40 000c 	orr.w	r0, r0, ip
 8000486:	f093 0f00 	teq	r3, #0
 800048a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048e:	bf02      	ittt	eq
 8000490:	0049      	lsleq	r1, r1, #1
 8000492:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000496:	3b01      	subeq	r3, #1
 8000498:	d0f9      	beq.n	800048e <__aeabi_fmul+0xe6>
 800049a:	ea41 010c 	orr.w	r1, r1, ip
 800049e:	e78f      	b.n	80003c0 <__aeabi_fmul+0x18>
 80004a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a4:	ea92 0f0c 	teq	r2, ip
 80004a8:	bf18      	it	ne
 80004aa:	ea93 0f0c 	teqne	r3, ip
 80004ae:	d00a      	beq.n	80004c6 <__aeabi_fmul+0x11e>
 80004b0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b4:	bf18      	it	ne
 80004b6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004ba:	d1d8      	bne.n	800046e <__aeabi_fmul+0xc6>
 80004bc:	ea80 0001 	eor.w	r0, r0, r1
 80004c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c4:	4770      	bx	lr
 80004c6:	f090 0f00 	teq	r0, #0
 80004ca:	bf17      	itett	ne
 80004cc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004d0:	4608      	moveq	r0, r1
 80004d2:	f091 0f00 	teqne	r1, #0
 80004d6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004da:	d014      	beq.n	8000506 <__aeabi_fmul+0x15e>
 80004dc:	ea92 0f0c 	teq	r2, ip
 80004e0:	d101      	bne.n	80004e6 <__aeabi_fmul+0x13e>
 80004e2:	0242      	lsls	r2, r0, #9
 80004e4:	d10f      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004e6:	ea93 0f0c 	teq	r3, ip
 80004ea:	d103      	bne.n	80004f4 <__aeabi_fmul+0x14c>
 80004ec:	024b      	lsls	r3, r1, #9
 80004ee:	bf18      	it	ne
 80004f0:	4608      	movne	r0, r1
 80004f2:	d108      	bne.n	8000506 <__aeabi_fmul+0x15e>
 80004f4:	ea80 0001 	eor.w	r0, r0, r1
 80004f8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000504:	4770      	bx	lr
 8000506:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800050a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050e:	4770      	bx	lr

08000510 <__aeabi_fdiv>:
 8000510:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000514:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000518:	bf1e      	ittt	ne
 800051a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800051e:	ea92 0f0c 	teqne	r2, ip
 8000522:	ea93 0f0c 	teqne	r3, ip
 8000526:	d069      	beq.n	80005fc <__aeabi_fdiv+0xec>
 8000528:	eba2 0203 	sub.w	r2, r2, r3
 800052c:	ea80 0c01 	eor.w	ip, r0, r1
 8000530:	0249      	lsls	r1, r1, #9
 8000532:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000536:	d037      	beq.n	80005a8 <__aeabi_fdiv+0x98>
 8000538:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800053c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000540:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000544:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000548:	428b      	cmp	r3, r1
 800054a:	bf38      	it	cc
 800054c:	005b      	lslcc	r3, r3, #1
 800054e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000552:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000556:	428b      	cmp	r3, r1
 8000558:	bf24      	itt	cs
 800055a:	1a5b      	subcs	r3, r3, r1
 800055c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000560:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000564:	bf24      	itt	cs
 8000566:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800056a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800056e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000572:	bf24      	itt	cs
 8000574:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000578:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800057c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000580:	bf24      	itt	cs
 8000582:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000586:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	bf18      	it	ne
 800058e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000592:	d1e0      	bne.n	8000556 <__aeabi_fdiv+0x46>
 8000594:	2afd      	cmp	r2, #253	; 0xfd
 8000596:	f63f af50 	bhi.w	800043a <__aeabi_fmul+0x92>
 800059a:	428b      	cmp	r3, r1
 800059c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005ac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005b0:	327f      	adds	r2, #127	; 0x7f
 80005b2:	bfc2      	ittt	gt
 80005b4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005b8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005bc:	4770      	bxgt	lr
 80005be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	3a01      	subs	r2, #1
 80005c8:	e737      	b.n	800043a <__aeabi_fmul+0x92>
 80005ca:	f092 0f00 	teq	r2, #0
 80005ce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005d2:	bf02      	ittt	eq
 80005d4:	0040      	lsleq	r0, r0, #1
 80005d6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005da:	3a01      	subeq	r2, #1
 80005dc:	d0f9      	beq.n	80005d2 <__aeabi_fdiv+0xc2>
 80005de:	ea40 000c 	orr.w	r0, r0, ip
 80005e2:	f093 0f00 	teq	r3, #0
 80005e6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ea:	bf02      	ittt	eq
 80005ec:	0049      	lsleq	r1, r1, #1
 80005ee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005f2:	3b01      	subeq	r3, #1
 80005f4:	d0f9      	beq.n	80005ea <__aeabi_fdiv+0xda>
 80005f6:	ea41 010c 	orr.w	r1, r1, ip
 80005fa:	e795      	b.n	8000528 <__aeabi_fdiv+0x18>
 80005fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000600:	ea92 0f0c 	teq	r2, ip
 8000604:	d108      	bne.n	8000618 <__aeabi_fdiv+0x108>
 8000606:	0242      	lsls	r2, r0, #9
 8000608:	f47f af7d 	bne.w	8000506 <__aeabi_fmul+0x15e>
 800060c:	ea93 0f0c 	teq	r3, ip
 8000610:	f47f af70 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 8000614:	4608      	mov	r0, r1
 8000616:	e776      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000618:	ea93 0f0c 	teq	r3, ip
 800061c:	d104      	bne.n	8000628 <__aeabi_fdiv+0x118>
 800061e:	024b      	lsls	r3, r1, #9
 8000620:	f43f af4c 	beq.w	80004bc <__aeabi_fmul+0x114>
 8000624:	4608      	mov	r0, r1
 8000626:	e76e      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000628:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800062c:	bf18      	it	ne
 800062e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000632:	d1ca      	bne.n	80005ca <__aeabi_fdiv+0xba>
 8000634:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000638:	f47f af5c 	bne.w	80004f4 <__aeabi_fmul+0x14c>
 800063c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000640:	f47f af3c 	bne.w	80004bc <__aeabi_fmul+0x114>
 8000644:	e75f      	b.n	8000506 <__aeabi_fmul+0x15e>
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9e08      	ldr	r6, [sp, #32]
 800067e:	460d      	mov	r5, r1
 8000680:	4604      	mov	r4, r0
 8000682:	468e      	mov	lr, r1
 8000684:	2b00      	cmp	r3, #0
 8000686:	f040 8083 	bne.w	8000790 <__udivmoddi4+0x118>
 800068a:	428a      	cmp	r2, r1
 800068c:	4617      	mov	r7, r2
 800068e:	d947      	bls.n	8000720 <__udivmoddi4+0xa8>
 8000690:	fab2 f382 	clz	r3, r2
 8000694:	b14b      	cbz	r3, 80006aa <__udivmoddi4+0x32>
 8000696:	f1c3 0120 	rsb	r1, r3, #32
 800069a:	fa05 fe03 	lsl.w	lr, r5, r3
 800069e:	fa20 f101 	lsr.w	r1, r0, r1
 80006a2:	409f      	lsls	r7, r3
 80006a4:	ea41 0e0e 	orr.w	lr, r1, lr
 80006a8:	409c      	lsls	r4, r3
 80006aa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006ae:	fbbe fcf8 	udiv	ip, lr, r8
 80006b2:	fa1f f987 	uxth.w	r9, r7
 80006b6:	fb08 e21c 	mls	r2, r8, ip, lr
 80006ba:	fb0c f009 	mul.w	r0, ip, r9
 80006be:	0c21      	lsrs	r1, r4, #16
 80006c0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80006c4:	4290      	cmp	r0, r2
 80006c6:	d90a      	bls.n	80006de <__udivmoddi4+0x66>
 80006c8:	18ba      	adds	r2, r7, r2
 80006ca:	f10c 31ff 	add.w	r1, ip, #4294967295
 80006ce:	f080 8118 	bcs.w	8000902 <__udivmoddi4+0x28a>
 80006d2:	4290      	cmp	r0, r2
 80006d4:	f240 8115 	bls.w	8000902 <__udivmoddi4+0x28a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	443a      	add	r2, r7
 80006de:	1a12      	subs	r2, r2, r0
 80006e0:	fbb2 f0f8 	udiv	r0, r2, r8
 80006e4:	fb08 2210 	mls	r2, r8, r0, r2
 80006e8:	fb00 f109 	mul.w	r1, r0, r9
 80006ec:	b2a4      	uxth	r4, r4
 80006ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006f2:	42a1      	cmp	r1, r4
 80006f4:	d909      	bls.n	800070a <__udivmoddi4+0x92>
 80006f6:	193c      	adds	r4, r7, r4
 80006f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80006fc:	f080 8103 	bcs.w	8000906 <__udivmoddi4+0x28e>
 8000700:	42a1      	cmp	r1, r4
 8000702:	f240 8100 	bls.w	8000906 <__udivmoddi4+0x28e>
 8000706:	3802      	subs	r0, #2
 8000708:	443c      	add	r4, r7
 800070a:	1a64      	subs	r4, r4, r1
 800070c:	2100      	movs	r1, #0
 800070e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000712:	b11e      	cbz	r6, 800071c <__udivmoddi4+0xa4>
 8000714:	2200      	movs	r2, #0
 8000716:	40dc      	lsrs	r4, r3
 8000718:	e9c6 4200 	strd	r4, r2, [r6]
 800071c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000720:	b902      	cbnz	r2, 8000724 <__udivmoddi4+0xac>
 8000722:	deff      	udf	#255	; 0xff
 8000724:	fab2 f382 	clz	r3, r2
 8000728:	2b00      	cmp	r3, #0
 800072a:	d14f      	bne.n	80007cc <__udivmoddi4+0x154>
 800072c:	1a8d      	subs	r5, r1, r2
 800072e:	2101      	movs	r1, #1
 8000730:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000734:	fa1f f882 	uxth.w	r8, r2
 8000738:	fbb5 fcfe 	udiv	ip, r5, lr
 800073c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000740:	fb08 f00c 	mul.w	r0, r8, ip
 8000744:	0c22      	lsrs	r2, r4, #16
 8000746:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800074a:	42a8      	cmp	r0, r5
 800074c:	d907      	bls.n	800075e <__udivmoddi4+0xe6>
 800074e:	197d      	adds	r5, r7, r5
 8000750:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000754:	d202      	bcs.n	800075c <__udivmoddi4+0xe4>
 8000756:	42a8      	cmp	r0, r5
 8000758:	f200 80e9 	bhi.w	800092e <__udivmoddi4+0x2b6>
 800075c:	4694      	mov	ip, r2
 800075e:	1a2d      	subs	r5, r5, r0
 8000760:	fbb5 f0fe 	udiv	r0, r5, lr
 8000764:	fb0e 5510 	mls	r5, lr, r0, r5
 8000768:	fb08 f800 	mul.w	r8, r8, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000772:	45a0      	cmp	r8, r4
 8000774:	d907      	bls.n	8000786 <__udivmoddi4+0x10e>
 8000776:	193c      	adds	r4, r7, r4
 8000778:	f100 32ff 	add.w	r2, r0, #4294967295
 800077c:	d202      	bcs.n	8000784 <__udivmoddi4+0x10c>
 800077e:	45a0      	cmp	r8, r4
 8000780:	f200 80d9 	bhi.w	8000936 <__udivmoddi4+0x2be>
 8000784:	4610      	mov	r0, r2
 8000786:	eba4 0408 	sub.w	r4, r4, r8
 800078a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078e:	e7c0      	b.n	8000712 <__udivmoddi4+0x9a>
 8000790:	428b      	cmp	r3, r1
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000794:	2e00      	cmp	r6, #0
 8000796:	f000 80b1 	beq.w	80008fc <__udivmoddi4+0x284>
 800079a:	2100      	movs	r1, #0
 800079c:	e9c6 0500 	strd	r0, r5, [r6]
 80007a0:	4608      	mov	r0, r1
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f183 	clz	r1, r3
 80007aa:	2900      	cmp	r1, #0
 80007ac:	d14b      	bne.n	8000846 <__udivmoddi4+0x1ce>
 80007ae:	42ab      	cmp	r3, r5
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b9 	bhi.w	800092a <__udivmoddi4+0x2b2>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb65 0303 	sbc.w	r3, r5, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	469e      	mov	lr, r3
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d0aa      	beq.n	800071c <__udivmoddi4+0xa4>
 80007c6:	e9c6 4e00 	strd	r4, lr, [r6]
 80007ca:	e7a7      	b.n	800071c <__udivmoddi4+0xa4>
 80007cc:	409f      	lsls	r7, r3
 80007ce:	f1c3 0220 	rsb	r2, r3, #32
 80007d2:	40d1      	lsrs	r1, r2
 80007d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80007dc:	fa1f f887 	uxth.w	r8, r7
 80007e0:	fb0e 1110 	mls	r1, lr, r0, r1
 80007e4:	fa24 f202 	lsr.w	r2, r4, r2
 80007e8:	409d      	lsls	r5, r3
 80007ea:	fb00 fc08 	mul.w	ip, r0, r8
 80007ee:	432a      	orrs	r2, r5
 80007f0:	0c15      	lsrs	r5, r2, #16
 80007f2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80007f6:	45ac      	cmp	ip, r5
 80007f8:	fa04 f403 	lsl.w	r4, r4, r3
 80007fc:	d909      	bls.n	8000812 <__udivmoddi4+0x19a>
 80007fe:	197d      	adds	r5, r7, r5
 8000800:	f100 31ff 	add.w	r1, r0, #4294967295
 8000804:	f080 808f 	bcs.w	8000926 <__udivmoddi4+0x2ae>
 8000808:	45ac      	cmp	ip, r5
 800080a:	f240 808c 	bls.w	8000926 <__udivmoddi4+0x2ae>
 800080e:	3802      	subs	r0, #2
 8000810:	443d      	add	r5, r7
 8000812:	eba5 050c 	sub.w	r5, r5, ip
 8000816:	fbb5 f1fe 	udiv	r1, r5, lr
 800081a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800081e:	fb01 f908 	mul.w	r9, r1, r8
 8000822:	b295      	uxth	r5, r2
 8000824:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000828:	45a9      	cmp	r9, r5
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	197d      	adds	r5, r7, r5
 800082e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000832:	d274      	bcs.n	800091e <__udivmoddi4+0x2a6>
 8000834:	45a9      	cmp	r9, r5
 8000836:	d972      	bls.n	800091e <__udivmoddi4+0x2a6>
 8000838:	3902      	subs	r1, #2
 800083a:	443d      	add	r5, r7
 800083c:	eba5 0509 	sub.w	r5, r5, r9
 8000840:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000844:	e778      	b.n	8000738 <__udivmoddi4+0xc0>
 8000846:	f1c1 0720 	rsb	r7, r1, #32
 800084a:	408b      	lsls	r3, r1
 800084c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000850:	ea4c 0c03 	orr.w	ip, ip, r3
 8000854:	fa25 f407 	lsr.w	r4, r5, r7
 8000858:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800085c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000860:	fa1f f88c 	uxth.w	r8, ip
 8000864:	fb0e 4419 	mls	r4, lr, r9, r4
 8000868:	fa20 f307 	lsr.w	r3, r0, r7
 800086c:	fb09 fa08 	mul.w	sl, r9, r8
 8000870:	408d      	lsls	r5, r1
 8000872:	431d      	orrs	r5, r3
 8000874:	0c2b      	lsrs	r3, r5, #16
 8000876:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800087a:	45a2      	cmp	sl, r4
 800087c:	fa02 f201 	lsl.w	r2, r2, r1
 8000880:	fa00 f301 	lsl.w	r3, r0, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0x222>
 8000886:	eb1c 0404 	adds.w	r4, ip, r4
 800088a:	f109 30ff 	add.w	r0, r9, #4294967295
 800088e:	d248      	bcs.n	8000922 <__udivmoddi4+0x2aa>
 8000890:	45a2      	cmp	sl, r4
 8000892:	d946      	bls.n	8000922 <__udivmoddi4+0x2aa>
 8000894:	f1a9 0902 	sub.w	r9, r9, #2
 8000898:	4464      	add	r4, ip
 800089a:	eba4 040a 	sub.w	r4, r4, sl
 800089e:	fbb4 f0fe 	udiv	r0, r4, lr
 80008a2:	fb0e 4410 	mls	r4, lr, r0, r4
 80008a6:	fb00 fa08 	mul.w	sl, r0, r8
 80008aa:	b2ad      	uxth	r5, r5
 80008ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008b0:	45a2      	cmp	sl, r4
 80008b2:	d908      	bls.n	80008c6 <__udivmoddi4+0x24e>
 80008b4:	eb1c 0404 	adds.w	r4, ip, r4
 80008b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80008bc:	d22d      	bcs.n	800091a <__udivmoddi4+0x2a2>
 80008be:	45a2      	cmp	sl, r4
 80008c0:	d92b      	bls.n	800091a <__udivmoddi4+0x2a2>
 80008c2:	3802      	subs	r0, #2
 80008c4:	4464      	add	r4, ip
 80008c6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	eba4 040a 	sub.w	r4, r4, sl
 80008d2:	454c      	cmp	r4, r9
 80008d4:	46c6      	mov	lr, r8
 80008d6:	464d      	mov	r5, r9
 80008d8:	d319      	bcc.n	800090e <__udivmoddi4+0x296>
 80008da:	d016      	beq.n	800090a <__udivmoddi4+0x292>
 80008dc:	b15e      	cbz	r6, 80008f6 <__udivmoddi4+0x27e>
 80008de:	ebb3 020e 	subs.w	r2, r3, lr
 80008e2:	eb64 0405 	sbc.w	r4, r4, r5
 80008e6:	fa04 f707 	lsl.w	r7, r4, r7
 80008ea:	fa22 f301 	lsr.w	r3, r2, r1
 80008ee:	431f      	orrs	r7, r3
 80008f0:	40cc      	lsrs	r4, r1
 80008f2:	e9c6 7400 	strd	r7, r4, [r6]
 80008f6:	2100      	movs	r1, #0
 80008f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fc:	4631      	mov	r1, r6
 80008fe:	4630      	mov	r0, r6
 8000900:	e70c      	b.n	800071c <__udivmoddi4+0xa4>
 8000902:	468c      	mov	ip, r1
 8000904:	e6eb      	b.n	80006de <__udivmoddi4+0x66>
 8000906:	4610      	mov	r0, r2
 8000908:	e6ff      	b.n	800070a <__udivmoddi4+0x92>
 800090a:	4543      	cmp	r3, r8
 800090c:	d2e6      	bcs.n	80008dc <__udivmoddi4+0x264>
 800090e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000912:	eb69 050c 	sbc.w	r5, r9, ip
 8000916:	3801      	subs	r0, #1
 8000918:	e7e0      	b.n	80008dc <__udivmoddi4+0x264>
 800091a:	4628      	mov	r0, r5
 800091c:	e7d3      	b.n	80008c6 <__udivmoddi4+0x24e>
 800091e:	4611      	mov	r1, r2
 8000920:	e78c      	b.n	800083c <__udivmoddi4+0x1c4>
 8000922:	4681      	mov	r9, r0
 8000924:	e7b9      	b.n	800089a <__udivmoddi4+0x222>
 8000926:	4608      	mov	r0, r1
 8000928:	e773      	b.n	8000812 <__udivmoddi4+0x19a>
 800092a:	4608      	mov	r0, r1
 800092c:	e749      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000932:	443d      	add	r5, r7
 8000934:	e713      	b.n	800075e <__udivmoddi4+0xe6>
 8000936:	3802      	subs	r0, #2
 8000938:	443c      	add	r4, r7
 800093a:	e724      	b.n	8000786 <__udivmoddi4+0x10e>

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000950:	4b43      	ldr	r3, [pc, #268]	; (8000a60 <MX_ADC_Init+0x120>)
 8000952:	4a44      	ldr	r2, [pc, #272]	; (8000a64 <MX_ADC_Init+0x124>)
 8000954:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <MX_ADC_Init+0x120>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800095c:	4b40      	ldr	r3, [pc, #256]	; (8000a60 <MX_ADC_Init+0x120>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000962:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <MX_ADC_Init+0x120>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <MX_ADC_Init+0x120>)
 800096a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000970:	4b3b      	ldr	r3, [pc, #236]	; (8000a60 <MX_ADC_Init+0x120>)
 8000972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000976:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <MX_ADC_Init+0x120>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800097e:	4b38      	ldr	r3, [pc, #224]	; (8000a60 <MX_ADC_Init+0x120>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000984:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <MX_ADC_Init+0x120>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800098a:	4b35      	ldr	r3, [pc, #212]	; (8000a60 <MX_ADC_Init+0x120>)
 800098c:	2200      	movs	r2, #0
 800098e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 5;
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <MX_ADC_Init+0x120>)
 8000994:	2205      	movs	r2, #5
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <MX_ADC_Init+0x120>)
 800099a:	2200      	movs	r2, #0
 800099c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_ADC_Init+0x120>)
 80009a2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_ADC_Init+0x120>)
 80009aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_ADC_Init+0x120>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80009b8:	4829      	ldr	r0, [pc, #164]	; (8000a60 <MX_ADC_Init+0x120>)
 80009ba:	f000 fedf 	bl	800177c <HAL_ADC_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 80009c4:	f000 fac0 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009cc:	2301      	movs	r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 80009d0:	2306      	movs	r3, #6
 80009d2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4821      	ldr	r0, [pc, #132]	; (8000a60 <MX_ADC_Init+0x120>)
 80009da:	f001 f8b5 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 80009e4:	f000 fab0 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <MX_ADC_Init+0x120>)
 80009f6:	f001 f8a7 	bl	8001b48 <HAL_ADC_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC_Init+0xc4>
  {
    Error_Handler();
 8000a00:	f000 faa2 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a04:	2305      	movs	r3, #5
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4813      	ldr	r0, [pc, #76]	; (8000a60 <MX_ADC_Init+0x120>)
 8000a12:	f001 f899 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC_Init+0xe0>
  {
    Error_Handler();
 8000a1c:	f000 fa94 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a20:	2310      	movs	r3, #16
 8000a22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_ADC_Init+0x120>)
 8000a2e:	f001 f88b 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC_Init+0xfc>
  {
    Error_Handler();
 8000a38:	f000 fa86 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a3c:	2311      	movs	r3, #17
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a40:	2305      	movs	r3, #5
 8000a42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_ADC_Init+0x120>)
 8000a4a:	f001 f87d 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC_Init+0x118>
  {
    Error_Handler();
 8000a54:	f000 fa78 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000e4 	.word	0x200000e4
 8000a64:	40012400 	.word	0x40012400

08000a68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <HAL_ADC_MspInit+0xc4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d14b      	bne.n	8000b22 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <HAL_ADC_MspInit+0xc8>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <HAL_ADC_MspInit+0xc8>)
 8000a90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a94:	6213      	str	r3, [r2, #32]
 8000a96:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <HAL_ADC_MspInit+0xc8>)
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b23      	ldr	r3, [pc, #140]	; (8000b30 <HAL_ADC_MspInit+0xc8>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_ADC_MspInit+0xc8>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_ADC_MspInit+0xc8>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin|ADC_FLOW_Pin|ADC_TRIMPOT_Pin;
 8000aba:	2338      	movs	r3, #56	; 0x38
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4819      	ldr	r0, [pc, #100]	; (8000b34 <HAL_ADC_MspInit+0xcc>)
 8000ace:	f001 fd85 	bl	80025dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ad2:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000ad4:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_ADC_MspInit+0xd4>)
 8000ad6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000aea:	4b13      	ldr	r3, [pc, #76]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000afc:	2220      	movs	r2, #32
 8000afe:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000b08:	f001 fb54 	bl	80021b4 <HAL_DMA_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8000b12:	f000 fa19 	bl	8000f48 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000b1a:	645a      	str	r2, [r3, #68]	; 0x44
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_ADC_MspInit+0xd0>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40012400 	.word	0x40012400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	200000a0 	.word	0x200000a0
 8000b3c:	40026008 	.word	0x40026008

08000b40 <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{	// Conversions have finished
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 0);
	flag_EOC = 1;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x18>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000091 	.word	0x20000091

08000b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_DMA_Init+0x38>)
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <MX_DMA_Init+0x38>)
 8000b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b6c:	61d3      	str	r3, [r2, #28]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_DMA_Init+0x38>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	200b      	movs	r0, #11
 8000b80:	f001 fae1 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b84:	200b      	movs	r0, #11
 8000b86:	f001 fafa 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b31      	ldr	r3, [pc, #196]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a30      	ldr	r2, [pc, #192]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	61d3      	str	r3, [r2, #28]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000be4:	f043 0302 	orr.w	r3, r3, #2
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_GPIO_Init+0xdc>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	481f      	ldr	r0, [pc, #124]	; (8000c78 <MX_GPIO_Init+0xe0>)
 8000bfc:	f001 fe85 	bl	800290a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2180      	movs	r1, #128	; 0x80
 8000c04:	481d      	ldr	r0, [pc, #116]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000c06:	f001 fe80 	bl	800290a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_TEST_Pin;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OUT_TEST_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4815      	ldr	r0, [pc, #84]	; (8000c78 <MX_GPIO_Init+0xe0>)
 8000c22:	f001 fcdb 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c2a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_GPIO_Init+0xe8>)
 8000c3c:	f001 fcce 	bl	80025dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <MX_GPIO_Init+0xe4>)
 8000c58:	f001 fcc0 	bl	80025dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2100      	movs	r1, #0
 8000c60:	2006      	movs	r0, #6
 8000c62:	f001 fa70 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c66:	2006      	movs	r0, #6
 8000c68:	f001 fa89 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40020000 	.word	0x40020000

08000c84 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_USER_Pin)		// When edge is detected,
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d102      	bne.n	8000c9a <HAL_GPIO_EXTI_Callback+0x16>
	{									//	Timer 6 starts, for button debounce
		//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 1);
		HAL_TIM_Base_Start_IT(&htim6);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <HAL_GPIO_EXTI_Callback+0x20>)
 8000c96:	f002 fc63 	bl	8003560 <HAL_TIM_Base_Start_IT>
	}
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000178 	.word	0x20000178

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b08d      	sub	sp, #52	; 0x34
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	enum operation_mode op_mode = mode_manual;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t pulse = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	85bb      	strh	r3, [r7, #44]	; 0x2c

	volatile uint16_t ADC_counts[ADC_ACTIVE_CHANNELS];
	float ADC_voltages[ADC_ACTIVE_CHANNELS];
	uint16_t ADC_mV[ADC_ACTIVE_CHANNELS];

	uint16_t i = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	857b      	strh	r3, [r7, #42]	; 0x2a
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fccd 	bl	800165a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f8f4 	bl	8000eac <SystemClock_Config>
//  MX_DMA_Init();
//  MX_USART1_UART_Init();
//  MX_TIM2_Init();
//  /* USER CODE BEGIN 2 */

	MX_GPIO_Init();
 8000cc4:	f7ff ff68 	bl	8000b98 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000cc8:	f000 fa14 	bl	80010f4 <MX_TIM2_Init>
	MX_TIM4_Init();
 8000ccc:	f000 fa60 	bl	8001190 <MX_TIM4_Init>
	MX_TIM6_Init();
 8000cd0:	f000 fad2 	bl	8001278 <MX_TIM6_Init>
	MX_DMA_Init();
 8000cd4:	f7ff ff42 	bl	8000b5c <MX_DMA_Init>
	MX_ADC_Init();
 8000cd8:	f7ff fe32 	bl	8000940 <MX_ADC_Init>
	MX_USART1_UART_Init();
 8000cdc:	f000 fbee 	bl	80014bc <MX_USART1_UART_Init>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Timer 4 for PWM generation
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4863      	ldr	r0, [pc, #396]	; (8000e70 <main+0x1c8>)
 8000ce4:	f002 fcfc 	bl	80036e0 <HAL_TIM_PWM_Start>
	//HAL_TIM_Base_Start_IT(&htim7);				// Timer 7 for sampling period

	HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_counts, ADC_ACTIVE_CHANNELS);
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	2205      	movs	r2, #5
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4860      	ldr	r0, [pc, #384]	; (8000e74 <main+0x1cc>)
 8000cf2:	f000 fe89 	bl	8001a08 <HAL_ADC_Start_DMA>

	sprintf(tx_buffer, "Smart Micro Pump\n");
 8000cf6:	4960      	ldr	r1, [pc, #384]	; (8000e78 <main+0x1d0>)
 8000cf8:	4860      	ldr	r0, [pc, #384]	; (8000e7c <main+0x1d4>)
 8000cfa:	f004 f839 	bl	8004d70 <siprintf>
	UART_TX(tx_buffer);
 8000cfe:	485f      	ldr	r0, [pc, #380]	; (8000e7c <main+0x1d4>)
 8000d00:	f000 fc52 	bl	80015a8 <UART_TX>
	UART_RX(rx_buffer);
 8000d04:	485e      	ldr	r0, [pc, #376]	; (8000e80 <main+0x1d8>)
 8000d06:	f000 fc65 	bl	80015d4 <UART_RX>
    /* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		//HAL_Delay(500);

		// Mode selection via user button (Manual/Auto)
		if (debouncedButtonPressed != 0)	// User button selects between
 8000d0a:	4b5e      	ldr	r3, [pc, #376]	; (8000e84 <main+0x1dc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01b      	beq.n	8000d4c <main+0xa4>
		{									// Manual and Auto modes
			if (op_mode == mode_manual)
 8000d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d108      	bne.n	8000d2e <main+0x86>
			{
				op_mode = mode_auto;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	4858      	ldr	r0, [pc, #352]	; (8000e88 <main+0x1e0>)
 8000d28:	f001 fdef 	bl	800290a <HAL_GPIO_WritePin>
 8000d2c:	e00b      	b.n	8000d46 <main+0x9e>
			}
			else if (op_mode == mode_auto)
 8000d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d107      	bne.n	8000d46 <main+0x9e>
			{
				op_mode = mode_manual;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2180      	movs	r1, #128	; 0x80
 8000d40:	4851      	ldr	r0, [pc, #324]	; (8000e88 <main+0x1e0>)
 8000d42:	f001 fde2 	bl	800290a <HAL_GPIO_WritePin>
			}
			debouncedButtonPressed = 0;
 8000d46:	4b4f      	ldr	r3, [pc, #316]	; (8000e84 <main+0x1dc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
//		if (debouncedButtonReleased != 0)	// Interrupts are also generated when
//		{									// button is released
//			debouncedButtonReleased = 0;
//		}

		if (op_mode == mode_manual)			// Manual mode:
 8000d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d11a      	bne.n	8000d8a <main+0xe2>
		{									// PWM duty cycle is set based on
											// trimpot value read by the ADC
			// To do

			HAL_TIM_Base_Stop(&htim2);
 8000d54:	484d      	ldr	r0, [pc, #308]	; (8000e8c <main+0x1e4>)
 8000d56:	f002 fbe4 	bl	8003522 <HAL_TIM_Base_Stop>
			HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_counts, ADC_ACTIVE_CHANNELS);
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	2205      	movs	r2, #5
 8000d60:	4619      	mov	r1, r3
 8000d62:	4844      	ldr	r0, [pc, #272]	; (8000e74 <main+0x1cc>)
 8000d64:	f000 fe50 	bl	8001a08 <HAL_ADC_Start_DMA>

			pulse++;				// Pulse Width sweep to test PWM generation
 8000d68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
			if (pulse == 1000)
 8000d6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d74:	d101      	bne.n	8000d7a <main+0xd2>
			{
				pulse = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}

			PWM_setPulse(pulse);	// Updates duty cycle
 8000d7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 f8e9 	bl	8000f54 <PWM_setPulse>
			HAL_Delay(5);
 8000d82:	2005      	movs	r0, #5
 8000d84:	f000 fcd8 	bl	8001738 <HAL_Delay>
 8000d88:	e7bf      	b.n	8000d0a <main+0x62>
		}
		else if (op_mode == mode_auto)
 8000d8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d1bb      	bne.n	8000d0a <main+0x62>
		{
			// To do

			HAL_TIM_Base_Start_IT(&htim2);				// Timer 2 for sampling period
 8000d92:	483e      	ldr	r0, [pc, #248]	; (8000e8c <main+0x1e4>)
 8000d94:	f002 fbe4 	bl	8003560 <HAL_TIM_Base_Start_IT>
//				//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 0);
//
//				flag_dt = 0;
//			}

			if (flag_EOC != 0)	// Sampling time (dt) = 10ms (fS = 100 Hz)
 8000d98:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <main+0x1e8>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d0b3      	beq.n	8000d0a <main+0x62>
			{
				flag_EOC = 0;
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <main+0x1e8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]

				for (i = 0; i < ADC_ACTIVE_CHANNELS; i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000dac:	e03c      	b.n	8000e28 <main+0x180>
				{
					ADC_voltages[i] = ADC_counts[i] * ADC_V_REF / ADC_MAX_COUNTS;
 8000dae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000db6:	4413      	add	r3, r2
 8000db8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fa9e 	bl	8000300 <__aeabi_i2f>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4933      	ldr	r1, [pc, #204]	; (8000e94 <main+0x1ec>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff faed 	bl	80003a8 <__aeabi_fmul>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8000dd2:	4931      	ldr	r1, [pc, #196]	; (8000e98 <main+0x1f0>)
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fb9b 	bl	8000510 <__aeabi_fdiv>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	461a      	mov	r2, r3
 8000dde:	00a3      	lsls	r3, r4, #2
 8000de0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000de4:	440b      	add	r3, r1
 8000de6:	f843 2c24 	str.w	r2, [r3, #-36]
					ADC_mV[i] = (ADC_counts[i] * ADC_V_REF_mV) / ADC_MAX_COUNTS;
 8000dea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000df2:	4413      	add	r3, r2
 8000df4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e00:	fb03 f302 	mul.w	r3, r3, r2
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <main+0x1f4>)
 8000e06:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0a:	441a      	add	r2, r3
 8000e0c:	12d2      	asrs	r2, r2, #11
 8000e0e:	17db      	asrs	r3, r3, #31
 8000e10:	1ad2      	subs	r2, r2, r3
 8000e12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e14:	b292      	uxth	r2, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000e1c:	440b      	add	r3, r1
 8000e1e:	f823 2c30 	strh.w	r2, [r3, #-48]
				for (i = 0; i < ADC_ACTIVE_CHANNELS; i++)
 8000e22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e24:	3301      	adds	r3, #1
 8000e26:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000e28:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	d9bf      	bls.n	8000dae <main+0x106>
				}
				HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2101      	movs	r1, #1
 8000e32:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <main+0x1f8>)
 8000e34:	f001 fd69 	bl	800290a <HAL_GPIO_WritePin>
//
//				// Update pump drive level (PWM)
//
				// Send data (UART)
				sprintf(tx_buffer, "Trimpot: %d.%d V \n",
									(ADC_mV[2] / 1000),
 8000e38:	88bb      	ldrh	r3, [r7, #4]
				sprintf(tx_buffer, "Trimpot: %d.%d V \n",
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <main+0x1fc>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	099b      	lsrs	r3, r3, #6
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	4618      	mov	r0, r3
									(ADC_mV[2] % 1000));
 8000e46:	88bb      	ldrh	r3, [r7, #4]
				sprintf(tx_buffer, "Trimpot: %d.%d V \n",
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <main+0x1fc>)
 8000e4a:	fba2 1203 	umull	r1, r2, r2, r3
 8000e4e:	0992      	lsrs	r2, r2, #6
 8000e50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e54:	fb01 f202 	mul.w	r2, r1, r2
 8000e58:	1a9b      	subs	r3, r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	4912      	ldr	r1, [pc, #72]	; (8000ea8 <main+0x200>)
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <main+0x1d4>)
 8000e62:	f003 ff85 	bl	8004d70 <siprintf>
				UART_TX(tx_buffer);
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <main+0x1d4>)
 8000e68:	f000 fb9e 	bl	80015a8 <UART_TX>
		if (debouncedButtonPressed != 0)	// User button selects between
 8000e6c:	e74d      	b.n	8000d0a <main+0x62>
 8000e6e:	bf00      	nop
 8000e70:	20000138 	.word	0x20000138
 8000e74:	200000e4 	.word	0x200000e4
 8000e78:	080055fc 	.word	0x080055fc
 8000e7c:	20000218 	.word	0x20000218
 8000e80:	200001f8 	.word	0x200001f8
 8000e84:	2000008f 	.word	0x2000008f
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	200001b8 	.word	0x200001b8
 8000e90:	20000091 	.word	0x20000091
 8000e94:	40400000 	.word	0x40400000
 8000e98:	457ff000 	.word	0x457ff000
 8000e9c:	80080081 	.word	0x80080081
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	10624dd3 	.word	0x10624dd3
 8000ea8:	08005610 	.word	0x08005610

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b092      	sub	sp, #72	; 0x48
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2234      	movs	r2, #52	; 0x34
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 ff50 	bl	8004d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <SystemClock_Config+0x98>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000ed6:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <SystemClock_Config+0x98>)
 8000ed8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000edc:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee6:	2310      	movs	r3, #16
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ef2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000ef8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000efc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 fd32 	bl	800296c <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f0e:	f000 f81b 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2303      	movs	r3, #3
 8000f18:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 f84e 	bl	8002fcc <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f36:	f000 f807 	bl	8000f48 <Error_Handler>
  }
}
 8000f3a:	bf00      	nop
 8000f3c:	3748      	adds	r7, #72	; 0x48
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40007000 	.word	0x40007000

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <PWM_setPulse>:
 *      Author: Andre
 */
#include "tim.h"

void PWM_setPulse(uint16_t per_mille)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, per_mille);
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <PWM_setPulse+0x1c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	88fa      	ldrh	r2, [r7, #6]
 8000f64:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000138 	.word	0x20000138

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_MspInit+0x58>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_MspInit+0x58>)
 8000f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f84:	6253      	str	r3, [r2, #36]	; 0x24
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <HAL_MspInit+0x58>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_MspInit+0x58>)
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_MspInit+0x58>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6213      	str	r3, [r2, #32]
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_MspInit+0x58>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_MspInit+0x58>)
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_MspInit+0x58>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6253      	str	r3, [r2, #36]	; 0x24
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <HAL_MspInit+0x58>)
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <UsageFault_Handler+0x4>

08000fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr

08000ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr

08001012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001016:	f000 fb73 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}

0800101e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OUT_TEST_Pin);
 8001022:	2001      	movs	r0, #1
 8001024:	f001 fc8a 	bl	800293c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA1_Channel1_IRQHandler+0x10>)
 8001032:	f001 f9f5 	bl	8002420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000a0 	.word	0x200000a0

08001040 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <TIM2_IRQHandler+0x10>)
 8001046:	f002 fbe1 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	200001b8 	.word	0x200001b8

08001054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART1_IRQHandler+0x10>)
 800105a:	f003 f9d9 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000238 	.word	0x20000238

08001068 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800106c:	4802      	ldr	r0, [pc, #8]	; (8001078 <TIM6_IRQHandler+0x10>)
 800106e:	f002 fbcd 	bl	800380c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000178 	.word	0x20000178

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f003 fe2e 	bl	8004d0c <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20004000 	.word	0x20004000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	20000094 	.word	0x20000094
 80010e4:	20000290 	.word	0x20000290

080010e8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001110:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_TIM2_Init+0x98>)
 8001112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (320 - 1);
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_TIM2_Init+0x98>)
 800111a:	f240 123f 	movw	r2, #319	; 0x13f
 800111e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <MX_TIM2_Init+0x98>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (10000 - 1);
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_TIM2_Init+0x98>)
 8001128:	f242 720f 	movw	r2, #9999	; 0x270f
 800112c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b17      	ldr	r3, [pc, #92]	; (800118c <MX_TIM2_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_TIM2_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <MX_TIM2_Init+0x98>)
 800113c:	f002 f9b2 	bl	80034a4 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001146:	f7ff feff 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4619      	mov	r1, r3
 8001156:	480d      	ldr	r0, [pc, #52]	; (800118c <MX_TIM2_Init+0x98>)
 8001158:	f002 fcf2 	bl	8003b40 <HAL_TIM_ConfigClockSource>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001162:	f7ff fef1 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001166:	2320      	movs	r3, #32
 8001168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	4619      	mov	r1, r3
 8001172:	4806      	ldr	r0, [pc, #24]	; (800118c <MX_TIM2_Init+0x98>)
 8001174:	f002 ffde 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800117e:	f7ff fee3 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001b8 	.word	0x200001b8

08001190 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011bc:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <MX_TIM4_Init+0xe4>)
 80011be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (2 - 1);
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (1000 - 1);
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011e0:	4823      	ldr	r0, [pc, #140]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011e2:	f002 f95f 	bl	80034a4 <HAL_TIM_Base_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80011ec:	f7ff feac 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	4619      	mov	r1, r3
 80011fc:	481c      	ldr	r0, [pc, #112]	; (8001270 <MX_TIM4_Init+0xe0>)
 80011fe:	f002 fc9f 	bl	8003b40 <HAL_TIM_ConfigClockSource>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001208:	f7ff fe9e 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800120c:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_TIM4_Init+0xe0>)
 800120e:	f002 fa1f 	bl	8003650 <HAL_TIM_PWM_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001218:	f7ff fe96 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4619      	mov	r1, r3
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_TIM4_Init+0xe0>)
 800122c:	f002 ff82 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001236:	f7ff fe87 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800123a:	2360      	movs	r3, #96	; 0x60
 800123c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM4_Init+0xe0>)
 8001252:	f002 fbb7 	bl	80039c4 <HAL_TIM_PWM_ConfigChannel>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800125c:	f7ff fe74 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM4_Init+0xe0>)
 8001262:	f000 f893 	bl	800138c <HAL_TIM_MspPostInit>

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	; 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000138 	.word	0x20000138
 8001274:	40000800 	.word	0x40000800

08001278 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM6_Init+0x64>)
 8001288:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <MX_TIM6_Init+0x68>)
 800128a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (32 - 1);
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_TIM6_Init+0x64>)
 800128e:	221f      	movs	r2, #31
 8001290:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_TIM6_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (1000 - 1);
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_TIM6_Init+0x64>)
 800129a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800129e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_TIM6_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM6_Init+0x64>)
 80012a8:	f002 f8fc 	bl	80034a4 <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012b2:	f7ff fe49 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM6_Init+0x64>)
 80012c4:	f002 ff36 	bl	8004134 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012ce:	f7ff fe3b 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000178 	.word	0x20000178
 80012e0:	40001000 	.word	0x40001000

080012e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f4:	d114      	bne.n	8001320 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6253      	str	r3, [r2, #36]	; 0x24
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	201c      	movs	r0, #28
 8001314:	f000 ff17 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001318:	201c      	movs	r0, #28
 800131a:	f000 ff30 	bl	800217e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800131e:	e02a      	b.n	8001376 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_TIM_Base_MspInit+0xa0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10c      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6253      	str	r3, [r2, #36]	; 0x24
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
}
 8001342:	e018      	b.n	8001376 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_TIM_Base_MspInit+0xa4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d113      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 8001354:	f043 0310 	orr.w	r3, r3, #16
 8001358:	6253      	str	r3, [r2, #36]	; 0x24
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x9c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	202b      	movs	r0, #43	; 0x2b
 800136c:	f000 feeb 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001370:	202b      	movs	r0, #43	; 0x2b
 8001372:	f000 ff04 	bl	800217e <HAL_NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40000800 	.word	0x40000800
 8001388:	40001000 	.word	0x40001000

0800138c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_TIM_MspPostInit+0x64>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d11b      	bne.n	80013e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_TIM_MspPostInit+0x68>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_TIM_MspPostInit+0x68>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_TIM_MspPostInit+0x68>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_PUMP_Pin;
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PUMP_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 030c 	add.w	r3, r7, #12
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_TIM_MspPostInit+0x6c>)
 80013e2:	f001 f8fb 	bl	80025dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000800 	.word	0x40000800
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d105      	bne.n	8001418 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 1);
 800140c:	2201      	movs	r2, #1
 800140e:	2101      	movs	r1, #1
 8001410:	4822      	ldr	r0, [pc, #136]	; (800149c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001412:	f001 fa7a 	bl	800290a <HAL_GPIO_WritePin>
			{
				debouncedButtonReleased = 1;
			}
		}
	}
}
 8001416:	e03a      	b.n	800148e <HAL_TIM_PeriodElapsedCallback+0x92>
	else if(htim == &htim6)	// Timed debounce routine:
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d136      	bne.n	800148e <HAL_TIM_PeriodElapsedCallback+0x92>
		previousButton = currentButton;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001428:	701a      	strb	r2, [r3, #0]
		currentButton  = HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin);
 800142a:	2101      	movs	r1, #1
 800142c:	481f      	ldr	r0, [pc, #124]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800142e:	f001 fa55 	bl	80028dc <HAL_GPIO_ReadPin>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001438:	701a      	strb	r2, [r3, #0]
		if (currentButton == previousButton)	// Increments counter if stable
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	429a      	cmp	r2, r3
 8001448:	d107      	bne.n	800145a <HAL_TIM_PeriodElapsedCallback+0x5e>
			debounceCounter++;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001456:	701a      	strb	r2, [r3, #0]
 8001458:	e002      	b.n	8001460 <HAL_TIM_PeriodElapsedCallback+0x64>
			debounceCounter = 0;
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
		if (debounceCounter >= DEBOUNCE_STABLE_PERIOD)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b09      	cmp	r3, #9
 8001468:	d911      	bls.n	800148e <HAL_TIM_PeriodElapsedCallback+0x92>
			HAL_TIM_Base_Stop_IT(&htim6);
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800146c:	f002 f8ca 	bl	8003604 <HAL_TIM_Base_Stop_IT>
			debounceCounter = 0;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
			if (currentButton == 1)			// Active HIGH: Button Pressed == 1
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d103      	bne.n	8001488 <HAL_TIM_PeriodElapsedCallback+0x8c>
				debouncedButtonPressed = 1;
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
}
 8001486:	e002      	b.n	800148e <HAL_TIM_PeriodElapsedCallback+0x92>
				debouncedButtonReleased = 1;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001b8 	.word	0x200001b8
 800149c:	40020800 	.word	0x40020800
 80014a0:	20000178 	.word	0x20000178
 80014a4:	2000008c 	.word	0x2000008c
 80014a8:	2000008d 	.word	0x2000008d
 80014ac:	40020000 	.word	0x40020000
 80014b0:	2000008e 	.word	0x2000008e
 80014b4:	2000008f 	.word	0x2000008f
 80014b8:	20000090 	.word	0x20000090

080014bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <MX_USART1_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f002 fe7c 	bl	80041f0 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f7ff fd23 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000238 	.word	0x20000238
 800150c:	40013800 	.word	0x40013800

08001510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1b      	ldr	r2, [pc, #108]	; (800159c <HAL_UART_MspInit+0x8c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d130      	bne.n	8001594 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a1a      	ldr	r2, [pc, #104]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x90>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_UART_MspInit+0x90>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001562:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001574:	2307      	movs	r3, #7
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_UART_MspInit+0x94>)
 8001580:	f001 f82c 	bl	80025dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2025      	movs	r0, #37	; 0x25
 800158a:	f000 fddc 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800158e:	2025      	movs	r0, #37	; 0x25
 8001590:	f000 fdf5 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40013800 	.word	0x40013800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000

080015a8 <UART_TX>:
}

/* USER CODE BEGIN 1 */

void UART_TX(char* buffer)	// UART TX facade
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7fe fde3 	bl	800017c <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <UART_TX+0x28>)
 80015c2:	f002 fe62 	bl	800428a <HAL_UART_Transmit>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000238 	.word	0x20000238

080015d4 <UART_RX>:

void UART_RX(char* buffer)	// UART RX facade
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, BYTES_TO_RX);
 80015dc:	2204      	movs	r2, #4
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <UART_RX+0x1c>)
 80015e2:	f002 fee4 	bl	80043ae <HAL_UART_Receive_IT>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000238 	.word	0x20000238

080015f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	UART_RX(rx_buffer);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <HAL_UART_RxCpltCallback+0x18>)
 80015fe:	f7ff ffe9 	bl	80015d4 <UART_RX>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200001f8 	.word	0x200001f8

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001636:	f7ff fd57 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f003 fb6d 	bl	8004d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff fb33 	bl	8000ca8 <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800164c:	0800568c 	.word	0x0800568c
  ldr r2, =_sbss
 8001650:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001654:	20000290 	.word	0x20000290

08001658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_IRQHandler>

0800165a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 fd63 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166a:	200f      	movs	r0, #15
 800166c:	f000 f80e 	bl	800168c <HAL_InitTick>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	e001      	b.n	8001680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167c:	f7ff fc7a 	bl	8000f74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001680:	79fb      	ldrb	r3, [r7, #7]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_InitTick+0x68>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d022      	beq.n	80016e6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_InitTick+0x6c>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_InitTick+0x68>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fd70 	bl	800219a <HAL_SYSTICK_Config>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10f      	bne.n	80016e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	d809      	bhi.n	80016da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c6:	2200      	movs	r2, #0
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
 80016ce:	f000 fd3a 	bl	8002146 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_InitTick+0x70>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	e007      	b.n	80016ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e004      	b.n	80016ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	e001      	b.n	80016ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000008 	.word	0x20000008
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_IncTick+0x1c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_IncTick+0x20>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4413      	add	r3, r2
 800170e:	4a03      	ldr	r2, [pc, #12]	; (800171c <HAL_IncTick+0x1c>)
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000027c 	.word	0x2000027c
 8001720:	20000008 	.word	0x20000008

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_GetTick+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	2000027c 	.word	0x2000027c

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fff0 	bl	8001724 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d004      	beq.n	800175c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_Delay+0x40>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175c:	bf00      	nop
 800175e:	f7ff ffe1 	bl	8001724 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f7      	bhi.n	800175e <HAL_Delay+0x26>
  {
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008

0800177c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e127      	b.n	80019ec <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d115      	bne.n	80017d6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b8:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <HAL_ADC_Init+0x278>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a8d      	ldr	r2, [pc, #564]	; (80019f4 <HAL_ADC_Init+0x278>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_ADC_Init+0x278>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff f949 	bl	8000a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f040 80ff 	bne.w	80019e2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017ec:	f023 0302 	bic.w	r3, r3, #2
 80017f0:	f043 0202 	orr.w	r2, r3, #2
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80017f8:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <HAL_ADC_Init+0x27c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	497c      	ldr	r1, [pc, #496]	; (80019f8 <HAL_ADC_Init+0x27c>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001812:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181a:	4619      	mov	r1, r3
 800181c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001820:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fab3 f383 	clz	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8001836:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800183c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001844:	4619      	mov	r1, r3
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 800185e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001862:	4313      	orrs	r3, r2
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	2b10      	cmp	r3, #16
 800186c:	d007      	beq.n	800187e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001876:	4313      	orrs	r3, r2
 8001878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187a:	4313      	orrs	r3, r2
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001888:	2b40      	cmp	r3, #64	; 0x40
 800188a:	d04f      	beq.n	800192c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001892:	4313      	orrs	r3, r2
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800189e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6912      	ldr	r2, [r2, #16]
 80018a4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80018a8:	d003      	beq.n	80018b2 <HAL_ADC_Init+0x136>
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	6912      	ldr	r2, [r2, #16]
 80018ae:	2a01      	cmp	r2, #1
 80018b0:	d102      	bne.n	80018b8 <HAL_ADC_Init+0x13c>
 80018b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b6:	e000      	b.n	80018ba <HAL_ADC_Init+0x13e>
 80018b8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80018ba:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80018bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018be:	4313      	orrs	r3, r2
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d125      	bne.n	8001918 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d114      	bne.n	8001900 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	3b01      	subs	r3, #1
 80018dc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80018e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	fa92 f2a2 	rbit	r2, r2
 80018e8:	617a      	str	r2, [r7, #20]
  return result;
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	fab2 f282 	clz	r2, r2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	4093      	lsls	r3, r2
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018fa:	4313      	orrs	r3, r2
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
 80018fe:	e00b      	b.n	8001918 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f043 0220 	orr.w	r2, r3, #32
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001910:	f043 0201 	orr.w	r2, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	4b37      	ldr	r3, [pc, #220]	; (80019fc <HAL_ADC_Init+0x280>)
 8001920:	4013      	ands	r3, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001928:	430b      	orrs	r3, r1
 800192a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_ADC_Init+0x284>)
 8001934:	4013      	ands	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800193c:	430b      	orrs	r3, r1
 800193e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001948:	d003      	beq.n	8001952 <HAL_ADC_Init+0x1d6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d119      	bne.n	8001986 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001966:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	fa92 f2a2 	rbit	r2, r2
 800196e:	60fa      	str	r2, [r7, #12]
  return result;
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	fab2 f282 	clz	r2, r2
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	fa03 f202 	lsl.w	r2, r3, r2
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
 8001984:	e007      	b.n	8001996 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001994:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_ADC_Init+0x288>)
 800199e:	4013      	ands	r3, r2
 80019a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d10b      	bne.n	80019be <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b0:	f023 0303 	bic.w	r3, r3, #3
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80019bc:	e014      	b.n	80019e8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f023 0312 	bic.w	r3, r3, #18
 80019c6:	f043 0210 	orr.w	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019e0:	e002      	b.n	80019e8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40012700 	.word	0x40012700
 80019fc:	fcfc16ff 	.word	0xfcfc16ff
 8001a00:	c0fff18d 	.word	0xc0fff18d
 8001a04:	bf80fffe 	.word	0xbf80fffe

08001a08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Start_DMA+0x1e>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e074      	b.n	8001b10 <HAL_ADC_Start_DMA+0x108>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 f9da 	bl	8001de8 <ADC_Enable>
 8001a34:	4603      	mov	r3, r0
 8001a36:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d167      	bne.n	8001b0e <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a46:	f023 0301 	bic.w	r3, r3, #1
 8001a4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d007      	beq.n	8001a70 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7c:	d106      	bne.n	8001a8c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a82:	f023 0206 	bic.w	r2, r3, #6
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	651a      	str	r2, [r3, #80]	; 0x50
 8001a8a:	e002      	b.n	8001a92 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_ADC_Start_DMA+0x110>)
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_ADC_Start_DMA+0x114>)
 8001aa8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_ADC_Start_DMA+0x118>)
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001aca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ada:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3358      	adds	r3, #88	; 0x58
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f000 fbba 	bl	8002264 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d107      	bne.n	8001b0e <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b0c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	08001ea1 	.word	0x08001ea1
 8001b1c:	08001f49 	.word	0x08001f49
 8001b20:	08001f65 	.word	0x08001f65

08001b24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x20>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e134      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x28a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d81c      	bhi.n	8001bb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	3b05      	subs	r3, #5
 8001b8a:	221f      	movs	r2, #31
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4019      	ands	r1, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3b05      	subs	r3, #5
 8001ba4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb0:	e07e      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d81c      	bhi.n	8001bf4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b23      	subs	r3, #35	; 0x23
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	4019      	ands	r1, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	3b23      	subs	r3, #35	; 0x23
 8001be6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bf2:	e05d      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b12      	cmp	r3, #18
 8001bfa:	d81c      	bhi.n	8001c36 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b41      	subs	r3, #65	; 0x41
 8001c0e:	221f      	movs	r2, #31
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	4019      	ands	r1, r3
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b41      	subs	r3, #65	; 0x41
 8001c28:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
 8001c34:	e03c      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b18      	cmp	r3, #24
 8001c3c:	d81c      	bhi.n	8001c78 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	3b5f      	subs	r3, #95	; 0x5f
 8001c50:	221f      	movs	r2, #31
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	4019      	ands	r1, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b5f      	subs	r3, #95	; 0x5f
 8001c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
 8001c76:	e01b      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b7d      	subs	r3, #125	; 0x7d
 8001c8a:	221f      	movs	r2, #31
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b7d      	subs	r3, #125	; 0x7d
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d81a      	bhi.n	8001cee <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	2207      	movs	r2, #7
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	4019      	ands	r1, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	6898      	ldr	r0, [r3, #8]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	e042      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b13      	cmp	r3, #19
 8001cf4:	d81c      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6919      	ldr	r1, [r3, #16]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	2207      	movs	r2, #7
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4019      	ands	r1, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6898      	ldr	r0, [r3, #8]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b1e      	subs	r3, #30
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	e021      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b1a      	cmp	r3, #26
 8001d36:	d81c      	bhi.n	8001d72 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68d9      	ldr	r1, [r3, #12]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	3b3c      	subs	r3, #60	; 0x3c
 8001d4a:	2207      	movs	r2, #7
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	4019      	ands	r1, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6898      	ldr	r0, [r3, #8]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	3b3c      	subs	r3, #60	; 0x3c
 8001d64:	fa00 f203 	lsl.w	r2, r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	e000      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001d72:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d003      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d80:	2b11      	cmp	r3, #17
 8001d82:	d121      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001d84:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_ADC_ConfigChannel+0x294>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_ADC_ConfigChannel+0x294>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_ADC_ConfigChannel+0x294>)
 8001d96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d9a:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d111      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_ADC_ConfigChannel+0x298>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0e      	ldr	r2, [pc, #56]	; (8001de4 <HAL_ADC_ConfigChannel+0x29c>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0c9a      	lsrs	r2, r3, #18
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001dba:	e002      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f9      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40012700 	.word	0x40012700
 8001de0:	20000000 	.word	0x20000000
 8001de4:	431bde83 	.word	0x431bde83

08001de8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e02:	2b40      	cmp	r3, #64	; 0x40
 8001e04:	d043      	beq.n	8001e8e <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <ADC_Enable+0xb0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <ADC_Enable+0xb4>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	0c9a      	lsrs	r2, r3, #18
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e2a:	e002      	b.n	8001e32 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f9      	bne.n	8001e2c <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001e38:	f7ff fc74 	bl	8001724 <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e3e:	e01f      	b.n	8001e80 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001e40:	f7ff fc70 	bl	8001724 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d918      	bls.n	8001e80 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d011      	beq.n	8001e80 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e60:	f043 0210 	orr.w	r2, r3, #16
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6c:	f043 0201 	orr.w	r2, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e007      	b.n	8001e90 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b40      	cmp	r3, #64	; 0x40
 8001e8c:	d1d8      	bne.n	8001e40 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	431bde83 	.word	0x431bde83

08001ea0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d13d      	bne.n	8001f36 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d12c      	bne.n	8001f2e <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d127      	bne.n	8001f2e <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d006      	beq.n	8001efa <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0220 	bic.w	r2, r2, #32
 8001f08:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d105      	bne.n	8001f2e <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f043 0201 	orr.w	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7fe fe06 	bl	8000b40 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001f34:	e004      	b.n	8001f40 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff fde4 	bl	8001b24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f82:	f043 0204 	orr.w	r2, r3, #4
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f7ff fdd3 	bl	8001b36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4906      	ldr	r1, [pc, #24]	; (8002030 <__NVIC_EnableIRQ+0x34>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff90 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff2d 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff42 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff90 	bl	8002088 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5f 	bl	8002034 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff35 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e043      	b.n	800224e <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_DMA_Init+0xa4>)
 80021ce:	4413      	add	r3, r2
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_DMA_Init+0xa8>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	009a      	lsls	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <HAL_DMA_Init+0xac>)
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80021fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002208:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002214:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002220:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	bffd9ff8 	.word	0xbffd9ff8
 800225c:	cccccccd 	.word	0xcccccccd
 8002260:	40026000 	.word	0x40026000

08002264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_DMA_Start_IT+0x20>
 8002280:	2302      	movs	r3, #2
 8002282:	e04b      	b.n	800231c <HAL_DMA_Start_IT+0xb8>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d13a      	bne.n	800230e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f95e 	bl	800257e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 020e 	orr.w	r2, r2, #14
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e00f      	b.n	80022fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 020a 	orr.w	r2, r2, #10
 80022fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e005      	b.n	800231a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d008      	beq.n	800234e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2204      	movs	r2, #4
 8002340:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e022      	b.n	8002394 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 020e 	bic.w	r2, r2, #14
 800235c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0201 	bic.w	r2, r2, #1
 800236c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 021c 	and.w	r2, r3, #28
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f202 	lsl.w	r2, r1, r2
 8002380:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8002392:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002394:	4618      	mov	r0, r3
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	73fb      	strb	r3, [r7, #15]
 80023c0:	e029      	b.n	8002416 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 020e 	bic.w	r2, r2, #14
 80023d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f003 021c 	and.w	r2, r3, #28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
    }
  }
  return status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f003 031c 	and.w	r3, r3, #28
 8002440:	2204      	movs	r2, #4
 8002442:	409a      	lsls	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d026      	beq.n	800249a <HAL_DMA_IRQHandler+0x7a>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d021      	beq.n	800249a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d107      	bne.n	8002474 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0204 	bic.w	r2, r2, #4
 8002472:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f003 021c 	and.w	r2, r3, #28
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	2104      	movs	r1, #4
 8002482:	fa01 f202 	lsl.w	r2, r1, r2
 8002486:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d071      	beq.n	8002574 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002498:	e06c      	b.n	8002574 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 031c 	and.w	r3, r3, #28
 80024a2:	2202      	movs	r2, #2
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d02e      	beq.n	800250c <HAL_DMA_IRQHandler+0xec>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d029      	beq.n	800250c <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 020a 	bic.w	r2, r2, #10
 80024d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 021c 	and.w	r2, r3, #28
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	2102      	movs	r1, #2
 80024ec:	fa01 f202 	lsl.w	r2, r1, r2
 80024f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d038      	beq.n	8002574 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800250a:	e033      	b.n	8002574 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f003 031c 	and.w	r3, r3, #28
 8002514:	2208      	movs	r2, #8
 8002516:	409a      	lsls	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02a      	beq.n	8002576 <HAL_DMA_IRQHandler+0x156>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d025      	beq.n	8002576 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 020e 	bic.w	r2, r2, #14
 8002538:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	f003 021c 	and.w	r2, r3, #28
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	2101      	movs	r1, #1
 8002548:	fa01 f202 	lsl.w	r2, r1, r2
 800254c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002574:	bf00      	nop
 8002576:	bf00      	nop
}
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800257e:	b480      	push	{r7}
 8002580:	b085      	sub	sp, #20
 8002582:	af00      	add	r7, sp, #0
 8002584:	60f8      	str	r0, [r7, #12]
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 021c 	and.w	r2, r3, #28
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d108      	bne.n	80025c2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025c0:	e007      	b.n	80025d2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	60da      	str	r2, [r3, #12]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025dc:	b480      	push	{r7}
 80025de:	b087      	sub	sp, #28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80025f2:	e154      	b.n	800289e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002600:	4013      	ands	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8146 	beq.w	8002898 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d005      	beq.n	8002624 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002620:	2b02      	cmp	r3, #2
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0201 	and.w	r2, r3, #1
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b03      	cmp	r3, #3
 8002690:	d017      	beq.n	80026c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d123      	bne.n	8002716 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	08da      	lsrs	r2, r3, #3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3208      	adds	r2, #8
 80026d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026da:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4013      	ands	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	08da      	lsrs	r2, r3, #3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3208      	adds	r2, #8
 8002710:	6939      	ldr	r1, [r7, #16]
 8002712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0203 	and.w	r2, r3, #3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80a0 	beq.w	8002898 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_GPIO_Init+0x2e0>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_GPIO_Init+0x2e0>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_GPIO_Init+0x2e0>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002770:	4a53      	ldr	r2, [pc, #332]	; (80028c0 <HAL_GPIO_Init+0x2e4>)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4b      	ldr	r2, [pc, #300]	; (80028c4 <HAL_GPIO_Init+0x2e8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d019      	beq.n	80027d0 <HAL_GPIO_Init+0x1f4>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_GPIO_Init+0x2ec>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d013      	beq.n	80027cc <HAL_GPIO_Init+0x1f0>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a49      	ldr	r2, [pc, #292]	; (80028cc <HAL_GPIO_Init+0x2f0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d00d      	beq.n	80027c8 <HAL_GPIO_Init+0x1ec>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2f4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d007      	beq.n	80027c4 <HAL_GPIO_Init+0x1e8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_GPIO_Init+0x2f8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_GPIO_Init+0x1e4>
 80027bc:	2304      	movs	r3, #4
 80027be:	e008      	b.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027c0:	2305      	movs	r3, #5
 80027c2:	e006      	b.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027c4:	2303      	movs	r3, #3
 80027c6:	e004      	b.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e002      	b.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_GPIO_Init+0x1f6>
 80027d0:	2300      	movs	r3, #0
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80027e2:	4937      	ldr	r1, [pc, #220]	; (80028c0 <HAL_GPIO_Init+0x2e4>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002814:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	43db      	mvns	r3, r3
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	4013      	ands	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800283e:	4a26      	ldr	r2, [pc, #152]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	43db      	mvns	r3, r3
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4013      	ands	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4313      	orrs	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002868:	4a1b      	ldr	r2, [pc, #108]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <HAL_GPIO_Init+0x2fc>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f47f aea3 	bne.w	80025f4 <HAL_GPIO_Init+0x18>
  }
}
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010400 	.word	0x40010400

080028dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e001      	b.n	80028fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr

0800290a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	460b      	mov	r3, r1
 8002914:	807b      	strh	r3, [r7, #2]
 8002916:	4613      	mov	r3, r2
 8002918:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800291a:	787b      	ldrb	r3, [r7, #1]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002920:	887a      	ldrh	r2, [r7, #2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002926:	e003      	b.n	8002930 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	041a      	lsls	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	619a      	str	r2, [r3, #24]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
	...

0800293c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	4013      	ands	r3, r2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002952:	4a05      	ldr	r2, [pc, #20]	; (8002968 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe f992 	bl	8000c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40010400 	.word	0x40010400

0800296c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e31d      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b94      	ldr	r3, [pc, #592]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d07b      	beq.n	8002a96 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d006      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	2b0c      	cmp	r3, #12
 80029a8:	d10f      	bne.n	80029ca <HAL_RCC_OscConfig+0x5e>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d10b      	bne.n	80029ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	4b87      	ldr	r3, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d06a      	beq.n	8002a94 <HAL_RCC_OscConfig+0x128>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d166      	bne.n	8002a94 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e2f7      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x74>
 80029d2:	4b7f      	ldr	r3, [pc, #508]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a7e      	ldr	r2, [pc, #504]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e02d      	b.n	8002a3c <HAL_RCC_OscConfig+0xd0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x96>
 80029e8:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a78      	ldr	r2, [pc, #480]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a75      	ldr	r2, [pc, #468]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0xd0>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0xb8>
 8002a0a:	4b71      	ldr	r3, [pc, #452]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a70      	ldr	r2, [pc, #448]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b6e      	ldr	r3, [pc, #440]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6d      	ldr	r2, [pc, #436]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xd0>
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a69      	ldr	r2, [pc, #420]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe fe6e 	bl	8001724 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fe6a 	bl	8001724 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e2ad      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe0>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fe5a 	bl	8001724 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fe56 	bl	8001724 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e299      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a86:	4b52      	ldr	r3, [pc, #328]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x108>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d05a      	beq.n	8002b58 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x176>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d116      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x160>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e276      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b40      	ldr	r3, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	493d      	ldr	r1, [pc, #244]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae0:	e03a      	b.n	8002b58 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d020      	beq.n	8002b2c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	4b3a      	ldr	r3, [pc, #232]	; (8002bd4 <HAL_RCC_OscConfig+0x268>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fe18 	bl	8001724 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fe14 	bl	8001724 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e257      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b0a:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	492a      	ldr	r1, [pc, #168]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
 8002b2a:	e015      	b.n	8002b58 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2c:	4b29      	ldr	r3, [pc, #164]	; (8002bd4 <HAL_RCC_OscConfig+0x268>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b32:	f7fe fdf7 	bl	8001724 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fdf3 	bl	8001724 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e236      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b4c:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 80b8 	beq.w	8002cd6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d170      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_OscConfig+0x218>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e21a      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1a      	ldr	r2, [r3, #32]
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d921      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fc23 	bl	80033e4 <RCC_SetFlashLatencyFromMSIRange>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e208      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba8:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4906      	ldr	r1, [pc, #24]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bba:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	061b      	lsls	r3, r3, #24
 8002bc8:	4901      	ldr	r1, [pc, #4]	; (8002bd0 <HAL_RCC_OscConfig+0x264>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
 8002bce:	e020      	b.n	8002c12 <HAL_RCC_OscConfig+0x2a6>
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bd8:	4ba4      	ldr	r3, [pc, #656]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	49a1      	ldr	r1, [pc, #644]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bea:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	061b      	lsls	r3, r3, #24
 8002bf8:	499c      	ldr	r1, [pc, #624]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fbee 	bl	80033e4 <RCC_SetFlashLatencyFromMSIRange>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e1d3      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	0b5b      	lsrs	r3, r3, #13
 8002c18:	3301      	adds	r3, #1
 8002c1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002c22:	4a92      	ldr	r2, [pc, #584]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002c24:	6892      	ldr	r2, [r2, #8]
 8002c26:	0912      	lsrs	r2, r2, #4
 8002c28:	f002 020f 	and.w	r2, r2, #15
 8002c2c:	4990      	ldr	r1, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	5c8a      	ldrb	r2, [r1, r2]
 8002c30:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002c32:	4a90      	ldr	r2, [pc, #576]	; (8002e74 <HAL_RCC_OscConfig+0x508>)
 8002c34:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c36:	4b90      	ldr	r3, [pc, #576]	; (8002e78 <HAL_RCC_OscConfig+0x50c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fd26 	bl	800168c <HAL_InitTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d045      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	e1b5      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d029      	beq.n	8002caa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c56:	4b89      	ldr	r3, [pc, #548]	; (8002e7c <HAL_RCC_OscConfig+0x510>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fd62 	bl	8001724 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c64:	f7fe fd5e 	bl	8001724 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1a1      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c76:	4b7d      	ldr	r3, [pc, #500]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c82:	4b7a      	ldr	r3, [pc, #488]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	4977      	ldr	r1, [pc, #476]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c94:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	4972      	ldr	r1, [pc, #456]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002caa:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <HAL_RCC_OscConfig+0x510>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fd38 	bl	8001724 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fd34 	bl	8001724 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e177      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002cca:	4b68      	ldr	r3, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d030      	beq.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d016      	beq.n	8002d18 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x514>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fd18 	bl	8001724 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fd14 	bl	8001724 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e157      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d0a:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x38c>
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_OscConfig+0x514>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fe fd01 	bl	8001724 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fcfd 	bl	8001724 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e140      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1f0      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 80b5 	beq.w	8002ebc <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10d      	bne.n	8002d7e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6253      	str	r3, [r2, #36]	; 0x24
 8002d6e:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x518>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_OscConfig+0x518>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <HAL_RCC_OscConfig+0x518>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fcc5 	bl	8001724 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fe fcc1 	bl	8001724 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e104      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0x518>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x466>
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	6353      	str	r3, [r2, #52]	; 0x34
 8002dd0:	e02d      	b.n	8002e2e <HAL_RCC_OscConfig+0x4c2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x488>
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dde:	4a23      	ldr	r2, [pc, #140]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de4:	6353      	str	r3, [r2, #52]	; 0x34
 8002de6:	4b21      	ldr	r3, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002df0:	6353      	str	r3, [r2, #52]	; 0x34
 8002df2:	e01c      	b.n	8002e2e <HAL_RCC_OscConfig+0x4c2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b05      	cmp	r3, #5
 8002dfa:	d10c      	bne.n	8002e16 <HAL_RCC_OscConfig+0x4aa>
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e06:	6353      	str	r3, [r2, #52]	; 0x34
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0c:	4a17      	ldr	r2, [pc, #92]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e12:	6353      	str	r3, [r2, #52]	; 0x34
 8002e14:	e00b      	b.n	8002e2e <HAL_RCC_OscConfig+0x4c2>
 8002e16:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	4a14      	ldr	r2, [pc, #80]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e20:	6353      	str	r3, [r2, #52]	; 0x34
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e2c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d015      	beq.n	8002e62 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fc75 	bl	8001724 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7fe fc71 	bl	8001724 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e0b2      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_OscConfig+0x500>)
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ee      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4d2>
 8002e60:	e023      	b.n	8002eaa <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e62:	f7fe fc5f 	bl	8001724 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e68:	e019      	b.n	8002e9e <HAL_RCC_OscConfig+0x532>
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08005630 	.word	0x08005630
 8002e74:	20000000 	.word	0x20000000
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	42470020 	.word	0x42470020
 8002e80:	42470680 	.word	0x42470680
 8002e84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e88:	f7fe fc4c 	bl	8001724 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e08d      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e9e:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ee      	bne.n	8002e88 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d105      	bne.n	8002ebc <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb0:	4b44      	ldr	r3, [pc, #272]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eba:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d079      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	2b0c      	cmp	r3, #12
 8002ec8:	d056      	beq.n	8002f78 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d13b      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCC_OscConfig+0x65c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fc24 	bl	8001724 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe fc20 	bl	8001724 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e063      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4319      	orrs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	430b      	orrs	r3, r1
 8002f16:	492b      	ldr	r1, [pc, #172]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x65c>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f22:	f7fe fbff 	bl	8001724 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fe fbfb 	bl	8001724 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e03e      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x5be>
 8002f48:	e036      	b.n	8002fb8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <HAL_RCC_OscConfig+0x65c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fbe8 	bl	8001724 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f58:	f7fe fbe4 	bl	8001724 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e027      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5ec>
 8002f76:	e01f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e01a      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <HAL_RCC_OscConfig+0x658>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d106      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	42470060 	.word	0x42470060

08002fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e11a      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b8f      	ldr	r3, [pc, #572]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d919      	bls.n	8003022 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d105      	bne.n	8003000 <HAL_RCC_ClockConfig+0x34>
 8002ff4:	4b8a      	ldr	r3, [pc, #552]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a89      	ldr	r2, [pc, #548]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b87      	ldr	r3, [pc, #540]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f023 0201 	bic.w	r2, r3, #1
 8003008:	4985      	ldr	r1, [pc, #532]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003010:	4b83      	ldr	r3, [pc, #524]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e0f9      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d008      	beq.n	8003040 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302e:	4b7d      	ldr	r3, [pc, #500]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	497a      	ldr	r1, [pc, #488]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 800303c:	4313      	orrs	r3, r2
 800303e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 808e 	beq.w	800316a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003056:	4b73      	ldr	r3, [pc, #460]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0d7      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d107      	bne.n	800307e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d115      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0cb      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003086:	4b67      	ldr	r3, [pc, #412]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0bf      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e0b7      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b5f      	ldr	r3, [pc, #380]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	495c      	ldr	r1, [pc, #368]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fb34 	bl	8001724 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d112      	bne.n	80030ec <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030c6:	e00a      	b.n	80030de <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c8:	f7fe fb2c 	bl	8001724 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e09b      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80030de:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d1ee      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xfc>
 80030ea:	e03e      	b.n	800316a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d112      	bne.n	800311a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f4:	e00a      	b.n	800310c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f6:	f7fe fb15 	bl	8001724 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	f241 3288 	movw	r2, #5000	; 0x1388
 8003104:	4293      	cmp	r3, r2
 8003106:	d901      	bls.n	800310c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e084      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800310c:	4b45      	ldr	r3, [pc, #276]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d1ee      	bne.n	80030f6 <HAL_RCC_ClockConfig+0x12a>
 8003118:	e027      	b.n	800316a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d11d      	bne.n	800315e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003122:	e00a      	b.n	800313a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003124:	f7fe fafe 	bl	8001724 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e06d      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b3a      	ldr	r3, [pc, #232]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d1ee      	bne.n	8003124 <HAL_RCC_ClockConfig+0x158>
 8003146:	e010      	b.n	800316a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003148:	f7fe faec 	bl	8001724 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e05b      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1ee      	bne.n	8003148 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d219      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCC_ClockConfig+0x1be>
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a27      	ldr	r2, [pc, #156]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8003184:	f043 0304 	orr.w	r3, r3, #4
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 0201 	bic.w	r2, r3, #1
 8003192:	4923      	ldr	r1, [pc, #140]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	4313      	orrs	r3, r2
 8003198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800319a:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_ClockConfig+0x254>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d001      	beq.n	80031ac <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e034      	b.n	8003216 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b8:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	4917      	ldr	r1, [pc, #92]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031d6:	4b13      	ldr	r3, [pc, #76]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	490f      	ldr	r1, [pc, #60]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ea:	f000 f823 	bl	8003234 <HAL_RCC_GetSysClockFreq>
 80031ee:	4602      	mov	r2, r0
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HAL_RCC_ClockConfig+0x258>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	490b      	ldr	r1, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x25c>)
 80031fc:	5ccb      	ldrb	r3, [r1, r3]
 80031fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x260>)
 8003204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x264>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fa3e 	bl	800168c <HAL_InitTick>
 8003210:	4603      	mov	r3, r0
 8003212:	72fb      	strb	r3, [r7, #11]

  return status;
 8003214:	7afb      	ldrb	r3, [r7, #11]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023c00 	.word	0x40023c00
 8003224:	40023800 	.word	0x40023800
 8003228:	08005630 	.word	0x08005630
 800322c:	20000000 	.word	0x20000000
 8003230:	20000004 	.word	0x20000004

08003234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800323a:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_RCC_GetSysClockFreq+0x13c>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b0c      	cmp	r3, #12
 8003248:	d00c      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x30>
 800324a:	2b0c      	cmp	r3, #12
 800324c:	d87c      	bhi.n	8003348 <HAL_RCC_GetSysClockFreq+0x114>
 800324e:	2b04      	cmp	r3, #4
 8003250:	d002      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x24>
 8003252:	2b08      	cmp	r3, #8
 8003254:	d003      	beq.n	800325e <HAL_RCC_GetSysClockFreq+0x2a>
 8003256:	e077      	b.n	8003348 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003258:	4b46      	ldr	r3, [pc, #280]	; (8003374 <HAL_RCC_GetSysClockFreq+0x140>)
 800325a:	613b      	str	r3, [r7, #16]
      break;
 800325c:	e082      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800325e:	4b46      	ldr	r3, [pc, #280]	; (8003378 <HAL_RCC_GetSysClockFreq+0x144>)
 8003260:	613b      	str	r3, [r7, #16]
      break;
 8003262:	e07f      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	4a43      	ldr	r2, [pc, #268]	; (800337c <HAL_RCC_GetSysClockFreq+0x148>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	0d9b      	lsrs	r3, r3, #22
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	3301      	adds	r3, #1
 800327c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327e:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01a      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	461a      	mov	r2, r3
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	4939      	ldr	r1, [pc, #228]	; (8003378 <HAL_RCC_GetSysClockFreq+0x144>)
 8003294:	fb01 f003 	mul.w	r0, r1, r3
 8003298:	2100      	movs	r1, #0
 800329a:	fb01 f102 	mul.w	r1, r1, r2
 800329e:	1844      	adds	r4, r0, r1
 80032a0:	4935      	ldr	r1, [pc, #212]	; (8003378 <HAL_RCC_GetSysClockFreq+0x144>)
 80032a2:	fba2 0101 	umull	r0, r1, r2, r1
 80032a6:	1863      	adds	r3, r4, r1
 80032a8:	4619      	mov	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	f7fd f9c9 	bl	8000648 <__aeabi_uldivmod>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	4613      	mov	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e040      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	461c      	mov	r4, r3
 80032c4:	f04f 0500 	mov.w	r5, #0
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	014b      	lsls	r3, r1, #5
 80032d6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032da:	0142      	lsls	r2, r0, #5
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	1b00      	subs	r0, r0, r4
 80032e2:	eb61 0105 	sbc.w	r1, r1, r5
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	018b      	lsls	r3, r1, #6
 80032f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032f4:	0182      	lsls	r2, r0, #6
 80032f6:	1a12      	subs	r2, r2, r0
 80032f8:	eb63 0301 	sbc.w	r3, r3, r1
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	00d9      	lsls	r1, r3, #3
 8003306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800330a:	00d0      	lsls	r0, r2, #3
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	1912      	adds	r2, r2, r4
 8003312:	eb45 0303 	adc.w	r3, r5, r3
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	f04f 0100 	mov.w	r1, #0
 800331e:	0299      	lsls	r1, r3, #10
 8003320:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003324:	0290      	lsls	r0, r2, #10
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	461a      	mov	r2, r3
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	f7fd f987 	bl	8000648 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4613      	mov	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	613b      	str	r3, [r7, #16]
      break;
 8003346:	e00d      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003348:	4b09      	ldr	r3, [pc, #36]	; (8003370 <HAL_RCC_GetSysClockFreq+0x13c>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	0b5b      	lsrs	r3, r3, #13
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	613b      	str	r3, [r7, #16]
      break;
 8003362:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003364:	693b      	ldr	r3, [r7, #16]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bdb0      	pop	{r4, r5, r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	00f42400 	.word	0x00f42400
 8003378:	016e3600 	.word	0x016e3600
 800337c:	08005624 	.word	0x08005624

08003380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003384:	4b02      	ldr	r3, [pc, #8]	; (8003390 <HAL_RCC_GetHCLKFreq+0x10>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000000 	.word	0x20000000

08003394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003398:	f7ff fff2 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4903      	ldr	r1, [pc, #12]	; (80033b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033aa:	5ccb      	ldrb	r3, [r1, r3]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800
 80033b8:	08005640 	.word	0x08005640

080033bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033c0:	f7ff ffde 	bl	8003380 <HAL_RCC_GetHCLKFreq>
 80033c4:	4602      	mov	r2, r0
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033d2:	5ccb      	ldrb	r3, [r1, r3]
 80033d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	08005640 	.word	0x08005640

080033e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033ec:	2300      	movs	r3, #0
 80033ee:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d12c      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033fc:	4b26      	ldr	r3, [pc, #152]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e016      	b.n	8003442 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6253      	str	r3, [r2, #36]	; 0x24
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003434:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003448:	d105      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003450:	d101      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003452:	2301      	movs	r3, #1
 8003454:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800345c:	4b10      	ldr	r3, [pc, #64]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f023 0201 	bic.w	r2, r3, #1
 8003470:	490b      	ldr	r1, [pc, #44]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d001      	beq.n	800348a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	40023c00 	.word	0x40023c00

080034a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e031      	b.n	800351a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d106      	bne.n	80034d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd ff0a 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3304      	adds	r3, #4
 80034e0:	4619      	mov	r1, r3
 80034e2:	4610      	mov	r0, r2
 80034e4:	f000 fc14 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	f241 1311 	movw	r3, #4369	; 0x1111
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_TIM_Base_Stop+0x28>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0201 	bic.w	r2, r2, #1
 8003548:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
	...

08003560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d001      	beq.n	8003578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e03a      	b.n	80035ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d00e      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x58>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <HAL_TIM_Base_Start_IT+0x98>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d009      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x58>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_TIM_Base_Start_IT+0x9c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x58>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a13      	ldr	r2, [pc, #76]	; (8003600 <HAL_TIM_Base_Start_IT+0xa0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d111      	bne.n	80035dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d010      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035da:	e007      	b.n	80035ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800
 8003600:	40010800 	.word	0x40010800

08003604 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	f241 1311 	movw	r3, #4369	; 0x1111
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d107      	bne.n	800363c <HAL_TIM_Base_Stop_IT+0x38>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e031      	b.n	80036c6 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f829 	bl	80036ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fb3e 	bl	8003d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HAL_TIM_PWM_Start+0x24>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e022      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b04      	cmp	r3, #4
 8003708:	d109      	bne.n	800371e <HAL_TIM_PWM_Start+0x3e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	bf14      	ite	ne
 8003716:	2301      	movne	r3, #1
 8003718:	2300      	moveq	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	e015      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b08      	cmp	r3, #8
 8003722:	d109      	bne.n	8003738 <HAL_TIM_PWM_Start+0x58>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e008      	b.n	800374a <HAL_TIM_PWM_Start+0x6a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e051      	b.n	80037f6 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <HAL_TIM_PWM_Start+0x82>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003760:	e013      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b04      	cmp	r3, #4
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0x92>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003770:	e00b      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b08      	cmp	r3, #8
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0xa2>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003780:	e003      	b.n	800378a <HAL_TIM_PWM_Start+0xaa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2201      	movs	r2, #1
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fca9 	bl	80040ea <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d00e      	beq.n	80037c0 <HAL_TIM_PWM_Start+0xe0>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_TIM_PWM_Start+0x120>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_TIM_PWM_Start+0xe0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_TIM_PWM_Start+0x124>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_TIM_PWM_Start+0xe0>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a13      	ldr	r2, [pc, #76]	; (8003808 <HAL_TIM_PWM_Start+0x128>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d010      	beq.n	80037f4 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e2:	e007      	b.n	80037f4 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40000400 	.word	0x40000400
 8003804:	40000800 	.word	0x40000800
 8003808:	40010800 	.word	0x40010800

0800380c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0202 	mvn.w	r2, #2
 8003838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa43 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa36 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fa45 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	2b04      	cmp	r3, #4
 8003874:	d122      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b04      	cmp	r3, #4
 8003882:	d11b      	bne.n	80038bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0204 	mvn.w	r2, #4
 800388c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2202      	movs	r2, #2
 8003892:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fa19 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 80038a8:	e005      	b.n	80038b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa0c 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 fa1b 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b08      	cmp	r3, #8
 80038c8:	d122      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d11b      	bne.n	8003910 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0208 	mvn.w	r2, #8
 80038e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2204      	movs	r2, #4
 80038e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f9ef 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 80038fc:	e005      	b.n	800390a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f9e2 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f9f1 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b10      	cmp	r3, #16
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b10      	cmp	r3, #16
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0210 	mvn.w	r2, #16
 8003934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2208      	movs	r2, #8
 800393a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9c5 	bl	8003cda <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9b8 	bl	8003cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f9c7 	bl	8003cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	d10e      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fd36 	bl	80013fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d10e      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a8:	2b40      	cmp	r3, #64	; 0x40
 80039aa:	d107      	bne.n	80039bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f9a1 	bl	8003cfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d101      	bne.n	80039de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039da:	2302      	movs	r3, #2
 80039dc:	e0ac      	b.n	8003b38 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	f200 809f 	bhi.w	8003b2c <HAL_TIM_PWM_ConfigChannel+0x168>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003b2d 	.word	0x08003b2d
 80039fc:	08003b2d 	.word	0x08003b2d
 8003a00:	08003b2d 	.word	0x08003b2d
 8003a04:	08003a69 	.word	0x08003a69
 8003a08:	08003b2d 	.word	0x08003b2d
 8003a0c:	08003b2d 	.word	0x08003b2d
 8003a10:	08003b2d 	.word	0x08003b2d
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003b2d 	.word	0x08003b2d
 8003a1c:	08003b2d 	.word	0x08003b2d
 8003a20:	08003b2d 	.word	0x08003b2d
 8003a24:	08003aeb 	.word	0x08003aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f9d0 	bl	8003dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e062      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f9ec 	bl	8003e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e041      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fa09 	bl	8003ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e021      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fa26 	bl	8003f42 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e000      	b.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_TIM_ConfigClockSource+0x18>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e0b3      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x180>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b90:	d03e      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0xd0>
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	f200 8087 	bhi.w	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	f000 8085 	beq.w	8003cac <HAL_TIM_ConfigClockSource+0x16c>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	d87f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003ba8:	2b70      	cmp	r3, #112	; 0x70
 8003baa:	d01a      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0xa2>
 8003bac:	2b70      	cmp	r3, #112	; 0x70
 8003bae:	d87b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003bb0:	2b60      	cmp	r3, #96	; 0x60
 8003bb2:	d050      	beq.n	8003c56 <HAL_TIM_ConfigClockSource+0x116>
 8003bb4:	2b60      	cmp	r3, #96	; 0x60
 8003bb6:	d877      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003bb8:	2b50      	cmp	r3, #80	; 0x50
 8003bba:	d03c      	beq.n	8003c36 <HAL_TIM_ConfigClockSource+0xf6>
 8003bbc:	2b50      	cmp	r3, #80	; 0x50
 8003bbe:	d873      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003bc0:	2b40      	cmp	r3, #64	; 0x40
 8003bc2:	d058      	beq.n	8003c76 <HAL_TIM_ConfigClockSource+0x136>
 8003bc4:	2b40      	cmp	r3, #64	; 0x40
 8003bc6:	d86f      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003bc8:	2b30      	cmp	r3, #48	; 0x30
 8003bca:	d064      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x156>
 8003bcc:	2b30      	cmp	r3, #48	; 0x30
 8003bce:	d86b      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003bd0:	2b20      	cmp	r3, #32
 8003bd2:	d060      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x156>
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d867      	bhi.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05c      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x156>
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d05a      	beq.n	8003c96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003be0:	e062      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f000 fa5b 	bl	80040ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	609a      	str	r2, [r3, #8]
      break;
 8003c0e:	e04e      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f000 fa44 	bl	80040ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c32:	609a      	str	r2, [r3, #8]
      break;
 8003c34:	e03b      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f000 f9bb 	bl	8003fbe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2150      	movs	r1, #80	; 0x50
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fa12 	bl	8004078 <TIM_ITRx_SetConfig>
      break;
 8003c54:	e02b      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6859      	ldr	r1, [r3, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f000 f9d9 	bl	800401a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2160      	movs	r1, #96	; 0x60
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fa02 	bl	8004078 <TIM_ITRx_SetConfig>
      break;
 8003c74:	e01b      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6859      	ldr	r1, [r3, #4]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 f99b 	bl	8003fbe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2140      	movs	r1, #64	; 0x40
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f9f2 	bl	8004078 <TIM_ITRx_SetConfig>
      break;
 8003c94:	e00b      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f000 f9e9 	bl	8004078 <TIM_ITRx_SetConfig>
        break;
 8003ca6:	e002      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ca8:	bf00      	nop
 8003caa:	e000      	b.n	8003cae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d26:	d007      	beq.n	8003d38 <TIM_Base_SetConfig+0x28>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a25      	ldr	r2, [pc, #148]	; (8003dc0 <TIM_Base_SetConfig+0xb0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d003      	beq.n	8003d38 <TIM_Base_SetConfig+0x28>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <TIM_Base_SetConfig+0xb4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d108      	bne.n	8003d4a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d50:	d013      	beq.n	8003d7a <TIM_Base_SetConfig+0x6a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <TIM_Base_SetConfig+0xb0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_Base_SetConfig+0x6a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <TIM_Base_SetConfig+0xb4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_Base_SetConfig+0x6a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <TIM_Base_SetConfig+0xb8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0x6a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <TIM_Base_SetConfig+0xbc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0x6a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a16      	ldr	r2, [pc, #88]	; (8003dd0 <TIM_Base_SetConfig+0xc0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bc80      	pop	{r7}
 8003dbe:	4770      	bx	lr
 8003dc0:	40000400 	.word	0x40000400
 8003dc4:	40000800 	.word	0x40000800
 8003dc8:	40010800 	.word	0x40010800
 8003dcc:	40010c00 	.word	0x40010c00
 8003dd0:	40011000 	.word	0x40011000

08003dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b087      	sub	sp, #28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0201 	bic.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 0302 	bic.w	r3, r3, #2
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr

08003e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b087      	sub	sp, #28
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0210 	bic.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f023 0320 	bic.w	r3, r3, #32
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b087      	sub	sp, #28
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	031b      	lsls	r3, r3, #12
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	621a      	str	r2, [r3, #32]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f023 0201 	bic.w	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f023 030a 	bic.w	r3, r3, #10
 8003ffa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b087      	sub	sp, #28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f023 0210 	bic.w	r2, r3, #16
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	031b      	lsls	r3, r3, #12
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr

08004078 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	f043 0307 	orr.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	609a      	str	r2, [r3, #8]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	021a      	lsls	r2, r3, #8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bc80      	pop	{r7}
 80040e8:	4770      	bx	lr

080040ea <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2201      	movs	r2, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	43db      	mvns	r3, r3
 800410c:	401a      	ands	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	fa01 f303 	lsl.w	r3, r1, r3
 8004122:	431a      	orrs	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	621a      	str	r2, [r3, #32]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
	...

08004134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004148:	2302      	movs	r3, #2
 800414a:	e046      	b.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d00e      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a10      	ldr	r2, [pc, #64]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10c      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	40000400 	.word	0x40000400
 80041e8:	40000800 	.word	0x40000800
 80041ec:	40010800 	.word	0x40010800

080041f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e03f      	b.n	8004282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd f97a 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fc85 	bl	8004b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	695a      	ldr	r2, [r3, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68da      	ldr	r2, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b08a      	sub	sp, #40	; 0x28
 800428e:	af02      	add	r7, sp, #8
 8004290:	60f8      	str	r0, [r7, #12]
 8004292:	60b9      	str	r1, [r7, #8]
 8004294:	603b      	str	r3, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d17c      	bne.n	80043a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_Transmit+0x2c>
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e075      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Transmit+0x3e>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e06e      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2221      	movs	r2, #33	; 0x21
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042de:	f7fd fa21 	bl	8001724 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	88fa      	ldrh	r2, [r7, #6]
 80042e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	88fa      	ldrh	r2, [r7, #6]
 80042ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d108      	bne.n	800430c <HAL_UART_Transmit+0x82>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	e003      	b.n	8004314 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800431c:	e02a      	b.n	8004374 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2200      	movs	r2, #0
 8004326:	2180      	movs	r1, #128	; 0x80
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 fa38 	bl	800479e <UART_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e036      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800434c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	3302      	adds	r3, #2
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	e007      	b.n	8004366 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	3301      	adds	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1cf      	bne.n	800431e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2140      	movs	r1, #64	; 0x40
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fa08 	bl	800479e <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d11d      	bne.n	8004404 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_UART_Receive_IT+0x26>
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e016      	b.n	8004406 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Receive_IT+0x38>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e00f      	b.n	8004406 <HAL_UART_Receive_IT+0x58>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa19 	bl	8004832 <UART_Start_Receive_IT>
 8004400:	4603      	mov	r3, r0
 8004402:	e000      	b.n	8004406 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_UART_IRQHandler+0x52>
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fac9 	bl	80049f2 <UART_Receive_IT>
      return;
 8004460:	e17b      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 80b1 	beq.w	80045cc <HAL_UART_IRQHandler+0x1bc>
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_IRQHandler+0x70>
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80a6 	beq.w	80045cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_UART_IRQHandler+0x90>
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f043 0201 	orr.w	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_UART_IRQHandler+0xb0>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_UART_IRQHandler+0xd0>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f043 0204 	orr.w	r2, r3, #4
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00f      	beq.n	800450a <HAL_UART_IRQHandler+0xfa>
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_UART_IRQHandler+0xee>
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f043 0208 	orr.w	r2, r3, #8
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 811e 	beq.w	8004750 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <HAL_UART_IRQHandler+0x11e>
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa62 	bl	80049f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <HAL_UART_IRQHandler+0x146>
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d031      	beq.n	80045ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9a4 	bl	80048a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d123      	bne.n	80045b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d013      	beq.n	80045aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	4a76      	ldr	r2, [pc, #472]	; (8004760 <HAL_UART_IRQHandler+0x350>)
 8004588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	4618      	mov	r0, r3
 8004590:	f7fd ff05 	bl	800239e <HAL_DMA_Abort_IT>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045a4:	4610      	mov	r0, r2
 80045a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	e00e      	b.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8e3 	bl	8004776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00a      	b.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8df 	bl	8004776 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e006      	b.n	80045c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8db 	bl	8004776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045c6:	e0c3      	b.n	8004750 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	bf00      	nop
    return;
 80045ca:	e0c1      	b.n	8004750 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	f040 80a1 	bne.w	8004718 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 809b 	beq.w	8004718 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8095 	beq.w	8004718 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460e:	2b40      	cmp	r3, #64	; 0x40
 8004610:	d14e      	bne.n	80046b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800461c:	8a3b      	ldrh	r3, [r7, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8098 	beq.w	8004754 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004628:	8a3a      	ldrh	r2, [r7, #16]
 800462a:	429a      	cmp	r2, r3
 800462c:	f080 8092 	bcs.w	8004754 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8a3a      	ldrh	r2, [r7, #16]
 8004634:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b20      	cmp	r3, #32
 800463e:	d02b      	beq.n	8004698 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695a      	ldr	r2, [r3, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0210 	bic.w	r2, r2, #16
 800468c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fe46 	bl	8002324 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f86d 	bl	8004788 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046ae:	e051      	b.n	8004754 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d047      	beq.n	8004758 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046c8:	8a7b      	ldrh	r3, [r7, #18]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d044      	beq.n	8004758 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0210 	bic.w	r2, r2, #16
 800470a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	4619      	mov	r1, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f839 	bl	8004788 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004716:	e01f      	b.n	8004758 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_UART_IRQHandler+0x324>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f8f9 	bl	8004924 <UART_Transmit_IT>
    return;
 8004732:	e012      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00d      	beq.n	800475a <HAL_UART_IRQHandler+0x34a>
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f93a 	bl	80049c2 <UART_EndTransmit_IT>
    return;
 800474e:	e004      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
    return;
 8004750:	bf00      	nop
 8004752:	e002      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
      return;
 8004754:	bf00      	nop
 8004756:	e000      	b.n	800475a <HAL_UART_IRQHandler+0x34a>
      return;
 8004758:	bf00      	nop
  }
}
 800475a:	3728      	adds	r7, #40	; 0x28
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	080048fd 	.word	0x080048fd

08004764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ae:	e02c      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d028      	beq.n	800480a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <UART_WaitOnFlagUntilTimeout+0x30>
 80047be:	f7fc ffb1 	bl	8001724 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d21d      	bcs.n	800480a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68da      	ldr	r2, [r3, #12]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695a      	ldr	r2, [r3, #20]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0201 	bic.w	r2, r2, #1
 80047ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e00f      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	79fb      	ldrb	r3, [r7, #7]
 8004824:	429a      	cmp	r2, r3
 8004826:	d0c3      	beq.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004832:	b480      	push	{r7}
 8004834:	b085      	sub	sp, #20
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	4613      	mov	r3, r2
 800483e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2222      	movs	r2, #34	; 0x22
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004876:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0220 	orr.w	r2, r2, #32
 8004896:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048ba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d107      	bne.n	80048e4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0210 	bic.w	r2, r2, #16
 80048e2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff ff2d 	bl	8004776 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004932:	b2db      	uxtb	r3, r3
 8004934:	2b21      	cmp	r3, #33	; 0x21
 8004936:	d13e      	bne.n	80049b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d114      	bne.n	800496c <UART_Transmit_IT+0x48>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d110      	bne.n	800496c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	881b      	ldrh	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800495e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]
 800496a:	e008      	b.n	800497e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	1c59      	adds	r1, r3, #1
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6211      	str	r1, [r2, #32]
 8004976:	781a      	ldrb	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	4619      	mov	r1, r3
 800498c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	bc80      	pop	{r7}
 80049c0:	4770      	bx	lr

080049c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68da      	ldr	r2, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff febe 	bl	8004764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b22      	cmp	r3, #34	; 0x22
 8004a04:	f040 8099 	bne.w	8004b3a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a10:	d117      	bne.n	8004a42 <UART_Receive_IT+0x50>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d113      	bne.n	8004a42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	1c9a      	adds	r2, r3, #2
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a40:	e026      	b.n	8004a90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a46:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a54:	d007      	beq.n	8004a66 <UART_Receive_IT+0x74>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <UART_Receive_IT+0x82>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	e008      	b.n	8004a86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d148      	bne.n	8004b36 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0220 	bic.w	r2, r2, #32
 8004ab2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ac2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 0201 	bic.w	r2, r2, #1
 8004ad2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d123      	bne.n	8004b2c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0210 	bic.w	r2, r2, #16
 8004af8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b10      	cmp	r3, #16
 8004b06:	d10a      	bne.n	8004b1e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b22:	4619      	mov	r1, r3
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe2f 	bl	8004788 <HAL_UARTEx_RxEventCallback>
 8004b2a:	e002      	b.n	8004b32 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7fc fd61 	bl	80015f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e002      	b.n	8004b3c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689a      	ldr	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b84:	f023 030c 	bic.w	r3, r3, #12
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6812      	ldr	r2, [r2, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a55      	ldr	r2, [pc, #340]	; (8004d04 <UART_SetConfig+0x1c0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d103      	bne.n	8004bba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004bb2:	f7fe fc03 	bl	80033bc <HAL_RCC_GetPCLK2Freq>
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	e002      	b.n	8004bc0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bba:	f7fe fbeb 	bl	8003394 <HAL_RCC_GetPCLK1Freq>
 8004bbe:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc8:	d14c      	bne.n	8004c64 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009a      	lsls	r2, r3, #2
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	4a49      	ldr	r2, [pc, #292]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	0119      	lsls	r1, r3, #4
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009a      	lsls	r2, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c00:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004c02:	fba3 0302 	umull	r0, r3, r3, r2
 8004c06:	095b      	lsrs	r3, r3, #5
 8004c08:	2064      	movs	r0, #100	; 0x64
 8004c0a:	fb00 f303 	mul.w	r3, r0, r3
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	3332      	adds	r3, #50	; 0x32
 8004c14:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c22:	4419      	add	r1, r3
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009a      	lsls	r2, r3, #2
 8004c2e:	441a      	add	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c3a:	4b33      	ldr	r3, [pc, #204]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004c3c:	fba3 0302 	umull	r0, r3, r3, r2
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	2064      	movs	r0, #100	; 0x64
 8004c44:	fb00 f303 	mul.w	r3, r0, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	3332      	adds	r3, #50	; 0x32
 8004c4e:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004c50:	fba2 2303 	umull	r2, r3, r2, r3
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	f003 0207 	and.w	r2, r3, #7
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	440a      	add	r2, r1
 8004c60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c62:	e04a      	b.n	8004cfa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009a      	lsls	r2, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7a:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	0119      	lsls	r1, r3, #4
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009a      	lsls	r2, r3, #2
 8004c8e:	441a      	add	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c9a:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004c9c:	fba3 0302 	umull	r0, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2064      	movs	r0, #100	; 0x64
 8004ca4:	fb00 f303 	mul.w	r3, r0, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cba:	4419      	add	r1, r3
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009a      	lsls	r2, r3, #2
 8004cc6:	441a      	add	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004cd4:	fba3 0302 	umull	r0, r3, r3, r2
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	2064      	movs	r0, #100	; 0x64
 8004cdc:	fb00 f303 	mul.w	r3, r0, r3
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	3332      	adds	r3, #50	; 0x32
 8004ce6:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <UART_SetConfig+0x1c4>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	095b      	lsrs	r3, r3, #5
 8004cee:	f003 020f 	and.w	r2, r3, #15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	609a      	str	r2, [r3, #8]
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40013800 	.word	0x40013800
 8004d08:	51eb851f 	.word	0x51eb851f

08004d0c <__errno>:
 8004d0c:	4b01      	ldr	r3, [pc, #4]	; (8004d14 <__errno+0x8>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000000c 	.word	0x2000000c

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	4d0c      	ldr	r5, [pc, #48]	; (8004d50 <__libc_init_array+0x38>)
 8004d1e:	4c0d      	ldr	r4, [pc, #52]	; (8004d54 <__libc_init_array+0x3c>)
 8004d20:	1b64      	subs	r4, r4, r5
 8004d22:	10a4      	asrs	r4, r4, #2
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	d109      	bne.n	8004d3c <__libc_init_array+0x24>
 8004d28:	f000 fc5c 	bl	80055e4 <_init>
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	4d0a      	ldr	r5, [pc, #40]	; (8004d58 <__libc_init_array+0x40>)
 8004d30:	4c0a      	ldr	r4, [pc, #40]	; (8004d5c <__libc_init_array+0x44>)
 8004d32:	1b64      	subs	r4, r4, r5
 8004d34:	10a4      	asrs	r4, r4, #2
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	d105      	bne.n	8004d46 <__libc_init_array+0x2e>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d40:	4798      	blx	r3
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7ee      	b.n	8004d24 <__libc_init_array+0xc>
 8004d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4a:	4798      	blx	r3
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	e7f2      	b.n	8004d36 <__libc_init_array+0x1e>
 8004d50:	08005684 	.word	0x08005684
 8004d54:	08005684 	.word	0x08005684
 8004d58:	08005684 	.word	0x08005684
 8004d5c:	08005688 	.word	0x08005688

08004d60 <memset>:
 8004d60:	4603      	mov	r3, r0
 8004d62:	4402      	add	r2, r0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d100      	bne.n	8004d6a <memset+0xa>
 8004d68:	4770      	bx	lr
 8004d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6e:	e7f9      	b.n	8004d64 <memset+0x4>

08004d70 <siprintf>:
 8004d70:	b40e      	push	{r1, r2, r3}
 8004d72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d76:	b500      	push	{lr}
 8004d78:	b09c      	sub	sp, #112	; 0x70
 8004d7a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d7c:	9002      	str	r0, [sp, #8]
 8004d7e:	9006      	str	r0, [sp, #24]
 8004d80:	9107      	str	r1, [sp, #28]
 8004d82:	9104      	str	r1, [sp, #16]
 8004d84:	4808      	ldr	r0, [pc, #32]	; (8004da8 <siprintf+0x38>)
 8004d86:	4909      	ldr	r1, [pc, #36]	; (8004dac <siprintf+0x3c>)
 8004d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d8c:	9105      	str	r1, [sp, #20]
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	a902      	add	r1, sp, #8
 8004d92:	9301      	str	r3, [sp, #4]
 8004d94:	f000 f868 	bl	8004e68 <_svfiprintf_r>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	9b02      	ldr	r3, [sp, #8]
 8004d9c:	701a      	strb	r2, [r3, #0]
 8004d9e:	b01c      	add	sp, #112	; 0x70
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b003      	add	sp, #12
 8004da6:	4770      	bx	lr
 8004da8:	2000000c 	.word	0x2000000c
 8004dac:	ffff0208 	.word	0xffff0208

08004db0 <__ssputs_r>:
 8004db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004db4:	688e      	ldr	r6, [r1, #8]
 8004db6:	4682      	mov	sl, r0
 8004db8:	429e      	cmp	r6, r3
 8004dba:	460c      	mov	r4, r1
 8004dbc:	4690      	mov	r8, r2
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	d838      	bhi.n	8004e34 <__ssputs_r+0x84>
 8004dc2:	898a      	ldrh	r2, [r1, #12]
 8004dc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dc8:	d032      	beq.n	8004e30 <__ssputs_r+0x80>
 8004dca:	6825      	ldr	r5, [r4, #0]
 8004dcc:	6909      	ldr	r1, [r1, #16]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	eba5 0901 	sub.w	r9, r5, r1
 8004dd4:	6965      	ldr	r5, [r4, #20]
 8004dd6:	444b      	add	r3, r9
 8004dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ddc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004de0:	106d      	asrs	r5, r5, #1
 8004de2:	429d      	cmp	r5, r3
 8004de4:	bf38      	it	cc
 8004de6:	461d      	movcc	r5, r3
 8004de8:	0553      	lsls	r3, r2, #21
 8004dea:	d531      	bpl.n	8004e50 <__ssputs_r+0xa0>
 8004dec:	4629      	mov	r1, r5
 8004dee:	f000 fb53 	bl	8005498 <_malloc_r>
 8004df2:	4606      	mov	r6, r0
 8004df4:	b950      	cbnz	r0, 8004e0c <__ssputs_r+0x5c>
 8004df6:	230c      	movs	r3, #12
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	f8ca 3000 	str.w	r3, [sl]
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e06:	81a3      	strh	r3, [r4, #12]
 8004e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0c:	464a      	mov	r2, r9
 8004e0e:	6921      	ldr	r1, [r4, #16]
 8004e10:	f000 face 	bl	80053b0 <memcpy>
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1e:	81a3      	strh	r3, [r4, #12]
 8004e20:	6126      	str	r6, [r4, #16]
 8004e22:	444e      	add	r6, r9
 8004e24:	6026      	str	r6, [r4, #0]
 8004e26:	463e      	mov	r6, r7
 8004e28:	6165      	str	r5, [r4, #20]
 8004e2a:	eba5 0509 	sub.w	r5, r5, r9
 8004e2e:	60a5      	str	r5, [r4, #8]
 8004e30:	42be      	cmp	r6, r7
 8004e32:	d900      	bls.n	8004e36 <__ssputs_r+0x86>
 8004e34:	463e      	mov	r6, r7
 8004e36:	4632      	mov	r2, r6
 8004e38:	4641      	mov	r1, r8
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	f000 fac6 	bl	80053cc <memmove>
 8004e40:	68a3      	ldr	r3, [r4, #8]
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	1b9b      	subs	r3, r3, r6
 8004e46:	4432      	add	r2, r6
 8004e48:	2000      	movs	r0, #0
 8004e4a:	60a3      	str	r3, [r4, #8]
 8004e4c:	6022      	str	r2, [r4, #0]
 8004e4e:	e7db      	b.n	8004e08 <__ssputs_r+0x58>
 8004e50:	462a      	mov	r2, r5
 8004e52:	f000 fb7b 	bl	800554c <_realloc_r>
 8004e56:	4606      	mov	r6, r0
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d1e1      	bne.n	8004e20 <__ssputs_r+0x70>
 8004e5c:	4650      	mov	r0, sl
 8004e5e:	6921      	ldr	r1, [r4, #16]
 8004e60:	f000 face 	bl	8005400 <_free_r>
 8004e64:	e7c7      	b.n	8004df6 <__ssputs_r+0x46>
	...

08004e68 <_svfiprintf_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4698      	mov	r8, r3
 8004e6e:	898b      	ldrh	r3, [r1, #12]
 8004e70:	4607      	mov	r7, r0
 8004e72:	061b      	lsls	r3, r3, #24
 8004e74:	460d      	mov	r5, r1
 8004e76:	4614      	mov	r4, r2
 8004e78:	b09d      	sub	sp, #116	; 0x74
 8004e7a:	d50e      	bpl.n	8004e9a <_svfiprintf_r+0x32>
 8004e7c:	690b      	ldr	r3, [r1, #16]
 8004e7e:	b963      	cbnz	r3, 8004e9a <_svfiprintf_r+0x32>
 8004e80:	2140      	movs	r1, #64	; 0x40
 8004e82:	f000 fb09 	bl	8005498 <_malloc_r>
 8004e86:	6028      	str	r0, [r5, #0]
 8004e88:	6128      	str	r0, [r5, #16]
 8004e8a:	b920      	cbnz	r0, 8004e96 <_svfiprintf_r+0x2e>
 8004e8c:	230c      	movs	r3, #12
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	f04f 30ff 	mov.w	r0, #4294967295
 8004e94:	e0d1      	b.n	800503a <_svfiprintf_r+0x1d2>
 8004e96:	2340      	movs	r3, #64	; 0x40
 8004e98:	616b      	str	r3, [r5, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ea4:	2330      	movs	r3, #48	; 0x30
 8004ea6:	f04f 0901 	mov.w	r9, #1
 8004eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8004eae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005054 <_svfiprintf_r+0x1ec>
 8004eb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eb6:	4623      	mov	r3, r4
 8004eb8:	469a      	mov	sl, r3
 8004eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ebe:	b10a      	cbz	r2, 8004ec4 <_svfiprintf_r+0x5c>
 8004ec0:	2a25      	cmp	r2, #37	; 0x25
 8004ec2:	d1f9      	bne.n	8004eb8 <_svfiprintf_r+0x50>
 8004ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8004ec8:	d00b      	beq.n	8004ee2 <_svfiprintf_r+0x7a>
 8004eca:	465b      	mov	r3, fp
 8004ecc:	4622      	mov	r2, r4
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ff6d 	bl	8004db0 <__ssputs_r>
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	f000 80aa 	beq.w	8005030 <_svfiprintf_r+0x1c8>
 8004edc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ede:	445a      	add	r2, fp
 8004ee0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80a2 	beq.w	8005030 <_svfiprintf_r+0x1c8>
 8004eec:	2300      	movs	r3, #0
 8004eee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ef6:	f10a 0a01 	add.w	sl, sl, #1
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	9307      	str	r3, [sp, #28]
 8004efe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f02:	931a      	str	r3, [sp, #104]	; 0x68
 8004f04:	4654      	mov	r4, sl
 8004f06:	2205      	movs	r2, #5
 8004f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f0c:	4851      	ldr	r0, [pc, #324]	; (8005054 <_svfiprintf_r+0x1ec>)
 8004f0e:	f000 fa41 	bl	8005394 <memchr>
 8004f12:	9a04      	ldr	r2, [sp, #16]
 8004f14:	b9d8      	cbnz	r0, 8004f4e <_svfiprintf_r+0xe6>
 8004f16:	06d0      	lsls	r0, r2, #27
 8004f18:	bf44      	itt	mi
 8004f1a:	2320      	movmi	r3, #32
 8004f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f20:	0711      	lsls	r1, r2, #28
 8004f22:	bf44      	itt	mi
 8004f24:	232b      	movmi	r3, #43	; 0x2b
 8004f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f30:	d015      	beq.n	8004f5e <_svfiprintf_r+0xf6>
 8004f32:	4654      	mov	r4, sl
 8004f34:	2000      	movs	r0, #0
 8004f36:	f04f 0c0a 	mov.w	ip, #10
 8004f3a:	9a07      	ldr	r2, [sp, #28]
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f42:	3b30      	subs	r3, #48	; 0x30
 8004f44:	2b09      	cmp	r3, #9
 8004f46:	d94e      	bls.n	8004fe6 <_svfiprintf_r+0x17e>
 8004f48:	b1b0      	cbz	r0, 8004f78 <_svfiprintf_r+0x110>
 8004f4a:	9207      	str	r2, [sp, #28]
 8004f4c:	e014      	b.n	8004f78 <_svfiprintf_r+0x110>
 8004f4e:	eba0 0308 	sub.w	r3, r0, r8
 8004f52:	fa09 f303 	lsl.w	r3, r9, r3
 8004f56:	4313      	orrs	r3, r2
 8004f58:	46a2      	mov	sl, r4
 8004f5a:	9304      	str	r3, [sp, #16]
 8004f5c:	e7d2      	b.n	8004f04 <_svfiprintf_r+0x9c>
 8004f5e:	9b03      	ldr	r3, [sp, #12]
 8004f60:	1d19      	adds	r1, r3, #4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	9103      	str	r1, [sp, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfbb      	ittet	lt
 8004f6a:	425b      	neglt	r3, r3
 8004f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f70:	9307      	strge	r3, [sp, #28]
 8004f72:	9307      	strlt	r3, [sp, #28]
 8004f74:	bfb8      	it	lt
 8004f76:	9204      	strlt	r2, [sp, #16]
 8004f78:	7823      	ldrb	r3, [r4, #0]
 8004f7a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f7c:	d10c      	bne.n	8004f98 <_svfiprintf_r+0x130>
 8004f7e:	7863      	ldrb	r3, [r4, #1]
 8004f80:	2b2a      	cmp	r3, #42	; 0x2a
 8004f82:	d135      	bne.n	8004ff0 <_svfiprintf_r+0x188>
 8004f84:	9b03      	ldr	r3, [sp, #12]
 8004f86:	3402      	adds	r4, #2
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	9203      	str	r2, [sp, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfb8      	it	lt
 8004f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f96:	9305      	str	r3, [sp, #20]
 8004f98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005064 <_svfiprintf_r+0x1fc>
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	4650      	mov	r0, sl
 8004fa0:	7821      	ldrb	r1, [r4, #0]
 8004fa2:	f000 f9f7 	bl	8005394 <memchr>
 8004fa6:	b140      	cbz	r0, 8004fba <_svfiprintf_r+0x152>
 8004fa8:	2340      	movs	r3, #64	; 0x40
 8004faa:	eba0 000a 	sub.w	r0, r0, sl
 8004fae:	fa03 f000 	lsl.w	r0, r3, r0
 8004fb2:	9b04      	ldr	r3, [sp, #16]
 8004fb4:	3401      	adds	r4, #1
 8004fb6:	4303      	orrs	r3, r0
 8004fb8:	9304      	str	r3, [sp, #16]
 8004fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbe:	2206      	movs	r2, #6
 8004fc0:	4825      	ldr	r0, [pc, #148]	; (8005058 <_svfiprintf_r+0x1f0>)
 8004fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fc6:	f000 f9e5 	bl	8005394 <memchr>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d038      	beq.n	8005040 <_svfiprintf_r+0x1d8>
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <_svfiprintf_r+0x1f4>)
 8004fd0:	bb1b      	cbnz	r3, 800501a <_svfiprintf_r+0x1b2>
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	3307      	adds	r3, #7
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	3308      	adds	r3, #8
 8004fdc:	9303      	str	r3, [sp, #12]
 8004fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe0:	4433      	add	r3, r6
 8004fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fe4:	e767      	b.n	8004eb6 <_svfiprintf_r+0x4e>
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	2001      	movs	r0, #1
 8004fea:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fee:	e7a5      	b.n	8004f3c <_svfiprintf_r+0xd4>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	f04f 0c0a 	mov.w	ip, #10
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	3401      	adds	r4, #1
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005002:	3a30      	subs	r2, #48	; 0x30
 8005004:	2a09      	cmp	r2, #9
 8005006:	d903      	bls.n	8005010 <_svfiprintf_r+0x1a8>
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0c5      	beq.n	8004f98 <_svfiprintf_r+0x130>
 800500c:	9105      	str	r1, [sp, #20]
 800500e:	e7c3      	b.n	8004f98 <_svfiprintf_r+0x130>
 8005010:	4604      	mov	r4, r0
 8005012:	2301      	movs	r3, #1
 8005014:	fb0c 2101 	mla	r1, ip, r1, r2
 8005018:	e7f0      	b.n	8004ffc <_svfiprintf_r+0x194>
 800501a:	ab03      	add	r3, sp, #12
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	462a      	mov	r2, r5
 8005020:	4638      	mov	r0, r7
 8005022:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <_svfiprintf_r+0x1f8>)
 8005024:	a904      	add	r1, sp, #16
 8005026:	f3af 8000 	nop.w
 800502a:	1c42      	adds	r2, r0, #1
 800502c:	4606      	mov	r6, r0
 800502e:	d1d6      	bne.n	8004fde <_svfiprintf_r+0x176>
 8005030:	89ab      	ldrh	r3, [r5, #12]
 8005032:	065b      	lsls	r3, r3, #25
 8005034:	f53f af2c 	bmi.w	8004e90 <_svfiprintf_r+0x28>
 8005038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800503a:	b01d      	add	sp, #116	; 0x74
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	ab03      	add	r3, sp, #12
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	462a      	mov	r2, r5
 8005046:	4638      	mov	r0, r7
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <_svfiprintf_r+0x1f8>)
 800504a:	a904      	add	r1, sp, #16
 800504c:	f000 f87c 	bl	8005148 <_printf_i>
 8005050:	e7eb      	b.n	800502a <_svfiprintf_r+0x1c2>
 8005052:	bf00      	nop
 8005054:	08005648 	.word	0x08005648
 8005058:	08005652 	.word	0x08005652
 800505c:	00000000 	.word	0x00000000
 8005060:	08004db1 	.word	0x08004db1
 8005064:	0800564e 	.word	0x0800564e

08005068 <_printf_common>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	4616      	mov	r6, r2
 800506e:	4699      	mov	r9, r3
 8005070:	688a      	ldr	r2, [r1, #8]
 8005072:	690b      	ldr	r3, [r1, #16]
 8005074:	4607      	mov	r7, r0
 8005076:	4293      	cmp	r3, r2
 8005078:	bfb8      	it	lt
 800507a:	4613      	movlt	r3, r2
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005082:	460c      	mov	r4, r1
 8005084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005088:	b10a      	cbz	r2, 800508e <_printf_common+0x26>
 800508a:	3301      	adds	r3, #1
 800508c:	6033      	str	r3, [r6, #0]
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0699      	lsls	r1, r3, #26
 8005092:	bf42      	ittt	mi
 8005094:	6833      	ldrmi	r3, [r6, #0]
 8005096:	3302      	addmi	r3, #2
 8005098:	6033      	strmi	r3, [r6, #0]
 800509a:	6825      	ldr	r5, [r4, #0]
 800509c:	f015 0506 	ands.w	r5, r5, #6
 80050a0:	d106      	bne.n	80050b0 <_printf_common+0x48>
 80050a2:	f104 0a19 	add.w	sl, r4, #25
 80050a6:	68e3      	ldr	r3, [r4, #12]
 80050a8:	6832      	ldr	r2, [r6, #0]
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	42ab      	cmp	r3, r5
 80050ae:	dc28      	bgt.n	8005102 <_printf_common+0x9a>
 80050b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050b4:	1e13      	subs	r3, r2, #0
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	bf18      	it	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	0692      	lsls	r2, r2, #26
 80050be:	d42d      	bmi.n	800511c <_printf_common+0xb4>
 80050c0:	4649      	mov	r1, r9
 80050c2:	4638      	mov	r0, r7
 80050c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050c8:	47c0      	blx	r8
 80050ca:	3001      	adds	r0, #1
 80050cc:	d020      	beq.n	8005110 <_printf_common+0xa8>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	68e5      	ldr	r5, [r4, #12]
 80050d2:	f003 0306 	and.w	r3, r3, #6
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	bf18      	it	ne
 80050da:	2500      	movne	r5, #0
 80050dc:	6832      	ldr	r2, [r6, #0]
 80050de:	f04f 0600 	mov.w	r6, #0
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	bf08      	it	eq
 80050e6:	1aad      	subeq	r5, r5, r2
 80050e8:	6922      	ldr	r2, [r4, #16]
 80050ea:	bf08      	it	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bfc4      	itt	gt
 80050f4:	1a9b      	subgt	r3, r3, r2
 80050f6:	18ed      	addgt	r5, r5, r3
 80050f8:	341a      	adds	r4, #26
 80050fa:	42b5      	cmp	r5, r6
 80050fc:	d11a      	bne.n	8005134 <_printf_common+0xcc>
 80050fe:	2000      	movs	r0, #0
 8005100:	e008      	b.n	8005114 <_printf_common+0xac>
 8005102:	2301      	movs	r3, #1
 8005104:	4652      	mov	r2, sl
 8005106:	4649      	mov	r1, r9
 8005108:	4638      	mov	r0, r7
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d103      	bne.n	8005118 <_printf_common+0xb0>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	3501      	adds	r5, #1
 800511a:	e7c4      	b.n	80050a6 <_printf_common+0x3e>
 800511c:	2030      	movs	r0, #48	; 0x30
 800511e:	18e1      	adds	r1, r4, r3
 8005120:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800512a:	4422      	add	r2, r4
 800512c:	3302      	adds	r3, #2
 800512e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005132:	e7c5      	b.n	80050c0 <_printf_common+0x58>
 8005134:	2301      	movs	r3, #1
 8005136:	4622      	mov	r2, r4
 8005138:	4649      	mov	r1, r9
 800513a:	4638      	mov	r0, r7
 800513c:	47c0      	blx	r8
 800513e:	3001      	adds	r0, #1
 8005140:	d0e6      	beq.n	8005110 <_printf_common+0xa8>
 8005142:	3601      	adds	r6, #1
 8005144:	e7d9      	b.n	80050fa <_printf_common+0x92>
	...

08005148 <_printf_i>:
 8005148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800514c:	460c      	mov	r4, r1
 800514e:	7e27      	ldrb	r7, [r4, #24]
 8005150:	4691      	mov	r9, r2
 8005152:	2f78      	cmp	r7, #120	; 0x78
 8005154:	4680      	mov	r8, r0
 8005156:	469a      	mov	sl, r3
 8005158:	990c      	ldr	r1, [sp, #48]	; 0x30
 800515a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800515e:	d807      	bhi.n	8005170 <_printf_i+0x28>
 8005160:	2f62      	cmp	r7, #98	; 0x62
 8005162:	d80a      	bhi.n	800517a <_printf_i+0x32>
 8005164:	2f00      	cmp	r7, #0
 8005166:	f000 80d9 	beq.w	800531c <_printf_i+0x1d4>
 800516a:	2f58      	cmp	r7, #88	; 0x58
 800516c:	f000 80a4 	beq.w	80052b8 <_printf_i+0x170>
 8005170:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005178:	e03a      	b.n	80051f0 <_printf_i+0xa8>
 800517a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800517e:	2b15      	cmp	r3, #21
 8005180:	d8f6      	bhi.n	8005170 <_printf_i+0x28>
 8005182:	a001      	add	r0, pc, #4	; (adr r0, 8005188 <_printf_i+0x40>)
 8005184:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005188:	080051e1 	.word	0x080051e1
 800518c:	080051f5 	.word	0x080051f5
 8005190:	08005171 	.word	0x08005171
 8005194:	08005171 	.word	0x08005171
 8005198:	08005171 	.word	0x08005171
 800519c:	08005171 	.word	0x08005171
 80051a0:	080051f5 	.word	0x080051f5
 80051a4:	08005171 	.word	0x08005171
 80051a8:	08005171 	.word	0x08005171
 80051ac:	08005171 	.word	0x08005171
 80051b0:	08005171 	.word	0x08005171
 80051b4:	08005303 	.word	0x08005303
 80051b8:	08005225 	.word	0x08005225
 80051bc:	080052e5 	.word	0x080052e5
 80051c0:	08005171 	.word	0x08005171
 80051c4:	08005171 	.word	0x08005171
 80051c8:	08005325 	.word	0x08005325
 80051cc:	08005171 	.word	0x08005171
 80051d0:	08005225 	.word	0x08005225
 80051d4:	08005171 	.word	0x08005171
 80051d8:	08005171 	.word	0x08005171
 80051dc:	080052ed 	.word	0x080052ed
 80051e0:	680b      	ldr	r3, [r1, #0]
 80051e2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	600a      	str	r2, [r1, #0]
 80051ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0a4      	b.n	800533e <_printf_i+0x1f6>
 80051f4:	6825      	ldr	r5, [r4, #0]
 80051f6:	6808      	ldr	r0, [r1, #0]
 80051f8:	062e      	lsls	r6, r5, #24
 80051fa:	f100 0304 	add.w	r3, r0, #4
 80051fe:	d50a      	bpl.n	8005216 <_printf_i+0xce>
 8005200:	6805      	ldr	r5, [r0, #0]
 8005202:	600b      	str	r3, [r1, #0]
 8005204:	2d00      	cmp	r5, #0
 8005206:	da03      	bge.n	8005210 <_printf_i+0xc8>
 8005208:	232d      	movs	r3, #45	; 0x2d
 800520a:	426d      	negs	r5, r5
 800520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005210:	230a      	movs	r3, #10
 8005212:	485e      	ldr	r0, [pc, #376]	; (800538c <_printf_i+0x244>)
 8005214:	e019      	b.n	800524a <_printf_i+0x102>
 8005216:	f015 0f40 	tst.w	r5, #64	; 0x40
 800521a:	6805      	ldr	r5, [r0, #0]
 800521c:	600b      	str	r3, [r1, #0]
 800521e:	bf18      	it	ne
 8005220:	b22d      	sxthne	r5, r5
 8005222:	e7ef      	b.n	8005204 <_printf_i+0xbc>
 8005224:	680b      	ldr	r3, [r1, #0]
 8005226:	6825      	ldr	r5, [r4, #0]
 8005228:	1d18      	adds	r0, r3, #4
 800522a:	6008      	str	r0, [r1, #0]
 800522c:	0628      	lsls	r0, r5, #24
 800522e:	d501      	bpl.n	8005234 <_printf_i+0xec>
 8005230:	681d      	ldr	r5, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0xf2>
 8005234:	0669      	lsls	r1, r5, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0xe8>
 8005238:	881d      	ldrh	r5, [r3, #0]
 800523a:	2f6f      	cmp	r7, #111	; 0x6f
 800523c:	bf0c      	ite	eq
 800523e:	2308      	moveq	r3, #8
 8005240:	230a      	movne	r3, #10
 8005242:	4852      	ldr	r0, [pc, #328]	; (800538c <_printf_i+0x244>)
 8005244:	2100      	movs	r1, #0
 8005246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800524a:	6866      	ldr	r6, [r4, #4]
 800524c:	2e00      	cmp	r6, #0
 800524e:	bfa8      	it	ge
 8005250:	6821      	ldrge	r1, [r4, #0]
 8005252:	60a6      	str	r6, [r4, #8]
 8005254:	bfa4      	itt	ge
 8005256:	f021 0104 	bicge.w	r1, r1, #4
 800525a:	6021      	strge	r1, [r4, #0]
 800525c:	b90d      	cbnz	r5, 8005262 <_printf_i+0x11a>
 800525e:	2e00      	cmp	r6, #0
 8005260:	d04d      	beq.n	80052fe <_printf_i+0x1b6>
 8005262:	4616      	mov	r6, r2
 8005264:	fbb5 f1f3 	udiv	r1, r5, r3
 8005268:	fb03 5711 	mls	r7, r3, r1, r5
 800526c:	5dc7      	ldrb	r7, [r0, r7]
 800526e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005272:	462f      	mov	r7, r5
 8005274:	42bb      	cmp	r3, r7
 8005276:	460d      	mov	r5, r1
 8005278:	d9f4      	bls.n	8005264 <_printf_i+0x11c>
 800527a:	2b08      	cmp	r3, #8
 800527c:	d10b      	bne.n	8005296 <_printf_i+0x14e>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	07df      	lsls	r7, r3, #31
 8005282:	d508      	bpl.n	8005296 <_printf_i+0x14e>
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	6861      	ldr	r1, [r4, #4]
 8005288:	4299      	cmp	r1, r3
 800528a:	bfde      	ittt	le
 800528c:	2330      	movle	r3, #48	; 0x30
 800528e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005292:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005296:	1b92      	subs	r2, r2, r6
 8005298:	6122      	str	r2, [r4, #16]
 800529a:	464b      	mov	r3, r9
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f8cd a000 	str.w	sl, [sp]
 80052a4:	aa03      	add	r2, sp, #12
 80052a6:	f7ff fedf 	bl	8005068 <_printf_common>
 80052aa:	3001      	adds	r0, #1
 80052ac:	d14c      	bne.n	8005348 <_printf_i+0x200>
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	b004      	add	sp, #16
 80052b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b8:	4834      	ldr	r0, [pc, #208]	; (800538c <_printf_i+0x244>)
 80052ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052be:	680e      	ldr	r6, [r1, #0]
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80052c6:	061f      	lsls	r7, r3, #24
 80052c8:	600e      	str	r6, [r1, #0]
 80052ca:	d514      	bpl.n	80052f6 <_printf_i+0x1ae>
 80052cc:	07d9      	lsls	r1, r3, #31
 80052ce:	bf44      	itt	mi
 80052d0:	f043 0320 	orrmi.w	r3, r3, #32
 80052d4:	6023      	strmi	r3, [r4, #0]
 80052d6:	b91d      	cbnz	r5, 80052e0 <_printf_i+0x198>
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	f023 0320 	bic.w	r3, r3, #32
 80052de:	6023      	str	r3, [r4, #0]
 80052e0:	2310      	movs	r3, #16
 80052e2:	e7af      	b.n	8005244 <_printf_i+0xfc>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	f043 0320 	orr.w	r3, r3, #32
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	2378      	movs	r3, #120	; 0x78
 80052ee:	4828      	ldr	r0, [pc, #160]	; (8005390 <_printf_i+0x248>)
 80052f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052f4:	e7e3      	b.n	80052be <_printf_i+0x176>
 80052f6:	065e      	lsls	r6, r3, #25
 80052f8:	bf48      	it	mi
 80052fa:	b2ad      	uxthmi	r5, r5
 80052fc:	e7e6      	b.n	80052cc <_printf_i+0x184>
 80052fe:	4616      	mov	r6, r2
 8005300:	e7bb      	b.n	800527a <_printf_i+0x132>
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	6826      	ldr	r6, [r4, #0]
 8005306:	1d1d      	adds	r5, r3, #4
 8005308:	6960      	ldr	r0, [r4, #20]
 800530a:	600d      	str	r5, [r1, #0]
 800530c:	0635      	lsls	r5, r6, #24
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	d501      	bpl.n	8005316 <_printf_i+0x1ce>
 8005312:	6018      	str	r0, [r3, #0]
 8005314:	e002      	b.n	800531c <_printf_i+0x1d4>
 8005316:	0671      	lsls	r1, r6, #25
 8005318:	d5fb      	bpl.n	8005312 <_printf_i+0x1ca>
 800531a:	8018      	strh	r0, [r3, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	4616      	mov	r6, r2
 8005320:	6123      	str	r3, [r4, #16]
 8005322:	e7ba      	b.n	800529a <_printf_i+0x152>
 8005324:	680b      	ldr	r3, [r1, #0]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	600a      	str	r2, [r1, #0]
 800532a:	681e      	ldr	r6, [r3, #0]
 800532c:	2100      	movs	r1, #0
 800532e:	4630      	mov	r0, r6
 8005330:	6862      	ldr	r2, [r4, #4]
 8005332:	f000 f82f 	bl	8005394 <memchr>
 8005336:	b108      	cbz	r0, 800533c <_printf_i+0x1f4>
 8005338:	1b80      	subs	r0, r0, r6
 800533a:	6060      	str	r0, [r4, #4]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	2300      	movs	r3, #0
 8005342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005346:	e7a8      	b.n	800529a <_printf_i+0x152>
 8005348:	4632      	mov	r2, r6
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	47d0      	blx	sl
 8005352:	3001      	adds	r0, #1
 8005354:	d0ab      	beq.n	80052ae <_printf_i+0x166>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	079b      	lsls	r3, r3, #30
 800535a:	d413      	bmi.n	8005384 <_printf_i+0x23c>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e7a4      	b.n	80052b2 <_printf_i+0x16a>
 8005368:	2301      	movs	r3, #1
 800536a:	4632      	mov	r2, r6
 800536c:	4649      	mov	r1, r9
 800536e:	4640      	mov	r0, r8
 8005370:	47d0      	blx	sl
 8005372:	3001      	adds	r0, #1
 8005374:	d09b      	beq.n	80052ae <_printf_i+0x166>
 8005376:	3501      	adds	r5, #1
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	1a5b      	subs	r3, r3, r1
 800537e:	42ab      	cmp	r3, r5
 8005380:	dcf2      	bgt.n	8005368 <_printf_i+0x220>
 8005382:	e7eb      	b.n	800535c <_printf_i+0x214>
 8005384:	2500      	movs	r5, #0
 8005386:	f104 0619 	add.w	r6, r4, #25
 800538a:	e7f5      	b.n	8005378 <_printf_i+0x230>
 800538c:	08005659 	.word	0x08005659
 8005390:	0800566a 	.word	0x0800566a

08005394 <memchr>:
 8005394:	4603      	mov	r3, r0
 8005396:	b510      	push	{r4, lr}
 8005398:	b2c9      	uxtb	r1, r1
 800539a:	4402      	add	r2, r0
 800539c:	4293      	cmp	r3, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	d101      	bne.n	80053a6 <memchr+0x12>
 80053a2:	2000      	movs	r0, #0
 80053a4:	e003      	b.n	80053ae <memchr+0x1a>
 80053a6:	7804      	ldrb	r4, [r0, #0]
 80053a8:	3301      	adds	r3, #1
 80053aa:	428c      	cmp	r4, r1
 80053ac:	d1f6      	bne.n	800539c <memchr+0x8>
 80053ae:	bd10      	pop	{r4, pc}

080053b0 <memcpy>:
 80053b0:	440a      	add	r2, r1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b8:	d100      	bne.n	80053bc <memcpy+0xc>
 80053ba:	4770      	bx	lr
 80053bc:	b510      	push	{r4, lr}
 80053be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c2:	4291      	cmp	r1, r2
 80053c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c8:	d1f9      	bne.n	80053be <memcpy+0xe>
 80053ca:	bd10      	pop	{r4, pc}

080053cc <memmove>:
 80053cc:	4288      	cmp	r0, r1
 80053ce:	b510      	push	{r4, lr}
 80053d0:	eb01 0402 	add.w	r4, r1, r2
 80053d4:	d902      	bls.n	80053dc <memmove+0x10>
 80053d6:	4284      	cmp	r4, r0
 80053d8:	4623      	mov	r3, r4
 80053da:	d807      	bhi.n	80053ec <memmove+0x20>
 80053dc:	1e43      	subs	r3, r0, #1
 80053de:	42a1      	cmp	r1, r4
 80053e0:	d008      	beq.n	80053f4 <memmove+0x28>
 80053e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ea:	e7f8      	b.n	80053de <memmove+0x12>
 80053ec:	4601      	mov	r1, r0
 80053ee:	4402      	add	r2, r0
 80053f0:	428a      	cmp	r2, r1
 80053f2:	d100      	bne.n	80053f6 <memmove+0x2a>
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053fe:	e7f7      	b.n	80053f0 <memmove+0x24>

08005400 <_free_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4605      	mov	r5, r0
 8005404:	2900      	cmp	r1, #0
 8005406:	d043      	beq.n	8005490 <_free_r+0x90>
 8005408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800540c:	1f0c      	subs	r4, r1, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	bfb8      	it	lt
 8005412:	18e4      	addlt	r4, r4, r3
 8005414:	f000 f8d0 	bl	80055b8 <__malloc_lock>
 8005418:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <_free_r+0x94>)
 800541a:	6813      	ldr	r3, [r2, #0]
 800541c:	4610      	mov	r0, r2
 800541e:	b933      	cbnz	r3, 800542e <_free_r+0x2e>
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	6014      	str	r4, [r2, #0]
 8005424:	4628      	mov	r0, r5
 8005426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800542a:	f000 b8cb 	b.w	80055c4 <__malloc_unlock>
 800542e:	42a3      	cmp	r3, r4
 8005430:	d90a      	bls.n	8005448 <_free_r+0x48>
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1862      	adds	r2, r4, r1
 8005436:	4293      	cmp	r3, r2
 8005438:	bf01      	itttt	eq
 800543a:	681a      	ldreq	r2, [r3, #0]
 800543c:	685b      	ldreq	r3, [r3, #4]
 800543e:	1852      	addeq	r2, r2, r1
 8005440:	6022      	streq	r2, [r4, #0]
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6004      	str	r4, [r0, #0]
 8005446:	e7ed      	b.n	8005424 <_free_r+0x24>
 8005448:	461a      	mov	r2, r3
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	b10b      	cbz	r3, 8005452 <_free_r+0x52>
 800544e:	42a3      	cmp	r3, r4
 8005450:	d9fa      	bls.n	8005448 <_free_r+0x48>
 8005452:	6811      	ldr	r1, [r2, #0]
 8005454:	1850      	adds	r0, r2, r1
 8005456:	42a0      	cmp	r0, r4
 8005458:	d10b      	bne.n	8005472 <_free_r+0x72>
 800545a:	6820      	ldr	r0, [r4, #0]
 800545c:	4401      	add	r1, r0
 800545e:	1850      	adds	r0, r2, r1
 8005460:	4283      	cmp	r3, r0
 8005462:	6011      	str	r1, [r2, #0]
 8005464:	d1de      	bne.n	8005424 <_free_r+0x24>
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4401      	add	r1, r0
 800546c:	6011      	str	r1, [r2, #0]
 800546e:	6053      	str	r3, [r2, #4]
 8005470:	e7d8      	b.n	8005424 <_free_r+0x24>
 8005472:	d902      	bls.n	800547a <_free_r+0x7a>
 8005474:	230c      	movs	r3, #12
 8005476:	602b      	str	r3, [r5, #0]
 8005478:	e7d4      	b.n	8005424 <_free_r+0x24>
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	1821      	adds	r1, r4, r0
 800547e:	428b      	cmp	r3, r1
 8005480:	bf01      	itttt	eq
 8005482:	6819      	ldreq	r1, [r3, #0]
 8005484:	685b      	ldreq	r3, [r3, #4]
 8005486:	1809      	addeq	r1, r1, r0
 8005488:	6021      	streq	r1, [r4, #0]
 800548a:	6063      	str	r3, [r4, #4]
 800548c:	6054      	str	r4, [r2, #4]
 800548e:	e7c9      	b.n	8005424 <_free_r+0x24>
 8005490:	bd38      	pop	{r3, r4, r5, pc}
 8005492:	bf00      	nop
 8005494:	20000098 	.word	0x20000098

08005498 <_malloc_r>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	1ccd      	adds	r5, r1, #3
 800549c:	f025 0503 	bic.w	r5, r5, #3
 80054a0:	3508      	adds	r5, #8
 80054a2:	2d0c      	cmp	r5, #12
 80054a4:	bf38      	it	cc
 80054a6:	250c      	movcc	r5, #12
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	4606      	mov	r6, r0
 80054ac:	db01      	blt.n	80054b2 <_malloc_r+0x1a>
 80054ae:	42a9      	cmp	r1, r5
 80054b0:	d903      	bls.n	80054ba <_malloc_r+0x22>
 80054b2:	230c      	movs	r3, #12
 80054b4:	6033      	str	r3, [r6, #0]
 80054b6:	2000      	movs	r0, #0
 80054b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ba:	f000 f87d 	bl	80055b8 <__malloc_lock>
 80054be:	4921      	ldr	r1, [pc, #132]	; (8005544 <_malloc_r+0xac>)
 80054c0:	680a      	ldr	r2, [r1, #0]
 80054c2:	4614      	mov	r4, r2
 80054c4:	b99c      	cbnz	r4, 80054ee <_malloc_r+0x56>
 80054c6:	4f20      	ldr	r7, [pc, #128]	; (8005548 <_malloc_r+0xb0>)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	b923      	cbnz	r3, 80054d6 <_malloc_r+0x3e>
 80054cc:	4621      	mov	r1, r4
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f862 	bl	8005598 <_sbrk_r>
 80054d4:	6038      	str	r0, [r7, #0]
 80054d6:	4629      	mov	r1, r5
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 f85d 	bl	8005598 <_sbrk_r>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	d123      	bne.n	800552a <_malloc_r+0x92>
 80054e2:	230c      	movs	r3, #12
 80054e4:	4630      	mov	r0, r6
 80054e6:	6033      	str	r3, [r6, #0]
 80054e8:	f000 f86c 	bl	80055c4 <__malloc_unlock>
 80054ec:	e7e3      	b.n	80054b6 <_malloc_r+0x1e>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	1b5b      	subs	r3, r3, r5
 80054f2:	d417      	bmi.n	8005524 <_malloc_r+0x8c>
 80054f4:	2b0b      	cmp	r3, #11
 80054f6:	d903      	bls.n	8005500 <_malloc_r+0x68>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	441c      	add	r4, r3
 80054fc:	6025      	str	r5, [r4, #0]
 80054fe:	e004      	b.n	800550a <_malloc_r+0x72>
 8005500:	6863      	ldr	r3, [r4, #4]
 8005502:	42a2      	cmp	r2, r4
 8005504:	bf0c      	ite	eq
 8005506:	600b      	streq	r3, [r1, #0]
 8005508:	6053      	strne	r3, [r2, #4]
 800550a:	4630      	mov	r0, r6
 800550c:	f000 f85a 	bl	80055c4 <__malloc_unlock>
 8005510:	f104 000b 	add.w	r0, r4, #11
 8005514:	1d23      	adds	r3, r4, #4
 8005516:	f020 0007 	bic.w	r0, r0, #7
 800551a:	1ac2      	subs	r2, r0, r3
 800551c:	d0cc      	beq.n	80054b8 <_malloc_r+0x20>
 800551e:	1a1b      	subs	r3, r3, r0
 8005520:	50a3      	str	r3, [r4, r2]
 8005522:	e7c9      	b.n	80054b8 <_malloc_r+0x20>
 8005524:	4622      	mov	r2, r4
 8005526:	6864      	ldr	r4, [r4, #4]
 8005528:	e7cc      	b.n	80054c4 <_malloc_r+0x2c>
 800552a:	1cc4      	adds	r4, r0, #3
 800552c:	f024 0403 	bic.w	r4, r4, #3
 8005530:	42a0      	cmp	r0, r4
 8005532:	d0e3      	beq.n	80054fc <_malloc_r+0x64>
 8005534:	1a21      	subs	r1, r4, r0
 8005536:	4630      	mov	r0, r6
 8005538:	f000 f82e 	bl	8005598 <_sbrk_r>
 800553c:	3001      	adds	r0, #1
 800553e:	d1dd      	bne.n	80054fc <_malloc_r+0x64>
 8005540:	e7cf      	b.n	80054e2 <_malloc_r+0x4a>
 8005542:	bf00      	nop
 8005544:	20000098 	.word	0x20000098
 8005548:	2000009c 	.word	0x2000009c

0800554c <_realloc_r>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	4607      	mov	r7, r0
 8005550:	4614      	mov	r4, r2
 8005552:	460e      	mov	r6, r1
 8005554:	b921      	cbnz	r1, 8005560 <_realloc_r+0x14>
 8005556:	4611      	mov	r1, r2
 8005558:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800555c:	f7ff bf9c 	b.w	8005498 <_malloc_r>
 8005560:	b922      	cbnz	r2, 800556c <_realloc_r+0x20>
 8005562:	f7ff ff4d 	bl	8005400 <_free_r>
 8005566:	4625      	mov	r5, r4
 8005568:	4628      	mov	r0, r5
 800556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800556c:	f000 f830 	bl	80055d0 <_malloc_usable_size_r>
 8005570:	42a0      	cmp	r0, r4
 8005572:	d20f      	bcs.n	8005594 <_realloc_r+0x48>
 8005574:	4621      	mov	r1, r4
 8005576:	4638      	mov	r0, r7
 8005578:	f7ff ff8e 	bl	8005498 <_malloc_r>
 800557c:	4605      	mov	r5, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d0f2      	beq.n	8005568 <_realloc_r+0x1c>
 8005582:	4631      	mov	r1, r6
 8005584:	4622      	mov	r2, r4
 8005586:	f7ff ff13 	bl	80053b0 <memcpy>
 800558a:	4631      	mov	r1, r6
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff ff37 	bl	8005400 <_free_r>
 8005592:	e7e9      	b.n	8005568 <_realloc_r+0x1c>
 8005594:	4635      	mov	r5, r6
 8005596:	e7e7      	b.n	8005568 <_realloc_r+0x1c>

08005598 <_sbrk_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	2300      	movs	r3, #0
 800559c:	4d05      	ldr	r5, [pc, #20]	; (80055b4 <_sbrk_r+0x1c>)
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fb fd6a 	bl	800107c <_sbrk>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_sbrk_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_sbrk_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	20000280 	.word	0x20000280

080055b8 <__malloc_lock>:
 80055b8:	4801      	ldr	r0, [pc, #4]	; (80055c0 <__malloc_lock+0x8>)
 80055ba:	f000 b811 	b.w	80055e0 <__retarget_lock_acquire_recursive>
 80055be:	bf00      	nop
 80055c0:	20000288 	.word	0x20000288

080055c4 <__malloc_unlock>:
 80055c4:	4801      	ldr	r0, [pc, #4]	; (80055cc <__malloc_unlock+0x8>)
 80055c6:	f000 b80c 	b.w	80055e2 <__retarget_lock_release_recursive>
 80055ca:	bf00      	nop
 80055cc:	20000288 	.word	0x20000288

080055d0 <_malloc_usable_size_r>:
 80055d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d4:	1f18      	subs	r0, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bfbc      	itt	lt
 80055da:	580b      	ldrlt	r3, [r1, r0]
 80055dc:	18c0      	addlt	r0, r0, r3
 80055de:	4770      	bx	lr

080055e0 <__retarget_lock_acquire_recursive>:
 80055e0:	4770      	bx	lr

080055e2 <__retarget_lock_release_recursive>:
 80055e2:	4770      	bx	lr

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
