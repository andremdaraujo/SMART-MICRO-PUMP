
SMART-MICRO-PUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006954  08006954  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800695c  0800695c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006960  08006960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000070  080069d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080069d4  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012469  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dbc  00000000  00000000  00032502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  000352c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c50  00000000  00000000  00036c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001108b  00000000  00000000  0004d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084698  00000000  00000000  0005e8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e2f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003af0  00000000  00000000  000e2fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08006690 	.word	0x08006690

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08006690 	.word	0x08006690

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2uiz>:
 800092c:	004a      	lsls	r2, r1, #1
 800092e:	d211      	bcs.n	8000954 <__aeabi_d2uiz+0x28>
 8000930:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000934:	d211      	bcs.n	800095a <__aeabi_d2uiz+0x2e>
 8000936:	d50d      	bpl.n	8000954 <__aeabi_d2uiz+0x28>
 8000938:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800093c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000940:	d40e      	bmi.n	8000960 <__aeabi_d2uiz+0x34>
 8000942:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800094a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800094e:	fa23 f002 	lsr.w	r0, r3, r2
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800095e:	d102      	bne.n	8000966 <__aeabi_d2uiz+0x3a>
 8000960:	f04f 30ff 	mov.w	r0, #4294967295
 8000964:	4770      	bx	lr
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	4770      	bx	lr

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_frsub>:
 8000a0c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a10:	e002      	b.n	8000a18 <__addsf3>
 8000a12:	bf00      	nop

08000a14 <__aeabi_fsub>:
 8000a14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a18 <__addsf3>:
 8000a18:	0042      	lsls	r2, r0, #1
 8000a1a:	bf1f      	itttt	ne
 8000a1c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a20:	ea92 0f03 	teqne	r2, r3
 8000a24:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a28:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a2c:	d06a      	beq.n	8000b04 <__addsf3+0xec>
 8000a2e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a32:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a36:	bfc1      	itttt	gt
 8000a38:	18d2      	addgt	r2, r2, r3
 8000a3a:	4041      	eorgt	r1, r0
 8000a3c:	4048      	eorgt	r0, r1
 8000a3e:	4041      	eorgt	r1, r0
 8000a40:	bfb8      	it	lt
 8000a42:	425b      	neglt	r3, r3
 8000a44:	2b19      	cmp	r3, #25
 8000a46:	bf88      	it	hi
 8000a48:	4770      	bxhi	lr
 8000a4a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a62:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a66:	bf18      	it	ne
 8000a68:	4249      	negne	r1, r1
 8000a6a:	ea92 0f03 	teq	r2, r3
 8000a6e:	d03f      	beq.n	8000af0 <__addsf3+0xd8>
 8000a70:	f1a2 0201 	sub.w	r2, r2, #1
 8000a74:	fa41 fc03 	asr.w	ip, r1, r3
 8000a78:	eb10 000c 	adds.w	r0, r0, ip
 8000a7c:	f1c3 0320 	rsb	r3, r3, #32
 8000a80:	fa01 f103 	lsl.w	r1, r1, r3
 8000a84:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a88:	d502      	bpl.n	8000a90 <__addsf3+0x78>
 8000a8a:	4249      	negs	r1, r1
 8000a8c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a90:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a94:	d313      	bcc.n	8000abe <__addsf3+0xa6>
 8000a96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a9a:	d306      	bcc.n	8000aaa <__addsf3+0x92>
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000aa2:	f102 0201 	add.w	r2, r2, #1
 8000aa6:	2afe      	cmp	r2, #254	; 0xfe
 8000aa8:	d251      	bcs.n	8000b4e <__addsf3+0x136>
 8000aaa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ab2:	bf08      	it	eq
 8000ab4:	f020 0001 	biceq.w	r0, r0, #1
 8000ab8:	ea40 0003 	orr.w	r0, r0, r3
 8000abc:	4770      	bx	lr
 8000abe:	0049      	lsls	r1, r1, #1
 8000ac0:	eb40 0000 	adc.w	r0, r0, r0
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000acc:	d2ed      	bcs.n	8000aaa <__addsf3+0x92>
 8000ace:	fab0 fc80 	clz	ip, r0
 8000ad2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ad6:	ebb2 020c 	subs.w	r2, r2, ip
 8000ada:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ade:	bfaa      	itet	ge
 8000ae0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ae4:	4252      	neglt	r2, r2
 8000ae6:	4318      	orrge	r0, r3
 8000ae8:	bfbc      	itt	lt
 8000aea:	40d0      	lsrlt	r0, r2
 8000aec:	4318      	orrlt	r0, r3
 8000aee:	4770      	bx	lr
 8000af0:	f092 0f00 	teq	r2, #0
 8000af4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000af8:	bf06      	itte	eq
 8000afa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000afe:	3201      	addeq	r2, #1
 8000b00:	3b01      	subne	r3, #1
 8000b02:	e7b5      	b.n	8000a70 <__addsf3+0x58>
 8000b04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b0c:	bf18      	it	ne
 8000b0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b12:	d021      	beq.n	8000b58 <__addsf3+0x140>
 8000b14:	ea92 0f03 	teq	r2, r3
 8000b18:	d004      	beq.n	8000b24 <__addsf3+0x10c>
 8000b1a:	f092 0f00 	teq	r2, #0
 8000b1e:	bf08      	it	eq
 8000b20:	4608      	moveq	r0, r1
 8000b22:	4770      	bx	lr
 8000b24:	ea90 0f01 	teq	r0, r1
 8000b28:	bf1c      	itt	ne
 8000b2a:	2000      	movne	r0, #0
 8000b2c:	4770      	bxne	lr
 8000b2e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b32:	d104      	bne.n	8000b3e <__addsf3+0x126>
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	bf28      	it	cs
 8000b38:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b3c:	4770      	bx	lr
 8000b3e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b42:	bf3c      	itt	cc
 8000b44:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b48:	4770      	bxcc	lr
 8000b4a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b4e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b56:	4770      	bx	lr
 8000b58:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b5c:	bf16      	itet	ne
 8000b5e:	4608      	movne	r0, r1
 8000b60:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b64:	4601      	movne	r1, r0
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	bf06      	itte	eq
 8000b6a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b6e:	ea90 0f01 	teqeq	r0, r1
 8000b72:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_ui2f>:
 8000b78:	f04f 0300 	mov.w	r3, #0
 8000b7c:	e004      	b.n	8000b88 <__aeabi_i2f+0x8>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_i2f>:
 8000b80:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b84:	bf48      	it	mi
 8000b86:	4240      	negmi	r0, r0
 8000b88:	ea5f 0c00 	movs.w	ip, r0
 8000b8c:	bf08      	it	eq
 8000b8e:	4770      	bxeq	lr
 8000b90:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b94:	4601      	mov	r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	e01c      	b.n	8000bd6 <__aeabi_l2f+0x2a>

08000b9c <__aeabi_ul2f>:
 8000b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ba0:	bf08      	it	eq
 8000ba2:	4770      	bxeq	lr
 8000ba4:	f04f 0300 	mov.w	r3, #0
 8000ba8:	e00a      	b.n	8000bc0 <__aeabi_l2f+0x14>
 8000baa:	bf00      	nop

08000bac <__aeabi_l2f>:
 8000bac:	ea50 0201 	orrs.w	r2, r0, r1
 8000bb0:	bf08      	it	eq
 8000bb2:	4770      	bxeq	lr
 8000bb4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__aeabi_l2f+0x14>
 8000bba:	4240      	negs	r0, r0
 8000bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bc0:	ea5f 0c01 	movs.w	ip, r1
 8000bc4:	bf02      	ittt	eq
 8000bc6:	4684      	moveq	ip, r0
 8000bc8:	4601      	moveq	r1, r0
 8000bca:	2000      	moveq	r0, #0
 8000bcc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bda:	fabc f28c 	clz	r2, ip
 8000bde:	3a08      	subs	r2, #8
 8000be0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000be4:	db10      	blt.n	8000c08 <__aeabi_l2f+0x5c>
 8000be6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bea:	4463      	add	r3, ip
 8000bec:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bf8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f102 0220 	add.w	r2, r2, #32
 8000c0c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c10:	f1c2 0220 	rsb	r2, r2, #32
 8000c14:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c18:	fa21 f202 	lsr.w	r2, r1, r2
 8000c1c:	eb43 0002 	adc.w	r0, r3, r2
 8000c20:	bf08      	it	eq
 8000c22:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_fmul>:
 8000c28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c30:	bf1e      	ittt	ne
 8000c32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c36:	ea92 0f0c 	teqne	r2, ip
 8000c3a:	ea93 0f0c 	teqne	r3, ip
 8000c3e:	d06f      	beq.n	8000d20 <__aeabi_fmul+0xf8>
 8000c40:	441a      	add	r2, r3
 8000c42:	ea80 0c01 	eor.w	ip, r0, r1
 8000c46:	0240      	lsls	r0, r0, #9
 8000c48:	bf18      	it	ne
 8000c4a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c4e:	d01e      	beq.n	8000c8e <__aeabi_fmul+0x66>
 8000c50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c54:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c58:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c5c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c60:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c64:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c68:	bf3e      	ittt	cc
 8000c6a:	0049      	lslcc	r1, r1, #1
 8000c6c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c70:	005b      	lslcc	r3, r3, #1
 8000c72:	ea40 0001 	orr.w	r0, r0, r1
 8000c76:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c7a:	2afd      	cmp	r2, #253	; 0xfd
 8000c7c:	d81d      	bhi.n	8000cba <__aeabi_fmul+0x92>
 8000c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	4770      	bx	lr
 8000c8e:	f090 0f00 	teq	r0, #0
 8000c92:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c96:	bf08      	it	eq
 8000c98:	0249      	lsleq	r1, r1, #9
 8000c9a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c9e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ca2:	3a7f      	subs	r2, #127	; 0x7f
 8000ca4:	bfc2      	ittt	gt
 8000ca6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000caa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cae:	4770      	bxgt	lr
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	dc5d      	bgt.n	8000d78 <__aeabi_fmul+0x150>
 8000cbc:	f112 0f19 	cmn.w	r2, #25
 8000cc0:	bfdc      	itt	le
 8000cc2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000cc6:	4770      	bxle	lr
 8000cc8:	f1c2 0200 	rsb	r2, r2, #0
 8000ccc:	0041      	lsls	r1, r0, #1
 8000cce:	fa21 f102 	lsr.w	r1, r1, r2
 8000cd2:	f1c2 0220 	rsb	r2, r2, #32
 8000cd6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cda:	ea5f 0031 	movs.w	r0, r1, rrx
 8000cde:	f140 0000 	adc.w	r0, r0, #0
 8000ce2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ce6:	bf08      	it	eq
 8000ce8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cec:	4770      	bx	lr
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cf6:	bf02      	ittt	eq
 8000cf8:	0040      	lsleq	r0, r0, #1
 8000cfa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cfe:	3a01      	subeq	r2, #1
 8000d00:	d0f9      	beq.n	8000cf6 <__aeabi_fmul+0xce>
 8000d02:	ea40 000c 	orr.w	r0, r0, ip
 8000d06:	f093 0f00 	teq	r3, #0
 8000d0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d0e:	bf02      	ittt	eq
 8000d10:	0049      	lsleq	r1, r1, #1
 8000d12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d16:	3b01      	subeq	r3, #1
 8000d18:	d0f9      	beq.n	8000d0e <__aeabi_fmul+0xe6>
 8000d1a:	ea41 010c 	orr.w	r1, r1, ip
 8000d1e:	e78f      	b.n	8000c40 <__aeabi_fmul+0x18>
 8000d20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d24:	ea92 0f0c 	teq	r2, ip
 8000d28:	bf18      	it	ne
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d00a      	beq.n	8000d46 <__aeabi_fmul+0x11e>
 8000d30:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d34:	bf18      	it	ne
 8000d36:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d3a:	d1d8      	bne.n	8000cee <__aeabi_fmul+0xc6>
 8000d3c:	ea80 0001 	eor.w	r0, r0, r1
 8000d40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d44:	4770      	bx	lr
 8000d46:	f090 0f00 	teq	r0, #0
 8000d4a:	bf17      	itett	ne
 8000d4c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d50:	4608      	moveq	r0, r1
 8000d52:	f091 0f00 	teqne	r1, #0
 8000d56:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d5a:	d014      	beq.n	8000d86 <__aeabi_fmul+0x15e>
 8000d5c:	ea92 0f0c 	teq	r2, ip
 8000d60:	d101      	bne.n	8000d66 <__aeabi_fmul+0x13e>
 8000d62:	0242      	lsls	r2, r0, #9
 8000d64:	d10f      	bne.n	8000d86 <__aeabi_fmul+0x15e>
 8000d66:	ea93 0f0c 	teq	r3, ip
 8000d6a:	d103      	bne.n	8000d74 <__aeabi_fmul+0x14c>
 8000d6c:	024b      	lsls	r3, r1, #9
 8000d6e:	bf18      	it	ne
 8000d70:	4608      	movne	r0, r1
 8000d72:	d108      	bne.n	8000d86 <__aeabi_fmul+0x15e>
 8000d74:	ea80 0001 	eor.w	r0, r0, r1
 8000d78:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d8a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d8e:	4770      	bx	lr

08000d90 <__aeabi_fdiv>:
 8000d90:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d94:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d98:	bf1e      	ittt	ne
 8000d9a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d9e:	ea92 0f0c 	teqne	r2, ip
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d069      	beq.n	8000e7c <__aeabi_fdiv+0xec>
 8000da8:	eba2 0203 	sub.w	r2, r2, r3
 8000dac:	ea80 0c01 	eor.w	ip, r0, r1
 8000db0:	0249      	lsls	r1, r1, #9
 8000db2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000db6:	d037      	beq.n	8000e28 <__aeabi_fdiv+0x98>
 8000db8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dbc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000dc0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000dc4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	bf38      	it	cc
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000dd2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	bf24      	itt	cs
 8000dda:	1a5b      	subcs	r3, r3, r1
 8000ddc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000de0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000de4:	bf24      	itt	cs
 8000de6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000dea:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dee:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000df2:	bf24      	itt	cs
 8000df4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000df8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dfc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e00:	bf24      	itt	cs
 8000e02:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e06:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	bf18      	it	ne
 8000e0e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e12:	d1e0      	bne.n	8000dd6 <__aeabi_fdiv+0x46>
 8000e14:	2afd      	cmp	r2, #253	; 0xfd
 8000e16:	f63f af50 	bhi.w	8000cba <__aeabi_fmul+0x92>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e20:	bf08      	it	eq
 8000e22:	f020 0001 	biceq.w	r0, r0, #1
 8000e26:	4770      	bx	lr
 8000e28:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e30:	327f      	adds	r2, #127	; 0x7f
 8000e32:	bfc2      	ittt	gt
 8000e34:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e38:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3c:	4770      	bxgt	lr
 8000e3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	3a01      	subs	r2, #1
 8000e48:	e737      	b.n	8000cba <__aeabi_fmul+0x92>
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fdiv+0xc2>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fdiv+0xda>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e795      	b.n	8000da8 <__aeabi_fdiv+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	d108      	bne.n	8000e98 <__aeabi_fdiv+0x108>
 8000e86:	0242      	lsls	r2, r0, #9
 8000e88:	f47f af7d 	bne.w	8000d86 <__aeabi_fmul+0x15e>
 8000e8c:	ea93 0f0c 	teq	r3, ip
 8000e90:	f47f af70 	bne.w	8000d74 <__aeabi_fmul+0x14c>
 8000e94:	4608      	mov	r0, r1
 8000e96:	e776      	b.n	8000d86 <__aeabi_fmul+0x15e>
 8000e98:	ea93 0f0c 	teq	r3, ip
 8000e9c:	d104      	bne.n	8000ea8 <__aeabi_fdiv+0x118>
 8000e9e:	024b      	lsls	r3, r1, #9
 8000ea0:	f43f af4c 	beq.w	8000d3c <__aeabi_fmul+0x114>
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	e76e      	b.n	8000d86 <__aeabi_fmul+0x15e>
 8000ea8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eac:	bf18      	it	ne
 8000eae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb2:	d1ca      	bne.n	8000e4a <__aeabi_fdiv+0xba>
 8000eb4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000eb8:	f47f af5c 	bne.w	8000d74 <__aeabi_fmul+0x14c>
 8000ebc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ec0:	f47f af3c 	bne.w	8000d3c <__aeabi_fmul+0x114>
 8000ec4:	e75f      	b.n	8000d86 <__aeabi_fmul+0x15e>
 8000ec6:	bf00      	nop

08000ec8 <__gesf2>:
 8000ec8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ecc:	e006      	b.n	8000edc <__cmpsf2+0x4>
 8000ece:	bf00      	nop

08000ed0 <__lesf2>:
 8000ed0:	f04f 0c01 	mov.w	ip, #1
 8000ed4:	e002      	b.n	8000edc <__cmpsf2+0x4>
 8000ed6:	bf00      	nop

08000ed8 <__cmpsf2>:
 8000ed8:	f04f 0c01 	mov.w	ip, #1
 8000edc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ee0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ee4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eec:	bf18      	it	ne
 8000eee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ef2:	d011      	beq.n	8000f18 <__cmpsf2+0x40>
 8000ef4:	b001      	add	sp, #4
 8000ef6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000efa:	bf18      	it	ne
 8000efc:	ea90 0f01 	teqne	r0, r1
 8000f00:	bf58      	it	pl
 8000f02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f06:	bf88      	it	hi
 8000f08:	17c8      	asrhi	r0, r1, #31
 8000f0a:	bf38      	it	cc
 8000f0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f10:	bf18      	it	ne
 8000f12:	f040 0001 	orrne.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f1c:	d102      	bne.n	8000f24 <__cmpsf2+0x4c>
 8000f1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f22:	d105      	bne.n	8000f30 <__cmpsf2+0x58>
 8000f24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f28:	d1e4      	bne.n	8000ef4 <__cmpsf2+0x1c>
 8000f2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f2e:	d0e1      	beq.n	8000ef4 <__cmpsf2+0x1c>
 8000f30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__aeabi_cfrcmple>:
 8000f38:	4684      	mov	ip, r0
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	4661      	mov	r1, ip
 8000f3e:	e7ff      	b.n	8000f40 <__aeabi_cfcmpeq>

08000f40 <__aeabi_cfcmpeq>:
 8000f40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f42:	f7ff ffc9 	bl	8000ed8 <__cmpsf2>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	bf48      	it	mi
 8000f4a:	f110 0f00 	cmnmi.w	r0, #0
 8000f4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f50 <__aeabi_fcmpeq>:
 8000f50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f54:	f7ff fff4 	bl	8000f40 <__aeabi_cfcmpeq>
 8000f58:	bf0c      	ite	eq
 8000f5a:	2001      	moveq	r0, #1
 8000f5c:	2000      	movne	r0, #0
 8000f5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f62:	bf00      	nop

08000f64 <__aeabi_fcmplt>:
 8000f64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f68:	f7ff ffea 	bl	8000f40 <__aeabi_cfcmpeq>
 8000f6c:	bf34      	ite	cc
 8000f6e:	2001      	movcc	r0, #1
 8000f70:	2000      	movcs	r0, #0
 8000f72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f76:	bf00      	nop

08000f78 <__aeabi_fcmple>:
 8000f78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f7c:	f7ff ffe0 	bl	8000f40 <__aeabi_cfcmpeq>
 8000f80:	bf94      	ite	ls
 8000f82:	2001      	movls	r0, #1
 8000f84:	2000      	movhi	r0, #0
 8000f86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f8a:	bf00      	nop

08000f8c <__aeabi_fcmpge>:
 8000f8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f90:	f7ff ffd2 	bl	8000f38 <__aeabi_cfrcmple>
 8000f94:	bf94      	ite	ls
 8000f96:	2001      	movls	r0, #1
 8000f98:	2000      	movhi	r0, #0
 8000f9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_fcmpgt>:
 8000fa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa4:	f7ff ffc8 	bl	8000f38 <__aeabi_cfrcmple>
 8000fa8:	bf34      	ite	cc
 8000faa:	2001      	movcc	r0, #1
 8000fac:	2000      	movcs	r0, #0
 8000fae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_f2uiz>:
 8000fb4:	0042      	lsls	r2, r0, #1
 8000fb6:	d20e      	bcs.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fbc:	d30b      	bcc.n	8000fd6 <__aeabi_f2uiz+0x22>
 8000fbe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc6:	d409      	bmi.n	8000fdc <__aeabi_f2uiz+0x28>
 8000fc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd4:	4770      	bx	lr
 8000fd6:	f04f 0000 	mov.w	r0, #0
 8000fda:	4770      	bx	lr
 8000fdc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fe0:	d101      	bne.n	8000fe6 <__aeabi_f2uiz+0x32>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	d102      	bne.n	8000fec <__aeabi_f2uiz+0x38>
 8000fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fea:	4770      	bx	lr
 8000fec:	f04f 0000 	mov.w	r0, #0
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_uldivmod>:
 8000ff4:	b953      	cbnz	r3, 800100c <__aeabi_uldivmod+0x18>
 8000ff6:	b94a      	cbnz	r2, 800100c <__aeabi_uldivmod+0x18>
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	bf08      	it	eq
 8000ffc:	2800      	cmpeq	r0, #0
 8000ffe:	bf1c      	itt	ne
 8001000:	f04f 31ff 	movne.w	r1, #4294967295
 8001004:	f04f 30ff 	movne.w	r0, #4294967295
 8001008:	f000 b96e 	b.w	80012e8 <__aeabi_idiv0>
 800100c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001010:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001014:	f000 f806 	bl	8001024 <__udivmoddi4>
 8001018:	f8dd e004 	ldr.w	lr, [sp, #4]
 800101c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001020:	b004      	add	sp, #16
 8001022:	4770      	bx	lr

08001024 <__udivmoddi4>:
 8001024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001028:	9e08      	ldr	r6, [sp, #32]
 800102a:	460d      	mov	r5, r1
 800102c:	4604      	mov	r4, r0
 800102e:	468e      	mov	lr, r1
 8001030:	2b00      	cmp	r3, #0
 8001032:	f040 8083 	bne.w	800113c <__udivmoddi4+0x118>
 8001036:	428a      	cmp	r2, r1
 8001038:	4617      	mov	r7, r2
 800103a:	d947      	bls.n	80010cc <__udivmoddi4+0xa8>
 800103c:	fab2 f382 	clz	r3, r2
 8001040:	b14b      	cbz	r3, 8001056 <__udivmoddi4+0x32>
 8001042:	f1c3 0120 	rsb	r1, r3, #32
 8001046:	fa05 fe03 	lsl.w	lr, r5, r3
 800104a:	fa20 f101 	lsr.w	r1, r0, r1
 800104e:	409f      	lsls	r7, r3
 8001050:	ea41 0e0e 	orr.w	lr, r1, lr
 8001054:	409c      	lsls	r4, r3
 8001056:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800105a:	fbbe fcf8 	udiv	ip, lr, r8
 800105e:	fa1f f987 	uxth.w	r9, r7
 8001062:	fb08 e21c 	mls	r2, r8, ip, lr
 8001066:	fb0c f009 	mul.w	r0, ip, r9
 800106a:	0c21      	lsrs	r1, r4, #16
 800106c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001070:	4290      	cmp	r0, r2
 8001072:	d90a      	bls.n	800108a <__udivmoddi4+0x66>
 8001074:	18ba      	adds	r2, r7, r2
 8001076:	f10c 31ff 	add.w	r1, ip, #4294967295
 800107a:	f080 8118 	bcs.w	80012ae <__udivmoddi4+0x28a>
 800107e:	4290      	cmp	r0, r2
 8001080:	f240 8115 	bls.w	80012ae <__udivmoddi4+0x28a>
 8001084:	f1ac 0c02 	sub.w	ip, ip, #2
 8001088:	443a      	add	r2, r7
 800108a:	1a12      	subs	r2, r2, r0
 800108c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001090:	fb08 2210 	mls	r2, r8, r0, r2
 8001094:	fb00 f109 	mul.w	r1, r0, r9
 8001098:	b2a4      	uxth	r4, r4
 800109a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800109e:	42a1      	cmp	r1, r4
 80010a0:	d909      	bls.n	80010b6 <__udivmoddi4+0x92>
 80010a2:	193c      	adds	r4, r7, r4
 80010a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80010a8:	f080 8103 	bcs.w	80012b2 <__udivmoddi4+0x28e>
 80010ac:	42a1      	cmp	r1, r4
 80010ae:	f240 8100 	bls.w	80012b2 <__udivmoddi4+0x28e>
 80010b2:	3802      	subs	r0, #2
 80010b4:	443c      	add	r4, r7
 80010b6:	1a64      	subs	r4, r4, r1
 80010b8:	2100      	movs	r1, #0
 80010ba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010be:	b11e      	cbz	r6, 80010c8 <__udivmoddi4+0xa4>
 80010c0:	2200      	movs	r2, #0
 80010c2:	40dc      	lsrs	r4, r3
 80010c4:	e9c6 4200 	strd	r4, r2, [r6]
 80010c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010cc:	b902      	cbnz	r2, 80010d0 <__udivmoddi4+0xac>
 80010ce:	deff      	udf	#255	; 0xff
 80010d0:	fab2 f382 	clz	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d14f      	bne.n	8001178 <__udivmoddi4+0x154>
 80010d8:	1a8d      	subs	r5, r1, r2
 80010da:	2101      	movs	r1, #1
 80010dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80010e0:	fa1f f882 	uxth.w	r8, r2
 80010e4:	fbb5 fcfe 	udiv	ip, r5, lr
 80010e8:	fb0e 551c 	mls	r5, lr, ip, r5
 80010ec:	fb08 f00c 	mul.w	r0, r8, ip
 80010f0:	0c22      	lsrs	r2, r4, #16
 80010f2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80010f6:	42a8      	cmp	r0, r5
 80010f8:	d907      	bls.n	800110a <__udivmoddi4+0xe6>
 80010fa:	197d      	adds	r5, r7, r5
 80010fc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0xe4>
 8001102:	42a8      	cmp	r0, r5
 8001104:	f200 80e9 	bhi.w	80012da <__udivmoddi4+0x2b6>
 8001108:	4694      	mov	ip, r2
 800110a:	1a2d      	subs	r5, r5, r0
 800110c:	fbb5 f0fe 	udiv	r0, r5, lr
 8001110:	fb0e 5510 	mls	r5, lr, r0, r5
 8001114:	fb08 f800 	mul.w	r8, r8, r0
 8001118:	b2a4      	uxth	r4, r4
 800111a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800111e:	45a0      	cmp	r8, r4
 8001120:	d907      	bls.n	8001132 <__udivmoddi4+0x10e>
 8001122:	193c      	adds	r4, r7, r4
 8001124:	f100 32ff 	add.w	r2, r0, #4294967295
 8001128:	d202      	bcs.n	8001130 <__udivmoddi4+0x10c>
 800112a:	45a0      	cmp	r8, r4
 800112c:	f200 80d9 	bhi.w	80012e2 <__udivmoddi4+0x2be>
 8001130:	4610      	mov	r0, r2
 8001132:	eba4 0408 	sub.w	r4, r4, r8
 8001136:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800113a:	e7c0      	b.n	80010be <__udivmoddi4+0x9a>
 800113c:	428b      	cmp	r3, r1
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0x12e>
 8001140:	2e00      	cmp	r6, #0
 8001142:	f000 80b1 	beq.w	80012a8 <__udivmoddi4+0x284>
 8001146:	2100      	movs	r1, #0
 8001148:	e9c6 0500 	strd	r0, r5, [r6]
 800114c:	4608      	mov	r0, r1
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	fab3 f183 	clz	r1, r3
 8001156:	2900      	cmp	r1, #0
 8001158:	d14b      	bne.n	80011f2 <__udivmoddi4+0x1ce>
 800115a:	42ab      	cmp	r3, r5
 800115c:	d302      	bcc.n	8001164 <__udivmoddi4+0x140>
 800115e:	4282      	cmp	r2, r0
 8001160:	f200 80b9 	bhi.w	80012d6 <__udivmoddi4+0x2b2>
 8001164:	1a84      	subs	r4, r0, r2
 8001166:	eb65 0303 	sbc.w	r3, r5, r3
 800116a:	2001      	movs	r0, #1
 800116c:	469e      	mov	lr, r3
 800116e:	2e00      	cmp	r6, #0
 8001170:	d0aa      	beq.n	80010c8 <__udivmoddi4+0xa4>
 8001172:	e9c6 4e00 	strd	r4, lr, [r6]
 8001176:	e7a7      	b.n	80010c8 <__udivmoddi4+0xa4>
 8001178:	409f      	lsls	r7, r3
 800117a:	f1c3 0220 	rsb	r2, r3, #32
 800117e:	40d1      	lsrs	r1, r2
 8001180:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001184:	fbb1 f0fe 	udiv	r0, r1, lr
 8001188:	fa1f f887 	uxth.w	r8, r7
 800118c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001190:	fa24 f202 	lsr.w	r2, r4, r2
 8001194:	409d      	lsls	r5, r3
 8001196:	fb00 fc08 	mul.w	ip, r0, r8
 800119a:	432a      	orrs	r2, r5
 800119c:	0c15      	lsrs	r5, r2, #16
 800119e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80011a2:	45ac      	cmp	ip, r5
 80011a4:	fa04 f403 	lsl.w	r4, r4, r3
 80011a8:	d909      	bls.n	80011be <__udivmoddi4+0x19a>
 80011aa:	197d      	adds	r5, r7, r5
 80011ac:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b0:	f080 808f 	bcs.w	80012d2 <__udivmoddi4+0x2ae>
 80011b4:	45ac      	cmp	ip, r5
 80011b6:	f240 808c 	bls.w	80012d2 <__udivmoddi4+0x2ae>
 80011ba:	3802      	subs	r0, #2
 80011bc:	443d      	add	r5, r7
 80011be:	eba5 050c 	sub.w	r5, r5, ip
 80011c2:	fbb5 f1fe 	udiv	r1, r5, lr
 80011c6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80011ca:	fb01 f908 	mul.w	r9, r1, r8
 80011ce:	b295      	uxth	r5, r2
 80011d0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80011d4:	45a9      	cmp	r9, r5
 80011d6:	d907      	bls.n	80011e8 <__udivmoddi4+0x1c4>
 80011d8:	197d      	adds	r5, r7, r5
 80011da:	f101 32ff 	add.w	r2, r1, #4294967295
 80011de:	d274      	bcs.n	80012ca <__udivmoddi4+0x2a6>
 80011e0:	45a9      	cmp	r9, r5
 80011e2:	d972      	bls.n	80012ca <__udivmoddi4+0x2a6>
 80011e4:	3902      	subs	r1, #2
 80011e6:	443d      	add	r5, r7
 80011e8:	eba5 0509 	sub.w	r5, r5, r9
 80011ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80011f0:	e778      	b.n	80010e4 <__udivmoddi4+0xc0>
 80011f2:	f1c1 0720 	rsb	r7, r1, #32
 80011f6:	408b      	lsls	r3, r1
 80011f8:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fc:	ea4c 0c03 	orr.w	ip, ip, r3
 8001200:	fa25 f407 	lsr.w	r4, r5, r7
 8001204:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001208:	fbb4 f9fe 	udiv	r9, r4, lr
 800120c:	fa1f f88c 	uxth.w	r8, ip
 8001210:	fb0e 4419 	mls	r4, lr, r9, r4
 8001214:	fa20 f307 	lsr.w	r3, r0, r7
 8001218:	fb09 fa08 	mul.w	sl, r9, r8
 800121c:	408d      	lsls	r5, r1
 800121e:	431d      	orrs	r5, r3
 8001220:	0c2b      	lsrs	r3, r5, #16
 8001222:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001226:	45a2      	cmp	sl, r4
 8001228:	fa02 f201 	lsl.w	r2, r2, r1
 800122c:	fa00 f301 	lsl.w	r3, r0, r1
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x222>
 8001232:	eb1c 0404 	adds.w	r4, ip, r4
 8001236:	f109 30ff 	add.w	r0, r9, #4294967295
 800123a:	d248      	bcs.n	80012ce <__udivmoddi4+0x2aa>
 800123c:	45a2      	cmp	sl, r4
 800123e:	d946      	bls.n	80012ce <__udivmoddi4+0x2aa>
 8001240:	f1a9 0902 	sub.w	r9, r9, #2
 8001244:	4464      	add	r4, ip
 8001246:	eba4 040a 	sub.w	r4, r4, sl
 800124a:	fbb4 f0fe 	udiv	r0, r4, lr
 800124e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001252:	fb00 fa08 	mul.w	sl, r0, r8
 8001256:	b2ad      	uxth	r5, r5
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	45a2      	cmp	sl, r4
 800125e:	d908      	bls.n	8001272 <__udivmoddi4+0x24e>
 8001260:	eb1c 0404 	adds.w	r4, ip, r4
 8001264:	f100 35ff 	add.w	r5, r0, #4294967295
 8001268:	d22d      	bcs.n	80012c6 <__udivmoddi4+0x2a2>
 800126a:	45a2      	cmp	sl, r4
 800126c:	d92b      	bls.n	80012c6 <__udivmoddi4+0x2a2>
 800126e:	3802      	subs	r0, #2
 8001270:	4464      	add	r4, ip
 8001272:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001276:	fba0 8902 	umull	r8, r9, r0, r2
 800127a:	eba4 040a 	sub.w	r4, r4, sl
 800127e:	454c      	cmp	r4, r9
 8001280:	46c6      	mov	lr, r8
 8001282:	464d      	mov	r5, r9
 8001284:	d319      	bcc.n	80012ba <__udivmoddi4+0x296>
 8001286:	d016      	beq.n	80012b6 <__udivmoddi4+0x292>
 8001288:	b15e      	cbz	r6, 80012a2 <__udivmoddi4+0x27e>
 800128a:	ebb3 020e 	subs.w	r2, r3, lr
 800128e:	eb64 0405 	sbc.w	r4, r4, r5
 8001292:	fa04 f707 	lsl.w	r7, r4, r7
 8001296:	fa22 f301 	lsr.w	r3, r2, r1
 800129a:	431f      	orrs	r7, r3
 800129c:	40cc      	lsrs	r4, r1
 800129e:	e9c6 7400 	strd	r7, r4, [r6]
 80012a2:	2100      	movs	r1, #0
 80012a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012a8:	4631      	mov	r1, r6
 80012aa:	4630      	mov	r0, r6
 80012ac:	e70c      	b.n	80010c8 <__udivmoddi4+0xa4>
 80012ae:	468c      	mov	ip, r1
 80012b0:	e6eb      	b.n	800108a <__udivmoddi4+0x66>
 80012b2:	4610      	mov	r0, r2
 80012b4:	e6ff      	b.n	80010b6 <__udivmoddi4+0x92>
 80012b6:	4543      	cmp	r3, r8
 80012b8:	d2e6      	bcs.n	8001288 <__udivmoddi4+0x264>
 80012ba:	ebb8 0e02 	subs.w	lr, r8, r2
 80012be:	eb69 050c 	sbc.w	r5, r9, ip
 80012c2:	3801      	subs	r0, #1
 80012c4:	e7e0      	b.n	8001288 <__udivmoddi4+0x264>
 80012c6:	4628      	mov	r0, r5
 80012c8:	e7d3      	b.n	8001272 <__udivmoddi4+0x24e>
 80012ca:	4611      	mov	r1, r2
 80012cc:	e78c      	b.n	80011e8 <__udivmoddi4+0x1c4>
 80012ce:	4681      	mov	r9, r0
 80012d0:	e7b9      	b.n	8001246 <__udivmoddi4+0x222>
 80012d2:	4608      	mov	r0, r1
 80012d4:	e773      	b.n	80011be <__udivmoddi4+0x19a>
 80012d6:	4608      	mov	r0, r1
 80012d8:	e749      	b.n	800116e <__udivmoddi4+0x14a>
 80012da:	f1ac 0c02 	sub.w	ip, ip, #2
 80012de:	443d      	add	r5, r7
 80012e0:	e713      	b.n	800110a <__udivmoddi4+0xe6>
 80012e2:	3802      	subs	r0, #2
 80012e4:	443c      	add	r4, r7
 80012e6:	e724      	b.n	8001132 <__udivmoddi4+0x10e>

080012e8 <__aeabi_idiv0>:
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <MX_ADC_Init+0x120>)
 80012fe:	4a44      	ldr	r2, [pc, #272]	; (8001410 <MX_ADC_Init+0x124>)
 8001300:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001302:	4b42      	ldr	r3, [pc, #264]	; (800140c <MX_ADC_Init+0x120>)
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <MX_ADC_Init+0x120>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <MX_ADC_Init+0x120>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <MX_ADC_Init+0x120>)
 8001316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800131a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800131c:	4b3b      	ldr	r3, [pc, #236]	; (800140c <MX_ADC_Init+0x120>)
 800131e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001322:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <MX_ADC_Init+0x120>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800132a:	4b38      	ldr	r3, [pc, #224]	; (800140c <MX_ADC_Init+0x120>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <MX_ADC_Init+0x120>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001336:	4b35      	ldr	r3, [pc, #212]	; (800140c <MX_ADC_Init+0x120>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 5;
 800133e:	4b33      	ldr	r3, [pc, #204]	; (800140c <MX_ADC_Init+0x120>)
 8001340:	2205      	movs	r2, #5
 8001342:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001344:	4b31      	ldr	r3, [pc, #196]	; (800140c <MX_ADC_Init+0x120>)
 8001346:	2200      	movs	r2, #0
 8001348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800134c:	4b2f      	ldr	r3, [pc, #188]	; (800140c <MX_ADC_Init+0x120>)
 800134e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001354:	4b2d      	ldr	r3, [pc, #180]	; (800140c <MX_ADC_Init+0x120>)
 8001356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800135a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = ENABLE;
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <MX_ADC_Init+0x120>)
 800135e:	2201      	movs	r2, #1
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001364:	4829      	ldr	r0, [pc, #164]	; (800140c <MX_ADC_Init+0x120>)
 8001366:	f001 fa65 	bl	8002834 <HAL_ADC_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC_Init+0x88>
  {
    Error_Handler();
 8001370:	f000 fd12 	bl	8001d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001374:	2303      	movs	r3, #3
 8001376:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001378:	2301      	movs	r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 800137c:	2306      	movs	r3, #6
 800137e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_ADC_Init+0x120>)
 8001386:	f001 fc3b 	bl	8002c00 <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 8001390:	f000 fd02 	bl	8001d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001394:	2304      	movs	r3, #4
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001398:	2302      	movs	r3, #2
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	481a      	ldr	r0, [pc, #104]	; (800140c <MX_ADC_Init+0x120>)
 80013a2:	f001 fc2d 	bl	8002c00 <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC_Init+0xc4>
  {
    Error_Handler();
 80013ac:	f000 fcf4 	bl	8001d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013b0:	2305      	movs	r3, #5
 80013b2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013b4:	2303      	movs	r3, #3
 80013b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <MX_ADC_Init+0x120>)
 80013be:	f001 fc1f 	bl	8002c00 <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC_Init+0xe0>
  {
    Error_Handler();
 80013c8:	f000 fce6 	bl	8001d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013cc:	2310      	movs	r3, #16
 80013ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_ADC_Init+0x120>)
 80013da:	f001 fc11 	bl	8002c00 <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC_Init+0xfc>
  {
    Error_Handler();
 80013e4:	f000 fcd8 	bl	8001d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80013e8:	2311      	movs	r3, #17
 80013ea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013ec:	2305      	movs	r3, #5
 80013ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_ADC_Init+0x120>)
 80013f6:	f001 fc03 	bl	8002c00 <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC_Init+0x118>
  {
    Error_Handler();
 8001400:	f000 fcca 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200000ec 	.word	0x200000ec
 8001410:	40012400 	.word	0x40012400

08001414 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	; 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a29      	ldr	r2, [pc, #164]	; (80014d8 <HAL_ADC_MspInit+0xc4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d14b      	bne.n	80014ce <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001436:	4b29      	ldr	r3, [pc, #164]	; (80014dc <HAL_ADC_MspInit+0xc8>)
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4a28      	ldr	r2, [pc, #160]	; (80014dc <HAL_ADC_MspInit+0xc8>)
 800143c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001440:	6213      	str	r3, [r2, #32]
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_ADC_MspInit+0xc8>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <HAL_ADC_MspInit+0xc8>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a22      	ldr	r2, [pc, #136]	; (80014dc <HAL_ADC_MspInit+0xc8>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_ADC_MspInit+0xc8>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin|ADC_FLOW_Pin|ADC_TRIMPOT_Pin;
 8001466:	2338      	movs	r3, #56	; 0x38
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146a:	2303      	movs	r3, #3
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4819      	ldr	r0, [pc, #100]	; (80014e0 <HAL_ADC_MspInit+0xcc>)
 800147a:	f002 f90b 	bl	8003694 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 8001480:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_ADC_MspInit+0xd4>)
 8001482:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 8001486:	2200      	movs	r2, #0
 8001488:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 8001498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 80014a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 80014a8:	2220      	movs	r2, #32
 80014aa:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80014b2:	480c      	ldr	r0, [pc, #48]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 80014b4:	f001 feda 	bl	800326c <HAL_DMA_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 80014be:	f000 fc6b 	bl	8001d98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 80014c6:	645a      	str	r2, [r3, #68]	; 0x44
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_ADC_MspInit+0xd0>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014ce:	bf00      	nop
 80014d0:	3728      	adds	r7, #40	; 0x28
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40012400 	.word	0x40012400
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	200000a8 	.word	0x200000a8
 80014e8:	40026008 	.word	0x40026008

080014ec <HAL_ADC_ConvCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{	// Conversions have finished
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 0);
	flag_EOC = 1;
 80014f4:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_ADC_ConvCpltCallback+0x18>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr
 8001504:	20000096 	.word	0x20000096

08001508 <CLI_decode>:
#include "global.h"

uint32_t cli_input_value = 0;

void CLI_decode(char* buffer)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	73fb      	strb	r3, [r7, #15]

	while (buffer[i] != '\0')
 8001514:	e0bc      	b.n	8001690 <CLI_decode+0x188>
	{
		if (buffer[i] >= '0' && buffer[i] <= '9')
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b2f      	cmp	r3, #47	; 0x2f
 8001520:	d915      	bls.n	800154e <CLI_decode+0x46>
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b39      	cmp	r3, #57	; 0x39
 800152c:	d80f      	bhi.n	800154e <CLI_decode+0x46>
		{
			cli_input_value = 10*cli_input_value + (buffer[i] - '0');
 800152e:	4b5e      	ldr	r3, [pc, #376]	; (80016a8 <CLI_decode+0x1a0>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4619      	mov	r1, r3
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	440b      	add	r3, r1
 8001546:	3b30      	subs	r3, #48	; 0x30
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <CLI_decode+0x1a0>)
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e09d      	b.n	800168a <CLI_decode+0x182>
		}
		else
		{
			switch (buffer[i])
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b70      	cmp	r3, #112	; 0x70
 8001558:	f300 8092 	bgt.w	8001680 <CLI_decode+0x178>
 800155c:	2b41      	cmp	r3, #65	; 0x41
 800155e:	da06      	bge.n	800156e <CLI_decode+0x66>
 8001560:	2b0a      	cmp	r3, #10
 8001562:	f000 8091 	beq.w	8001688 <CLI_decode+0x180>
 8001566:	2b0d      	cmp	r3, #13
 8001568:	f000 808e 	beq.w	8001688 <CLI_decode+0x180>
 800156c:	e088      	b.n	8001680 <CLI_decode+0x178>
 800156e:	3b41      	subs	r3, #65	; 0x41
 8001570:	2b2f      	cmp	r3, #47	; 0x2f
 8001572:	f200 8085 	bhi.w	8001680 <CLI_decode+0x178>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <CLI_decode+0x74>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	0800163d 	.word	0x0800163d
 8001580:	08001681 	.word	0x08001681
 8001584:	08001681 	.word	0x08001681
 8001588:	08001651 	.word	0x08001651
 800158c:	08001681 	.word	0x08001681
 8001590:	08001681 	.word	0x08001681
 8001594:	08001681 	.word	0x08001681
 8001598:	08001681 	.word	0x08001681
 800159c:	08001681 	.word	0x08001681
 80015a0:	08001681 	.word	0x08001681
 80015a4:	08001681 	.word	0x08001681
 80015a8:	08001681 	.word	0x08001681
 80015ac:	08001665 	.word	0x08001665
 80015b0:	08001681 	.word	0x08001681
 80015b4:	08001681 	.word	0x08001681
 80015b8:	08001679 	.word	0x08001679
 80015bc:	08001681 	.word	0x08001681
 80015c0:	08001681 	.word	0x08001681
 80015c4:	08001681 	.word	0x08001681
 80015c8:	08001681 	.word	0x08001681
 80015cc:	08001681 	.word	0x08001681
 80015d0:	08001681 	.word	0x08001681
 80015d4:	08001681 	.word	0x08001681
 80015d8:	08001681 	.word	0x08001681
 80015dc:	08001681 	.word	0x08001681
 80015e0:	08001681 	.word	0x08001681
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001681 	.word	0x08001681
 80015ec:	08001681 	.word	0x08001681
 80015f0:	08001681 	.word	0x08001681
 80015f4:	08001681 	.word	0x08001681
 80015f8:	08001681 	.word	0x08001681
 80015fc:	0800163d 	.word	0x0800163d
 8001600:	08001681 	.word	0x08001681
 8001604:	08001681 	.word	0x08001681
 8001608:	08001651 	.word	0x08001651
 800160c:	08001681 	.word	0x08001681
 8001610:	08001681 	.word	0x08001681
 8001614:	08001681 	.word	0x08001681
 8001618:	08001681 	.word	0x08001681
 800161c:	08001681 	.word	0x08001681
 8001620:	08001681 	.word	0x08001681
 8001624:	08001681 	.word	0x08001681
 8001628:	08001681 	.word	0x08001681
 800162c:	08001665 	.word	0x08001665
 8001630:	08001681 	.word	0x08001681
 8001634:	08001681 	.word	0x08001681
 8001638:	08001679 	.word	0x08001679
			{
				case 'a':
				case 'A':
					op_mode = mode_auto;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <CLI_decode+0x1a4>)
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
					UART_TX_string("Auto mode selected. \n\r");
 8001642:	481b      	ldr	r0, [pc, #108]	; (80016b0 <CLI_decode+0x1a8>)
 8001644:	f000 ffcc 	bl	80025e0 <UART_TX_string>
					UART_TX_string("Adjust pulse width via the trimpot on the DISCO BOARD. \n\r");
 8001648:	481a      	ldr	r0, [pc, #104]	; (80016b4 <CLI_decode+0x1ac>)
 800164a:	f000 ffc9 	bl	80025e0 <UART_TX_string>
					break;
 800164e:	e01c      	b.n	800168a <CLI_decode+0x182>

				case 'd':
				case 'D':
					op_mode = mode_debug;
 8001650:	4b16      	ldr	r3, [pc, #88]	; (80016ac <CLI_decode+0x1a4>)
 8001652:	2203      	movs	r2, #3
 8001654:	701a      	strb	r2, [r3, #0]
					UART_TX_string("Debug mode selected. \n\r");
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <CLI_decode+0x1b0>)
 8001658:	f000 ffc2 	bl	80025e0 <UART_TX_string>
					UART_TX_string("Enter pulse width from 0 to 100 and terminate with 'p'. \n\r");
 800165c:	4817      	ldr	r0, [pc, #92]	; (80016bc <CLI_decode+0x1b4>)
 800165e:	f000 ffbf 	bl	80025e0 <UART_TX_string>
					break;
 8001662:	e012      	b.n	800168a <CLI_decode+0x182>

				case 'm':
				case 'M':
					op_mode = mode_manual;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <CLI_decode+0x1a4>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
					UART_TX_string("Manual mode selected. \n\r");
 800166a:	4815      	ldr	r0, [pc, #84]	; (80016c0 <CLI_decode+0x1b8>)
 800166c:	f000 ffb8 	bl	80025e0 <UART_TX_string>
					UART_TX_string("Adjust pulse width via the trimpot on the DISCO BOARD. \n\r");
 8001670:	4810      	ldr	r0, [pc, #64]	; (80016b4 <CLI_decode+0x1ac>)
 8001672:	f000 ffb5 	bl	80025e0 <UART_TX_string>
					break;
 8001676:	e008      	b.n	800168a <CLI_decode+0x182>

				case 'p':
				case 'P':
					flag_update_pulse = 1;
 8001678:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <CLI_decode+0x1bc>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]
					break;
 800167e:	e004      	b.n	800168a <CLI_decode+0x182>
				case '\n':
				case '\r':
					break;

				default:
					flag_wrong_cmd = 1;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <CLI_decode+0x1c0>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
					break;
 8001686:	e000      	b.n	800168a <CLI_decode+0x182>
					break;
 8001688:	bf00      	nop
			}
		}
		i++;
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	3301      	adds	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
	while (buffer[i] != '\0')
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	f47f af3c 	bne.w	8001516 <CLI_decode+0xe>
	}
}
 800169e:	bf00      	nop
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2000008c 	.word	0x2000008c
 80016ac:	2000009a 	.word	0x2000009a
 80016b0:	080066a8 	.word	0x080066a8
 80016b4:	080066c0 	.word	0x080066c0
 80016b8:	080066fc 	.word	0x080066fc
 80016bc:	08006714 	.word	0x08006714
 80016c0:	08006750 	.word	0x08006750
 80016c4:	20000099 	.word	0x20000099
 80016c8:	20000098 	.word	0x20000098

080016cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d2:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_DMA_Init+0x38>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <MX_DMA_Init+0x38>)
 80016d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_DMA_Init+0x38>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	200b      	movs	r0, #11
 80016f0:	f001 fd85 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016f4:	200b      	movs	r0, #11
 80016f6:	f001 fd9e 	bl	8003236 <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171e:	4b31      	ldr	r3, [pc, #196]	; (80017e4 <MX_GPIO_Init+0xdc>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a30      	ldr	r2, [pc, #192]	; (80017e4 <MX_GPIO_Init+0xdc>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0xdc>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_GPIO_Init+0xdc>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <MX_GPIO_Init+0xdc>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <MX_GPIO_Init+0xdc>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <MX_GPIO_Init+0xdc>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a24      	ldr	r2, [pc, #144]	; (80017e4 <MX_GPIO_Init+0xdc>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b22      	ldr	r3, [pc, #136]	; (80017e4 <MX_GPIO_Init+0xdc>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2101      	movs	r1, #1
 800176a:	481f      	ldr	r0, [pc, #124]	; (80017e8 <MX_GPIO_Init+0xe0>)
 800176c:	f002 f929 	bl	80039c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	481d      	ldr	r0, [pc, #116]	; (80017ec <MX_GPIO_Init+0xe4>)
 8001776:	f002 f924 	bl	80039c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_TEST_Pin;
 800177a:	2301      	movs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OUT_TEST_GPIO_Port, &GPIO_InitStruct);
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4815      	ldr	r0, [pc, #84]	; (80017e8 <MX_GPIO_Init+0xe0>)
 8001792:	f001 ff7f 	bl	8003694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8001796:	2301      	movs	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800179a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800179e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_GPIO_Init+0xe8>)
 80017ac:	f001 ff72 	bl	8003694 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	4619      	mov	r1, r3
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <MX_GPIO_Init+0xe4>)
 80017c8:	f001 ff64 	bl	8003694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	2006      	movs	r0, #6
 80017d2:	f001 fd14 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017d6:	2006      	movs	r0, #6
 80017d8:	f001 fd2d 	bl	8003236 <HAL_NVIC_EnableIRQ>

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_USER_Pin)		// When edge is detected,
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d102      	bne.n	800180a <HAL_GPIO_EXTI_Callback+0x16>
	{									// Timer 6 starts, for button debounce
		HAL_TIM_Base_Start_IT(&htim6);
 8001804:	4803      	ldr	r0, [pc, #12]	; (8001814 <HAL_GPIO_EXTI_Callback+0x20>)
 8001806:	f002 ff01 	bl	800460c <HAL_TIM_Base_Start_IT>
	}
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000180 	.word	0x20000180

08001818 <SystemClock_Config>:
#include "tim.h"		// Timers
#include "usart.h"		// UART for serial communication
#include "version.h"	// Version information

void SystemClock_Config(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b092      	sub	sp, #72	; 0x48
 800181c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	2234      	movs	r2, #52	; 0x34
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f004 faf0 	bl	8005e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800182c:	463b      	mov	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
 8001838:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <SystemClock_Config+0x98>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <SystemClock_Config+0x98>)
 8001844:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001848:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800184a:	2302      	movs	r3, #2
 800184c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001852:	2310      	movs	r3, #16
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001856:	2302      	movs	r3, #2
 8001858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185a:	2300      	movs	r3, #0
 800185c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800185e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001864:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001868:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f8f0 	bl	8003a54 <HAL_RCC_OscConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800187a:	f000 fa8d 	bl	8001d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187e:	230f      	movs	r3, #15
 8001880:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001882:	2303      	movs	r3, #3
 8001884:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f002 fc0c 	bl	80040b4 <HAL_RCC_ClockConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018a2:	f000 fa79 	bl	8001d98 <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3748      	adds	r7, #72	; 0x48
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40007000 	.word	0x40007000

080018b4 <MCU_init>:

void MCU_init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_Init();
 80018b8:	f000 ff4d 	bl	8002756 <HAL_Init>
	SystemClock_Config();
 80018bc:	f7ff ffac 	bl	8001818 <SystemClock_Config>
	MX_GPIO_Init();
 80018c0:	f7ff ff22 	bl	8001708 <MX_GPIO_Init>
	MX_TIM2_Init();
 80018c4:	f000 fc34 	bl	8002130 <MX_TIM2_Init>
	MX_TIM4_Init();
 80018c8:	f000 fc7e 	bl	80021c8 <MX_TIM4_Init>
	MX_TIM6_Init();
 80018cc:	f000 fcf0 	bl	80022b0 <MX_TIM6_Init>
	MX_DMA_Init();
 80018d0:	f7ff fefc 	bl	80016cc <MX_DMA_Init>
	MX_ADC_Init();
 80018d4:	f7ff fd0a 	bl	80012ec <MX_ADC_Init>
	MX_USART1_UART_Init();
 80018d8:	f000 fe0c 	bl	80024f4 <MX_USART1_UART_Init>

	UART_TX_string("Smart Micro Pump \n\r");
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <MCU_init+0x44>)
 80018de:	f000 fe7f 	bl	80025e0 <UART_TX_string>
	UART_TX_string("Firmware version: ");
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MCU_init+0x48>)
 80018e4:	f000 fe7c 	bl	80025e0 <UART_TX_string>
	UART_TX_string(FW_VERSION);
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <MCU_init+0x4c>)
 80018ea:	f000 fe79 	bl	80025e0 <UART_TX_string>
	UART_TX_string("\n\r\r");
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MCU_init+0x50>)
 80018f0:	f000 fe76 	bl	80025e0 <UART_TX_string>
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0800676c 	.word	0x0800676c
 80018fc:	08006780 	.word	0x08006780
 8001900:	08006794 	.word	0x08006794
 8001904:	0800679c 	.word	0x0800679c

08001908 <main>:
#include "version.h"	// Version information

#define FLOW_RANGE 500.0f	// Maximum flow the pump can achieve in this configuration

int main(void)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b09f      	sub	sp, #124	; 0x7c
 800190c:	af00      	add	r7, sp, #0
	sPID PID;

	uint16_t pulse = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

	volatile uint16_t ADC_counts[ADC_ACTIVE_CHANNELS];
	float ADC_voltages[ADC_ACTIVE_CHANNELS];

	uint16_t i = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	uint8_t debug_counter = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

	float pump_current, pump_flow, pump_sqrt_flow;
	float trimpot;
	float MCU_temperature, 	MCU_voltage_ref;

	MCU_init();
 8001920:	f7ff ffc8 	bl	80018b4 <MCU_init>

	HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_counts, ADC_ACTIVE_CHANNELS);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2205      	movs	r2, #5
 800192a:	4619      	mov	r1, r3
 800192c:	4882      	ldr	r0, [pc, #520]	; (8001b38 <main+0x230>)
 800192e:	f001 f8c7 	bl	8002ac0 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);				// Timer 2 for sampling period
 8001932:	4882      	ldr	r0, [pc, #520]	; (8001b3c <main+0x234>)
 8001934:	f002 fe6a 	bl	800460c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Timer 4 for PWM generation
 8001938:	2100      	movs	r1, #0
 800193a:	4881      	ldr	r0, [pc, #516]	; (8001b40 <main+0x238>)
 800193c:	f002 ff26 	bl	800478c <HAL_TIM_PWM_Start>

	PID_init(&PID);
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fa2d 	bl	8001da4 <PID_init>

	UART_TX_string("Enter command, or press USER BUTTON on DISCO BOARD to start AUTO/MANUAL modes: \n\r");
 800194a:	487e      	ldr	r0, [pc, #504]	; (8001b44 <main+0x23c>)
 800194c:	f000 fe48 	bl	80025e0 <UART_TX_string>
	UART_TX_string(AVAILABLE_COMMANDS);
 8001950:	487d      	ldr	r0, [pc, #500]	; (8001b48 <main+0x240>)
 8001952:	f000 fe45 	bl	80025e0 <UART_TX_string>
	UART_RX(rx_buffer);		// Starts serial reception
 8001956:	487d      	ldr	r0, [pc, #500]	; (8001b4c <main+0x244>)
 8001958:	f000 feb6 	bl	80026c8 <UART_RX>

	while (op_mode == mode_idle)
 800195c:	e00f      	b.n	800197e <main+0x76>
	{
		// Wait for user command via console or button press
		if (flag_CRX != 0)
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <main+0x248>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <main+0x66>
		{
			CLI_decode(rx_buffer);
 8001968:	4878      	ldr	r0, [pc, #480]	; (8001b4c <main+0x244>)
 800196a:	f7ff fdcd 	bl	8001508 <CLI_decode>
		}
		if (debouncedButtonPressed != 0)
 800196e:	4b79      	ldr	r3, [pc, #484]	; (8001b54 <main+0x24c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <main+0x76>
		{
			op_mode = mode_manual;
 8001978:	4b77      	ldr	r3, [pc, #476]	; (8001b58 <main+0x250>)
 800197a:	2201      	movs	r2, #1
 800197c:	701a      	strb	r2, [r3, #0]
	while (op_mode == mode_idle)
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <main+0x250>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0eb      	beq.n	800195e <main+0x56>
	}

	while (1)
	{
		// Mode selection via user button (Manual/Auto)
		if (debouncedButtonPressed != 0)	// User button selects between
 8001986:	4b73      	ldr	r3, [pc, #460]	; (8001b54 <main+0x24c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d023      	beq.n	80019d8 <main+0xd0>
		{									// Manual and Auto modes
			if (op_mode != mode_auto)
 8001990:	4b71      	ldr	r3, [pc, #452]	; (8001b58 <main+0x250>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d00e      	beq.n	80019b6 <main+0xae>
			{
				op_mode = mode_auto;
 8001998:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <main+0x250>)
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800199e:	2201      	movs	r2, #1
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	486e      	ldr	r0, [pc, #440]	; (8001b5c <main+0x254>)
 80019a4:	f002 f80d 	bl	80039c2 <HAL_GPIO_WritePin>
				UART_TX_string("Auto mode selected. \n\r");
 80019a8:	486d      	ldr	r0, [pc, #436]	; (8001b60 <main+0x258>)
 80019aa:	f000 fe19 	bl	80025e0 <UART_TX_string>
				UART_TX_string("Adjust pulse width via the trimpot on the DISCO BOARD. \n\r");
 80019ae:	486d      	ldr	r0, [pc, #436]	; (8001b64 <main+0x25c>)
 80019b0:	f000 fe16 	bl	80025e0 <UART_TX_string>
 80019b4:	e00d      	b.n	80019d2 <main+0xca>
			}
			else
			{
				op_mode = mode_manual;
 80019b6:	4b68      	ldr	r3, [pc, #416]	; (8001b58 <main+0x250>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 80019bc:	2200      	movs	r2, #0
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	4866      	ldr	r0, [pc, #408]	; (8001b5c <main+0x254>)
 80019c2:	f001 fffe 	bl	80039c2 <HAL_GPIO_WritePin>
				UART_TX_string("Manual mode selected. \n\r");
 80019c6:	4868      	ldr	r0, [pc, #416]	; (8001b68 <main+0x260>)
 80019c8:	f000 fe0a 	bl	80025e0 <UART_TX_string>
				UART_TX_string("Adjust pulse width via the trimpot on the DISCO BOARD. \n\r");
 80019cc:	4865      	ldr	r0, [pc, #404]	; (8001b64 <main+0x25c>)
 80019ce:	f000 fe07 	bl	80025e0 <UART_TX_string>
			}
			debouncedButtonPressed = 0;
 80019d2:	4b60      	ldr	r3, [pc, #384]	; (8001b54 <main+0x24c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
		//	{									// when button is released
		//		// To do
		//		debouncedButtonReleased = 0;
		//	}

		if (flag_EOC != 0)	// Sampling time (dt) = 10ms (fS = 100 Hz)
 80019d8:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <main+0x264>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d07c      	beq.n	8001adc <main+0x1d4>
		{
			for (i = 0; i < ADC_ACTIVE_CHANNELS; i++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80019e8:	e024      	b.n	8001a34 <main+0x12c>
			{
				ADC_voltages[i] = ADC_counts[i] * ADC_V_REF / ADC_MAX_COUNTS;	// V = counts * 3.0 / (2^12 - 1)
 80019ea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80019f4:	4413      	add	r3, r2
 80019f6:	f833 3c64 	ldrh.w	r3, [r3, #-100]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff f8bf 	bl	8000b80 <__aeabi_i2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	495a      	ldr	r1, [pc, #360]	; (8001b70 <main+0x268>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f90e 	bl	8000c28 <__aeabi_fmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f8b7 4076 	ldrh.w	r4, [r7, #118]	; 0x76
 8001a12:	4958      	ldr	r1, [pc, #352]	; (8001b74 <main+0x26c>)
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f9bb 	bl	8000d90 <__aeabi_fdiv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	00a3      	lsls	r3, r4, #2
 8001a20:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001a24:	440b      	add	r3, r1
 8001a26:	f843 2c78 	str.w	r2, [r3, #-120]
			for (i = 0; i < ADC_ACTIVE_CHANNELS; i++)
 8001a2a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001a2e:	3301      	adds	r3, #1
 8001a30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001a34:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d9d6      	bls.n	80019ea <main+0xe2>
			}
			HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 0);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2101      	movs	r1, #1
 8001a40:	484d      	ldr	r0, [pc, #308]	; (8001b78 <main+0x270>)
 8001a42:	f001 ffbe 	bl	80039c2 <HAL_GPIO_WritePin>

			pump_current	= ADC_voltages[0] * 1000.0 / (1.0 * 6.6);	// mA (Ohm's law: I = V/R; R = 1 Ohm)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd05 	bl	8000458 <__aeabi_f2d>
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b4a      	ldr	r3, [pc, #296]	; (8001b7c <main+0x274>)
 8001a54:	f7fe fd58 	bl	8000508 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	a331      	add	r3, pc, #196	; (adr r3, 8001b28 <main+0x220>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	f7fe fe79 	bl	800075c <__aeabi_ddiv>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7fe ff7b 	bl	800096c <__aeabi_d2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	673b      	str	r3, [r7, #112]	; 0x70
																		// AA filter gain: 6.6

			pump_sqrt_flow	= (ADC_voltages[1] - 0.5)  / 2.1;			// D6F-P0010A1 datasheet curve approximation
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fceb 	bl	8000458 <__aeabi_f2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <main+0x278>)
 8001a88:	f7fe fb86 	bl	8000198 <__aeabi_dsub>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	a326      	add	r3, pc, #152	; (adr r3, 8001b30 <main+0x228>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fe5f 	bl	800075c <__aeabi_ddiv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe ff61 	bl	800096c <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	65bb      	str	r3, [r7, #88]	; 0x58
			pump_flow		= 1000 * pump_sqrt_flow * pump_sqrt_flow;	// mL/min
 8001aae:	4935      	ldr	r1, [pc, #212]	; (8001b84 <main+0x27c>)
 8001ab0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ab2:	f7ff f8b9 	bl	8000c28 <__aeabi_fmul>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001abc:	f7ff f8b4 	bl	8000c28 <__aeabi_fmul>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	66fb      	str	r3, [r7, #108]	; 0x6c

			trimpot 		= ADC_voltages[2];					// V
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	66bb      	str	r3, [r7, #104]	; 0x68

			MCU_temperature	= ADC_voltages[3];					// °C
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	667b      	str	r3, [r7, #100]	; 0x64

			MCU_voltage_ref	= ADC_voltages[4];					// V
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	663b      	str	r3, [r7, #96]	; 0x60

			flag_EOC = 0;
 8001ad0:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <main+0x264>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
			flag_dt = 1;	// Will trigger the next PID Control iteration
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <main+0x280>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
		}

		if (flag_dt != 0)	// Sampling time (dt) = 10ms (fS = 100 Hz),
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <main+0x280>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 8108 	beq.w	8001cf8 <main+0x3f0>
		{					// according to ADC EOC (ADC is trigger by Timer 2 interrupts)

			if (op_mode == mode_manual)			// Manual mode: PWM duty cycle is set based on
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <main+0x250>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d14d      	bne.n	8001b8c <main+0x284>
			{									// trimpot value read by the ADC

				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	4819      	ldr	r0, [pc, #100]	; (8001b5c <main+0x254>)
 8001af6:	f001 ff64 	bl	80039c2 <HAL_GPIO_WritePin>

				pulse = (uint16_t)(PWM_MAX_COUNTS * (trimpot / ADC_V_REF));
 8001afa:	491d      	ldr	r1, [pc, #116]	; (8001b70 <main+0x268>)
 8001afc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001afe:	f7ff f947 	bl	8000d90 <__aeabi_fdiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	491f      	ldr	r1, [pc, #124]	; (8001b84 <main+0x27c>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f88e 	bl	8000c28 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fa50 	bl	8000fb4 <__aeabi_f2uiz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

				PWM_setPulse(pulse);	// Updates duty cycle
 8001b1a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 fa36 	bl	8001f90 <PWM_setPulse>
 8001b24:	e0e5      	b.n	8001cf2 <main+0x3ea>
 8001b26:	bf00      	nop
 8001b28:	66666666 	.word	0x66666666
 8001b2c:	401a6666 	.word	0x401a6666
 8001b30:	cccccccd 	.word	0xcccccccd
 8001b34:	4000cccc 	.word	0x4000cccc
 8001b38:	200000ec 	.word	0x200000ec
 8001b3c:	200001c0 	.word	0x200001c0
 8001b40:	20000140 	.word	0x20000140
 8001b44:	080067a0 	.word	0x080067a0
 8001b48:	080067f4 	.word	0x080067f4
 8001b4c:	20000200 	.word	0x20000200
 8001b50:	20000097 	.word	0x20000097
 8001b54:	20000093 	.word	0x20000093
 8001b58:	2000009a 	.word	0x2000009a
 8001b5c:	40020400 	.word	0x40020400
 8001b60:	08006824 	.word	0x08006824
 8001b64:	0800683c 	.word	0x0800683c
 8001b68:	08006878 	.word	0x08006878
 8001b6c:	20000096 	.word	0x20000096
 8001b70:	40400000 	.word	0x40400000
 8001b74:	457ff000 	.word	0x457ff000
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	408f4000 	.word	0x408f4000
 8001b80:	3fe00000 	.word	0x3fe00000
 8001b84:	447a0000 	.word	0x447a0000
 8001b88:	20000095 	.word	0x20000095
			}
			else if (op_mode == mode_auto)
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <main+0x428>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d173      	bne.n	8001c7c <main+0x374>
			{
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8001b94:	2201      	movs	r2, #1
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	4866      	ldr	r0, [pc, #408]	; (8001d34 <main+0x42c>)
 8001b9a:	f001 ff12 	bl	80039c2 <HAL_GPIO_WritePin>

				// Set point update:
				// (Practical range for the pump: 85 to 500 mL/min)
				PID.set_point = 85 + (trimpot / ADC_V_REF) * (FLOW_RANGE - 85);
 8001b9e:	4966      	ldr	r1, [pc, #408]	; (8001d38 <main+0x430>)
 8001ba0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001ba2:	f7ff f8f5 	bl	8000d90 <__aeabi_fdiv>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4964      	ldr	r1, [pc, #400]	; (8001d3c <main+0x434>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f83c 	bl	8000c28 <__aeabi_fmul>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4963      	ldr	r1, [pc, #396]	; (8001d40 <main+0x438>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe ff2f 	bl	8000a18 <__addsf3>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40

				// Feedback update
				PID.feedback = pump_flow;
 8001bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44

				// Calculate control action
				PID_update(&PID);
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f92e 	bl	8001e28 <PID_update>

				// Update pump drive level (PWM)
				pulse = (uint16_t)(PWM_MAX_COUNTS * PID.output);	// Converts Duty Cycle (%) to Pulse Width (timer counts)
 8001bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bce:	495d      	ldr	r1, [pc, #372]	; (8001d44 <main+0x43c>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f829 	bl	8000c28 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f9eb 	bl	8000fb4 <__aeabi_f2uiz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				PWM_setPulse(pulse);								// Updates Duty Cycle
 8001be4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f9d1 	bl	8001f90 <PWM_setPulse>

				// Send data (UART)
				UART_TX_string("SP:");
 8001bee:	4856      	ldr	r0, [pc, #344]	; (8001d48 <main+0x440>)
 8001bf0:	f000 fcf6 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.set_point);
 8001bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fd08 	bl	800260c <UART_TX_float>
				UART_TX_string("FB:");
 8001bfc:	4853      	ldr	r0, [pc, #332]	; (8001d4c <main+0x444>)
 8001bfe:	f000 fcef 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.feedback);
 8001c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd01 	bl	800260c <UART_TX_float>
				UART_TX_string("E:");
 8001c0a:	4851      	ldr	r0, [pc, #324]	; (8001d50 <main+0x448>)
 8001c0c:	f000 fce8 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.error);
 8001c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fcfa 	bl	800260c <UART_TX_float>

				UART_TX_string("P:");
 8001c18:	484e      	ldr	r0, [pc, #312]	; (8001d54 <main+0x44c>)
 8001c1a:	f000 fce1 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.proportional);
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 fcf3 	bl	800260c <UART_TX_float>
				UART_TX_string("I:");
 8001c26:	484c      	ldr	r0, [pc, #304]	; (8001d58 <main+0x450>)
 8001c28:	f000 fcda 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.integral);
 8001c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fcec 	bl	800260c <UART_TX_float>
				UART_TX_string("D:");
 8001c34:	4849      	ldr	r0, [pc, #292]	; (8001d5c <main+0x454>)
 8001c36:	f000 fcd3 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.derivative);
 8001c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fce5 	bl	800260c <UART_TX_float>

				UART_TX_string("O:");
 8001c42:	4847      	ldr	r0, [pc, #284]	; (8001d60 <main+0x458>)
 8001c44:	f000 fccc 	bl	80025e0 <UART_TX_string>
				UART_TX_float(PID.output);
 8001c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 fcde 	bl	800260c <UART_TX_float>
				UART_TX_string("mA:");
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <main+0x45c>)
 8001c52:	f000 fcc5 	bl	80025e0 <UART_TX_string>
				UART_TX_float(pump_current);
 8001c56:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001c58:	f000 fcd8 	bl	800260c <UART_TX_float>

				UART_TX_string("°C:");
 8001c5c:	4842      	ldr	r0, [pc, #264]	; (8001d68 <main+0x460>)
 8001c5e:	f000 fcbf 	bl	80025e0 <UART_TX_string>
				UART_TX_float(MCU_temperature);
 8001c62:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001c64:	f000 fcd2 	bl	800260c <UART_TX_float>
				UART_TX_string("VREF:");
 8001c68:	4840      	ldr	r0, [pc, #256]	; (8001d6c <main+0x464>)
 8001c6a:	f000 fcb9 	bl	80025e0 <UART_TX_string>
				UART_TX_float(MCU_voltage_ref);
 8001c6e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001c70:	f000 fccc 	bl	800260c <UART_TX_float>

				UART_TX_string("\r ");
 8001c74:	483e      	ldr	r0, [pc, #248]	; (8001d70 <main+0x468>)
 8001c76:	f000 fcb3 	bl	80025e0 <UART_TX_string>
 8001c7a:	e03a      	b.n	8001cf2 <main+0x3ea>
			}
			else if (op_mode == mode_debug)
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <main+0x428>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d136      	bne.n	8001cf2 <main+0x3ea>
			{
				if (flag_update_pulse != 0)
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <main+0x46c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d021      	beq.n	8001cd2 <main+0x3ca>
				{
					pulse = (uint16_t)(PWM_MAX_COUNTS * cli_input_value/100.0);	// Converts Duty Cycle (%) to Pulse Width (timer counts)
 8001c8e:	4b3a      	ldr	r3, [pc, #232]	; (8001d78 <main+0x470>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fbba 	bl	8000414 <__aeabi_ui2d>
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b35      	ldr	r3, [pc, #212]	; (8001d7c <main+0x474>)
 8001ca6:	f7fe fd59 	bl	800075c <__aeabi_ddiv>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4610      	mov	r0, r2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f7fe fe3b 	bl	800092c <__aeabi_d2uiz>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
					PWM_setPulse(pulse);								// Updates Duty Cycle
 8001cbc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f965 	bl	8001f90 <PWM_setPulse>

					cli_input_value = 0;
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <main+0x470>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
					flag_update_pulse = 0;
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <main+0x46c>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
				}

				debug_counter++;			// Software timer to blink the Green LED
 8001cd2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
				if (debug_counter >= 50)	// 500 ms on (1 Hz)
 8001cdc:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001ce0:	2b31      	cmp	r3, #49	; 0x31
 8001ce2:	d906      	bls.n	8001cf2 <main+0x3ea>
				{
					HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	4813      	ldr	r0, [pc, #76]	; (8001d34 <main+0x42c>)
 8001ce8:	f001 fe83 	bl	80039f2 <HAL_GPIO_TogglePin>

					debug_counter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
				}
			}
			flag_dt = 0;
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <main+0x478>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
		}

		if (flag_CRX != 0)
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <main+0x47c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d005      	beq.n	8001d0e <main+0x406>
		{
			CLI_decode(rx_buffer);
 8001d02:	4821      	ldr	r0, [pc, #132]	; (8001d88 <main+0x480>)
 8001d04:	f7ff fc00 	bl	8001508 <CLI_decode>

			flag_CRX = 0;
 8001d08:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <main+0x47c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		}

		if (flag_wrong_cmd != 0)
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <main+0x484>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f43f ae36 	beq.w	8001986 <main+0x7e>
		{
			UART_TX_string("Wrong command! Available commands: \n\r ");
 8001d1a:	481d      	ldr	r0, [pc, #116]	; (8001d90 <main+0x488>)
 8001d1c:	f000 fc60 	bl	80025e0 <UART_TX_string>
			UART_TX_string(AVAILABLE_COMMANDS);
 8001d20:	481c      	ldr	r0, [pc, #112]	; (8001d94 <main+0x48c>)
 8001d22:	f000 fc5d 	bl	80025e0 <UART_TX_string>

			flag_wrong_cmd = 0;
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <main+0x484>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
		if (debouncedButtonPressed != 0)	// User button selects between
 8001d2c:	e62b      	b.n	8001986 <main+0x7e>
 8001d2e:	bf00      	nop
 8001d30:	2000009a 	.word	0x2000009a
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40400000 	.word	0x40400000
 8001d3c:	43cf8000 	.word	0x43cf8000
 8001d40:	42aa0000 	.word	0x42aa0000
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	08006894 	.word	0x08006894
 8001d4c:	08006898 	.word	0x08006898
 8001d50:	0800689c 	.word	0x0800689c
 8001d54:	080068a0 	.word	0x080068a0
 8001d58:	080068a4 	.word	0x080068a4
 8001d5c:	080068a8 	.word	0x080068a8
 8001d60:	080068ac 	.word	0x080068ac
 8001d64:	080068b0 	.word	0x080068b0
 8001d68:	080068b4 	.word	0x080068b4
 8001d6c:	080068bc 	.word	0x080068bc
 8001d70:	080068c4 	.word	0x080068c4
 8001d74:	20000099 	.word	0x20000099
 8001d78:	2000008c 	.word	0x2000008c
 8001d7c:	40590000 	.word	0x40590000
 8001d80:	20000095 	.word	0x20000095
 8001d84:	20000097 	.word	0x20000097
 8001d88:	20000200 	.word	0x20000200
 8001d8c:	20000098 	.word	0x20000098
 8001d90:	080068c8 	.word	0x080068c8
 8001d94:	080067f4 	.word	0x080067f4

08001d98 <Error_Handler>:
		}
	}
}

void Error_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d9c:	b672      	cpsid	i
}
 8001d9e:	bf00      	nop
  __disable_irq();
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <Error_Handler+0x8>
	...

08001da4 <PID_init>:
//

#include "pid.h"

void 	PID_init(sPID* PID)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	PID->dt = 0.010;			// Sampling time: 10 ms (100 Hz)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a1a      	ldr	r2, [pc, #104]	; (8001e18 <PID_init+0x74>)
 8001db0:	601a      	str	r2, [r3, #0]

	PID->kP =  0.50;			// Proportional gain
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001db8:	609a      	str	r2, [r3, #8]
	PID->kI = 12.00;			// Integral gain
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <PID_init+0x78>)
 8001dbe:	60da      	str	r2, [r3, #12]
	PID->kD =  0.05;			// Derivative gain
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <PID_init+0x7c>)
 8001dc4:	611a      	str	r2, [r3, #16]

	PID->proportional = 0.0;	// Proportional term
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
	PID->integral 	  = 0.0;	// Integral term
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
	PID->derivative   = 0.0;	// Derivative term
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]

	PID->set_point 	= 250.0;	// Set Point - desired controlled variable value
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a10      	ldr	r2, [pc, #64]	; (8001e24 <PID_init+0x80>)
 8001de2:	621a      	str	r2, [r3, #32]
	PID->feedback 	= 0.0;		// Feedback  - measurement from sensor
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	; 0x24
	PID->error 		= 0.0;		// Error == (Set Point - Feedback)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28

	PID->output = 0.0;			// Output    - actuator drive signal
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c

	PID->prev_feedback = 0.0;	// Feedback of previous iteration
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30
	PID->prev_error = 0.0;		// Error of previous iteration
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	3c23d70a 	.word	0x3c23d70a
 8001e1c:	41400000 	.word	0x41400000
 8001e20:	3d4ccccd 	.word	0x3d4ccccd
 8001e24:	437a0000 	.word	0x437a0000

08001e28 <PID_update>:

void 	PID_update(sPID* PID)
{
 8001e28:	b590      	push	{r4, r7, lr}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	PID->error = PID->set_point - PID->feedback;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f7fe fdea 	bl	8000a14 <__aeabi_fsub>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28

	PID->proportional = PID->kP * PID->error;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f7fe fee8 	bl	8000c28 <__aeabi_fmul>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	615a      	str	r2, [r3, #20]

	PID->integral = PID->integral + PID->kI * PID->error * PID->dt;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699c      	ldr	r4, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f7fe feda 	bl	8000c28 <__aeabi_fmul>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7fe fed2 	bl	8000c28 <__aeabi_fmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7fe fdc5 	bl	8000a18 <__addsf3>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	619a      	str	r2, [r3, #24]

	// Integral term saturation to avoid cumulative error effects:
	if 		(PID->integral >  PID_INTEGRAL_SATURATION)	PID->integral =  PID_INTEGRAL_SATURATION;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	493a      	ldr	r1, [pc, #232]	; (8001f84 <PID_update+0x15c>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff f87f 	bl	8000fa0 <__aeabi_fcmpgt>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <PID_update+0x88>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <PID_update+0x15c>)
 8001eac:	619a      	str	r2, [r3, #24]
 8001eae:	e00b      	b.n	8001ec8 <PID_update+0xa0>
	else if	(PID->integral < -PID_INTEGRAL_SATURATION)	PID->integral = -PID_INTEGRAL_SATURATION;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	4934      	ldr	r1, [pc, #208]	; (8001f88 <PID_update+0x160>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f854 	bl	8000f64 <__aeabi_fcmplt>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <PID_update+0xa0>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <PID_update+0x160>)
 8001ec6:	619a      	str	r2, [r3, #24]

	PID->derivative = PID->kD * (PID->error - PID->prev_error) / PID->dt;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691c      	ldr	r4, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f7fe fd9c 	bl	8000a14 <__aeabi_fsub>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	f7fe fea1 	bl	8000c28 <__aeabi_fmul>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f7fe ff4d 	bl	8000d90 <__aeabi_fdiv>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	61da      	str	r2, [r3, #28]

	PID->output = PID->proportional + PID->integral + PID->derivative;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7fe fd85 	bl	8000a18 <__addsf3>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	461a      	mov	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4610      	mov	r0, r2
 8001f1a:	f7fe fd7d 	bl	8000a18 <__addsf3>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c

	// Output saturation to keep value within actuator limits:
	if 		(PID->output > PID_MAX_OUT)	PID->output = PID_MAX_OUT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	4916      	ldr	r1, [pc, #88]	; (8001f84 <PID_update+0x15c>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff f837 	bl	8000fa0 <__aeabi_fcmpgt>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <PID_update+0x118>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <PID_update+0x15c>)
 8001f3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f3e:	e00b      	b.n	8001f58 <PID_update+0x130>
	else if	(PID->output < PID_MIN_OUT)	PID->output = PID_MIN_OUT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	4911      	ldr	r1, [pc, #68]	; (8001f8c <PID_update+0x164>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff f80c 	bl	8000f64 <__aeabi_fcmplt>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <PID_update+0x130>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <PID_update+0x164>)
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

	PID->output = PID->output/PID_MAX_OUT; 	// Normalized output (from 0.000 to 1.000)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	4909      	ldr	r1, [pc, #36]	; (8001f84 <PID_update+0x15c>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ff16 	bl	8000d90 <__aeabi_fdiv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Variable storage for next iteration
	PID->prev_error	 	= PID->error;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	635a      	str	r2, [r3, #52]	; 0x34
	PID->prev_feedback 	= PID->feedback;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	447a0000 	.word	0x447a0000
 8001f88:	c47a0000 	.word	0xc47a0000
 8001f8c:	43820000 	.word	0x43820000

08001f90 <PWM_setPulse>:
 *      Author: Andre
 */
#include "tim.h"

void PWM_setPulse(uint16_t per_mille)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, per_mille);
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <PWM_setPulse+0x1c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000140 	.word	0x20000140

08001fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_MspInit+0x58>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	4a13      	ldr	r2, [pc, #76]	; (8002008 <HAL_MspInit+0x58>)
 8001fbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fc0:	6253      	str	r3, [r2, #36]	; 0x24
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_MspInit+0x58>)
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_MspInit+0x58>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	4a0d      	ldr	r2, [pc, #52]	; (8002008 <HAL_MspInit+0x58>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6213      	str	r3, [r2, #32]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_MspInit+0x58>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_MspInit+0x58>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	4a07      	ldr	r2, [pc, #28]	; (8002008 <HAL_MspInit+0x58>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6253      	str	r3, [r2, #36]	; 0x24
 8001ff2:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_MspInit+0x58>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr
 8002008:	40023800 	.word	0x40023800

0800200c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <NMI_Handler+0x4>

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr

08002042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002052:	f000 fbd3 	bl	80027fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}

0800205a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OUT_TEST_Pin);
 800205e:	2001      	movs	r0, #1
 8002060:	f001 fce0 	bl	8003a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}

08002068 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800206c:	4802      	ldr	r0, [pc, #8]	; (8002078 <DMA1_Channel1_IRQHandler+0x10>)
 800206e:	f001 fa33 	bl	80034d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200000a8 	.word	0x200000a8

0800207c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <TIM2_IRQHandler+0x10>)
 8002082:	f002 fc19 	bl	80048b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200001c0 	.word	0x200001c0

08002090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <USART1_IRQHandler+0x10>)
 8002096:	f003 fa11 	bl	80054bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000280 	.word	0x20000280

080020a4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <TIM6_IRQHandler+0x10>)
 80020aa:	f002 fc05 	bl	80048b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000180 	.word	0x20000180

080020b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <_sbrk+0x5c>)
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <_sbrk+0x60>)
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020cc:	4b13      	ldr	r3, [pc, #76]	; (800211c <_sbrk+0x64>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d102      	bne.n	80020da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d4:	4b11      	ldr	r3, [pc, #68]	; (800211c <_sbrk+0x64>)
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <_sbrk+0x68>)
 80020d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <_sbrk+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d207      	bcs.n	80020f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e8:	f003 fe66 	bl	8005db8 <__errno>
 80020ec:	4603      	mov	r3, r0
 80020ee:	220c      	movs	r2, #12
 80020f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	e009      	b.n	800210c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f8:	4b08      	ldr	r3, [pc, #32]	; (800211c <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fe:	4b07      	ldr	r3, [pc, #28]	; (800211c <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <_sbrk+0x64>)
 8002108:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210a:	68fb      	ldr	r3, [r7, #12]
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20004000 	.word	0x20004000
 8002118:	00000400 	.word	0x00000400
 800211c:	2000009c 	.word	0x2000009c
 8002120:	200002d8 	.word	0x200002d8

08002124 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002136:	f107 0308 	add.w	r3, r7, #8
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800214c:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <MX_TIM2_Init+0x94>)
 800214e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (32 - 1);
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002156:	221f      	movs	r2, #31
 8002158:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM2_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (10000 - 1);
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002162:	f242 720f 	movw	r2, #9999	; 0x270f
 8002166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <MX_TIM2_Init+0x94>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002174:	4813      	ldr	r0, [pc, #76]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002176:	f002 fa09 	bl	800458c <HAL_TIM_Base_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002180:	f7ff fe0a 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0308 	add.w	r3, r7, #8
 800218e:	4619      	mov	r1, r3
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <MX_TIM2_Init+0x94>)
 8002192:	f002 fd2b 	bl	8004bec <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800219c:	f7ff fdfc 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021a0:	2320      	movs	r3, #32
 80021a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_TIM2_Init+0x94>)
 80021ae:	f003 f817 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80021b8:	f7ff fdee 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021bc:	bf00      	nop
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	200001c0 	.word	0x200001c0

080021c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0318 	add.w	r3, r7, #24
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	f107 0310 	add.w	r3, r7, #16
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <MX_TIM4_Init+0xe0>)
 80021f4:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <MX_TIM4_Init+0xe4>)
 80021f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (2 - 1);
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <MX_TIM4_Init+0xe0>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b2a      	ldr	r3, [pc, #168]	; (80022a8 <MX_TIM4_Init+0xe0>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (1000 - 1);
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <MX_TIM4_Init+0xe0>)
 8002206:	f240 32e7 	movw	r2, #999	; 0x3e7
 800220a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220c:	4b26      	ldr	r3, [pc, #152]	; (80022a8 <MX_TIM4_Init+0xe0>)
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <MX_TIM4_Init+0xe0>)
 8002214:	2200      	movs	r2, #0
 8002216:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002218:	4823      	ldr	r0, [pc, #140]	; (80022a8 <MX_TIM4_Init+0xe0>)
 800221a:	f002 f9b7 	bl	800458c <HAL_TIM_Base_Init>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002224:	f7ff fdb8 	bl	8001d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800222c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800222e:	f107 0318 	add.w	r3, r7, #24
 8002232:	4619      	mov	r1, r3
 8002234:	481c      	ldr	r0, [pc, #112]	; (80022a8 <MX_TIM4_Init+0xe0>)
 8002236:	f002 fcd9 	bl	8004bec <HAL_TIM_ConfigClockSource>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002240:	f7ff fdaa 	bl	8001d98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002244:	4818      	ldr	r0, [pc, #96]	; (80022a8 <MX_TIM4_Init+0xe0>)
 8002246:	f002 fa59 	bl	80046fc <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002250:	f7ff fda2 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800225c:	f107 0310 	add.w	r3, r7, #16
 8002260:	4619      	mov	r1, r3
 8002262:	4811      	ldr	r0, [pc, #68]	; (80022a8 <MX_TIM4_Init+0xe0>)
 8002264:	f002 ffbc 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800226e:	f7ff fd93 	bl	8001d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002272:	2360      	movs	r3, #96	; 0x60
 8002274:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	4619      	mov	r1, r3
 8002288:	4807      	ldr	r0, [pc, #28]	; (80022a8 <MX_TIM4_Init+0xe0>)
 800228a:	f002 fbf1 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002294:	f7ff fd80 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <MX_TIM4_Init+0xe0>)
 800229a:	f000 f893 	bl	80023c4 <HAL_TIM_MspPostInit>

}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	; 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000140 	.word	0x20000140
 80022ac:	40000800 	.word	0x40000800

080022b0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b6:	463b      	mov	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <MX_TIM6_Init+0x64>)
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <MX_TIM6_Init+0x68>)
 80022c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (32 - 1);
 80022c4:	4b13      	ldr	r3, [pc, #76]	; (8002314 <MX_TIM6_Init+0x64>)
 80022c6:	221f      	movs	r2, #31
 80022c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ca:	4b12      	ldr	r3, [pc, #72]	; (8002314 <MX_TIM6_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (1000 - 1);
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <MX_TIM6_Init+0x64>)
 80022d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <MX_TIM6_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <MX_TIM6_Init+0x64>)
 80022e0:	f002 f954 	bl	800458c <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80022ea:	f7ff fd55 	bl	8001d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	4619      	mov	r1, r3
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <MX_TIM6_Init+0x64>)
 80022fc:	f002 ff70 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002306:	f7ff fd47 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000180 	.word	0x20000180
 8002318:	40001000 	.word	0x40001000

0800231c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d114      	bne.n	8002358 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6253      	str	r3, [r2, #36]	; 0x24
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	201c      	movs	r0, #28
 800234c:	f000 ff57 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002350:	201c      	movs	r0, #28
 8002352:	f000 ff70 	bl	8003236 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002356:	e02a      	b.n	80023ae <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_TIM_Base_MspInit+0xa0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10c      	bne.n	800237c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6253      	str	r3, [r2, #36]	; 0x24
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
}
 800237a:	e018      	b.n	80023ae <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0f      	ldr	r2, [pc, #60]	; (80023c0 <HAL_TIM_Base_MspInit+0xa4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d113      	bne.n	80023ae <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	6253      	str	r3, [r2, #36]	; 0x24
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_TIM_Base_MspInit+0x9c>)
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	202b      	movs	r0, #43	; 0x2b
 80023a4:	f000 ff2b 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80023a8:	202b      	movs	r0, #43	; 0x2b
 80023aa:	f000 ff44 	bl	8003236 <HAL_NVIC_EnableIRQ>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40001000 	.word	0x40001000

080023c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 030c 	add.w	r3, r7, #12
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a11      	ldr	r2, [pc, #68]	; (8002428 <HAL_TIM_MspPostInit+0x64>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d11b      	bne.n	800241e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	61d3      	str	r3, [r2, #28]
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_TIM_MspPostInit+0x68>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_PUMP_Pin;
 80023fe:	2340      	movs	r3, #64	; 0x40
 8002400:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800240e:	2302      	movs	r3, #2
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PUMP_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_TIM_MspPostInit+0x6c>)
 800241a:	f001 f93b 	bl	8003694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40000800 	.word	0x40000800
 800242c:	40023800 	.word	0x40023800
 8002430:	40020400 	.word	0x40020400

08002434 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d105      	bne.n	8002450 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 1);
 8002444:	2201      	movs	r2, #1
 8002446:	2101      	movs	r1, #1
 8002448:	4822      	ldr	r0, [pc, #136]	; (80024d4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800244a:	f001 faba 	bl	80039c2 <HAL_GPIO_WritePin>
			{
				debouncedButtonReleased = 1;
			}
		}
	}
}
 800244e:	e03a      	b.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0x92>
	else if(htim == &htim6)	// Timed debounce routine:
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a21      	ldr	r2, [pc, #132]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d136      	bne.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0x92>
		previousButton = currentButton;
 8002458:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002460:	701a      	strb	r2, [r3, #0]
		currentButton  = HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin);
 8002462:	2101      	movs	r1, #1
 8002464:	481f      	ldr	r0, [pc, #124]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002466:	f001 fa95 	bl	8003994 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002470:	701a      	strb	r2, [r3, #0]
		if (currentButton == previousButton)	// Increments counter if stable
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	429a      	cmp	r2, r3
 8002480:	d107      	bne.n	8002492 <HAL_TIM_PeriodElapsedCallback+0x5e>
			debounceCounter++;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	3301      	adds	r3, #1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e002      	b.n	8002498 <HAL_TIM_PeriodElapsedCallback+0x64>
			debounceCounter = 0;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
		if (debounceCounter >= DEBOUNCE_STABLE_PERIOD)
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d911      	bls.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0x92>
			HAL_TIM_Base_Stop_IT(&htim6);
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80024a4:	f002 f904 	bl	80046b0 <HAL_TIM_Base_Stop_IT>
			debounceCounter = 0;
 80024a8:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
			if (currentButton == 1)			// Active HIGH: Button Pressed == 1
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d103      	bne.n	80024c0 <HAL_TIM_PeriodElapsedCallback+0x8c>
				debouncedButtonPressed = 1;
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	e002      	b.n	80024c6 <HAL_TIM_PeriodElapsedCallback+0x92>
				debouncedButtonReleased = 1;
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200001c0 	.word	0x200001c0
 80024d4:	40020800 	.word	0x40020800
 80024d8:	20000180 	.word	0x20000180
 80024dc:	20000090 	.word	0x20000090
 80024e0:	20000091 	.word	0x20000091
 80024e4:	40020000 	.word	0x40020000
 80024e8:	20000092 	.word	0x20000092
 80024ec:	20000093 	.word	0x20000093
 80024f0:	20000094 	.word	0x20000094

080024f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_USART1_UART_Init+0x50>)
 80024fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800250e:	2200      	movs	r2, #0
 8002510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002518:	4b09      	ldr	r3, [pc, #36]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800251a:	220c      	movs	r2, #12
 800251c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800251e:	4b08      	ldr	r3, [pc, #32]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800252a:	4805      	ldr	r0, [pc, #20]	; (8002540 <MX_USART1_UART_Init+0x4c>)
 800252c:	f002 feb6 	bl	800529c <HAL_UART_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002536:	f7ff fc2f 	bl	8001d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000280 	.word	0x20000280
 8002544:	40013800 	.word	0x40013800

08002548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	609a      	str	r2, [r3, #8]
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <HAL_UART_MspInit+0x8c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d130      	bne.n	80025cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_UART_MspInit+0x90>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a1a      	ldr	r2, [pc, #104]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_UART_MspInit+0x90>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800259a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800259e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ac:	2307      	movs	r3, #7
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	4619      	mov	r1, r3
 80025b6:	4809      	ldr	r0, [pc, #36]	; (80025dc <HAL_UART_MspInit+0x94>)
 80025b8:	f001 f86c 	bl	8003694 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025bc:	2200      	movs	r2, #0
 80025be:	2100      	movs	r1, #0
 80025c0:	2025      	movs	r0, #37	; 0x25
 80025c2:	f000 fe1c 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025c6:	2025      	movs	r0, #37	; 0x25
 80025c8:	f000 fe35 	bl	8003236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025cc:	bf00      	nop
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000

080025e0 <UART_TX_string>:


// https://x-io.co.uk/serial-oscilloscope/

void UART_TX_string(char* buffer)	// UART TX facade
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fd fdc9 	bl	8000180 <strlen>
 80025ee:	4603      	mov	r3, r0
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4803      	ldr	r0, [pc, #12]	; (8002608 <UART_TX_string+0x28>)
 80025fa:	f002 fe9c 	bl	8005336 <HAL_UART_Transmit>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	20000280 	.word	0x20000280

0800260c <UART_TX_float>:

void UART_TX_float(float value)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	if (value >= 0)	sprintf(tx_buffer, "%2d.%03d,",  (uint16_t)( value), (((uint16_t)(1000 * value))%1000));
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7fe fcb7 	bl	8000f8c <__aeabi_fcmpge>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01f      	beq.n	8002664 <UART_TX_float+0x58>
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fe fcc5 	bl	8000fb4 <__aeabi_f2uiz>
 800262a:	4603      	mov	r3, r0
 800262c:	b29b      	uxth	r3, r3
 800262e:	461c      	mov	r4, r3
 8002630:	4921      	ldr	r1, [pc, #132]	; (80026b8 <UART_TX_float+0xac>)
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7fe faf8 	bl	8000c28 <__aeabi_fmul>
 8002638:	4603      	mov	r3, r0
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe fcba 	bl	8000fb4 <__aeabi_f2uiz>
 8002640:	4603      	mov	r3, r0
 8002642:	b29b      	uxth	r3, r3
 8002644:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <UART_TX_float+0xb0>)
 8002646:	fba2 1203 	umull	r1, r2, r2, r3
 800264a:	0992      	lsrs	r2, r2, #6
 800264c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002650:	fb01 f202 	mul.w	r2, r1, r2
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	b29b      	uxth	r3, r3
 8002658:	4622      	mov	r2, r4
 800265a:	4919      	ldr	r1, [pc, #100]	; (80026c0 <UART_TX_float+0xb4>)
 800265c:	4819      	ldr	r0, [pc, #100]	; (80026c4 <UART_TX_float+0xb8>)
 800265e:	f003 fbdd 	bl	8005e1c <siprintf>
 8002662:	e021      	b.n	80026a8 <UART_TX_float+0x9c>
	else			sprintf(tx_buffer, "%2d.%03d,", -(uint16_t)(-value), (((uint16_t)(1000 * value))%1000));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fca2 	bl	8000fb4 <__aeabi_f2uiz>
 8002670:	4603      	mov	r3, r0
 8002672:	b29b      	uxth	r3, r3
 8002674:	425c      	negs	r4, r3
 8002676:	4910      	ldr	r1, [pc, #64]	; (80026b8 <UART_TX_float+0xac>)
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fe fad5 	bl	8000c28 <__aeabi_fmul>
 800267e:	4603      	mov	r3, r0
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fc97 	bl	8000fb4 <__aeabi_f2uiz>
 8002686:	4603      	mov	r3, r0
 8002688:	b29b      	uxth	r3, r3
 800268a:	4a0c      	ldr	r2, [pc, #48]	; (80026bc <UART_TX_float+0xb0>)
 800268c:	fba2 1203 	umull	r1, r2, r2, r3
 8002690:	0992      	lsrs	r2, r2, #6
 8002692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002696:	fb01 f202 	mul.w	r2, r1, r2
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	b29b      	uxth	r3, r3
 800269e:	4622      	mov	r2, r4
 80026a0:	4907      	ldr	r1, [pc, #28]	; (80026c0 <UART_TX_float+0xb4>)
 80026a2:	4808      	ldr	r0, [pc, #32]	; (80026c4 <UART_TX_float+0xb8>)
 80026a4:	f003 fbba 	bl	8005e1c <siprintf>
	UART_TX_string(tx_buffer);
 80026a8:	4806      	ldr	r0, [pc, #24]	; (80026c4 <UART_TX_float+0xb8>)
 80026aa:	f7ff ff99 	bl	80025e0 <UART_TX_string>
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	447a0000 	.word	0x447a0000
 80026bc:	10624dd3 	.word	0x10624dd3
 80026c0:	080068f0 	.word	0x080068f0
 80026c4:	20000240 	.word	0x20000240

080026c8 <UART_RX>:

void UART_RX(char* buffer)	// UART RX facade
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, BYTES_TO_RX);
 80026d0:	2201      	movs	r2, #1
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <UART_RX+0x1c>)
 80026d6:	f002 fec0 	bl	800545a <HAL_UART_Receive_IT>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000280 	.word	0x20000280

080026e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	UART_RX(rx_buffer);
 80026f0:	4804      	ldr	r0, [pc, #16]	; (8002704 <HAL_UART_RxCpltCallback+0x1c>)
 80026f2:	f7ff ffe9 	bl	80026c8 <UART_RX>
	flag_CRX = 1;
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_UART_RxCpltCallback+0x20>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20000200 	.word	0x20000200
 8002708:	20000097 	.word	0x20000097

0800270c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800270e:	490d      	ldr	r1, [pc, #52]	; (8002744 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002714:	e002      	b.n	800271c <LoopCopyDataInit>

08002716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800271a:	3304      	adds	r3, #4

0800271c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800271c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002720:	d3f9      	bcc.n	8002716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002724:	4c0a      	ldr	r4, [pc, #40]	; (8002750 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002728:	e001      	b.n	800272e <LoopFillZerobss>

0800272a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800272a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800272c:	3204      	adds	r2, #4

0800272e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002730:	d3fb      	bcc.n	800272a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002732:	f7ff fcf7 	bl	8002124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002736:	f003 fb45 	bl	8005dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800273a:	f7ff f8e5 	bl	8001908 <main>
  bx lr
 800273e:	4770      	bx	lr
  ldr r0, =_sdata
 8002740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002744:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002748:	08006964 	.word	0x08006964
  ldr r2, =_sbss
 800274c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002750:	200002d8 	.word	0x200002d8

08002754 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002754:	e7fe      	b.n	8002754 <ADC1_IRQHandler>

08002756 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002760:	2003      	movs	r0, #3
 8002762:	f000 fd41 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002766:	200f      	movs	r0, #15
 8002768:	f000 f80e 	bl	8002788 <HAL_InitTick>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	71fb      	strb	r3, [r7, #7]
 8002776:	e001      	b.n	800277c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002778:	f7ff fc1a 	bl	8001fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800277c:	79fb      	ldrb	r3, [r7, #7]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002794:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_InitTick+0x68>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d022      	beq.n	80027e2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800279c:	4b15      	ldr	r3, [pc, #84]	; (80027f4 <HAL_InitTick+0x6c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_InitTick+0x68>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fd4e 	bl	8003252 <HAL_SYSTICK_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10f      	bne.n	80027dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d809      	bhi.n	80027d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c2:	2200      	movs	r2, #0
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ca:	f000 fd18 	bl	80031fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <HAL_InitTick+0x70>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e007      	b.n	80027e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e004      	b.n	80027e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e001      	b.n	80027e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000000 	.word	0x20000000
 80027f8:	20000004 	.word	0x20000004

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_IncTick+0x1c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_IncTick+0x20>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4413      	add	r3, r2
 800280a:	4a03      	ldr	r2, [pc, #12]	; (8002818 <HAL_IncTick+0x1c>)
 800280c:	6013      	str	r3, [r2, #0]
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	200002c4 	.word	0x200002c4
 800281c:	20000008 	.word	0x20000008

08002820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return uwTick;
 8002824:	4b02      	ldr	r3, [pc, #8]	; (8002830 <HAL_GetTick+0x10>)
 8002826:	681b      	ldr	r3, [r3, #0]
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	200002c4 	.word	0x200002c4

08002834 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08e      	sub	sp, #56	; 0x38
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e127      	b.n	8002aa4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	2b00      	cmp	r3, #0
 8002860:	d115      	bne.n	800288e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002870:	4b8e      	ldr	r3, [pc, #568]	; (8002aac <HAL_ADC_Init+0x278>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	4a8d      	ldr	r2, [pc, #564]	; (8002aac <HAL_ADC_Init+0x278>)
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	6213      	str	r3, [r2, #32]
 800287c:	4b8b      	ldr	r3, [pc, #556]	; (8002aac <HAL_ADC_Init+0x278>)
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7fe fdc3 	bl	8001414 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	f040 80ff 	bne.w	8002a9a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a4:	f023 0302 	bic.w	r3, r3, #2
 80028a8:	f043 0202 	orr.w	r2, r3, #2
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80028b0:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <HAL_ADC_Init+0x27c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	497c      	ldr	r1, [pc, #496]	; (8002ab0 <HAL_ADC_Init+0x27c>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80028ca:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	4619      	mov	r1, r3
 80028d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fab3 f383 	clz	r3, r3
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80028ee:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80028f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fc:	4619      	mov	r1, r3
 80028fe:	2302      	movs	r3, #2
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002916:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291a:	4313      	orrs	r3, r2
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002922:	2b10      	cmp	r3, #16
 8002924:	d007      	beq.n	8002936 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800292e:	4313      	orrs	r3, r2
 8002930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002932:	4313      	orrs	r3, r2
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d04f      	beq.n	80029e4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294a:	4313      	orrs	r3, r2
 800294c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002956:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	6912      	ldr	r2, [r2, #16]
 800295c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002960:	d003      	beq.n	800296a <HAL_ADC_Init+0x136>
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6912      	ldr	r2, [r2, #16]
 8002966:	2a01      	cmp	r2, #1
 8002968:	d102      	bne.n	8002970 <HAL_ADC_Init+0x13c>
 800296a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296e:	e000      	b.n	8002972 <HAL_ADC_Init+0x13e>
 8002970:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002972:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002976:	4313      	orrs	r3, r2
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d125      	bne.n	80029d0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800298a:	2b00      	cmp	r3, #0
 800298c:	d114      	bne.n	80029b8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	3b01      	subs	r3, #1
 8002994:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	fa92 f2a2 	rbit	r2, r2
 80029a0:	617a      	str	r2, [r7, #20]
  return result;
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	fab2 f282 	clz	r2, r2
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4093      	lsls	r3, r2
 80029ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b2:	4313      	orrs	r3, r2
 80029b4:	633b      	str	r3, [r7, #48]	; 0x30
 80029b6:	e00b      	b.n	80029d0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_ADC_Init+0x280>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <HAL_ADC_Init+0x284>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a00:	d003      	beq.n	8002a0a <HAL_ADC_Init+0x1d6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d119      	bne.n	8002a3e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002a1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	fa92 f2a2 	rbit	r2, r2
 8002a26:	60fa      	str	r2, [r7, #12]
  return result;
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	fab2 f282 	clz	r2, r2
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	fa03 f202 	lsl.w	r2, r3, r2
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a3c:	e007      	b.n	8002a4e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b19      	ldr	r3, [pc, #100]	; (8002abc <HAL_ADC_Init+0x288>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d10b      	bne.n	8002a76 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a68:	f023 0303 	bic.w	r3, r3, #3
 8002a6c:	f043 0201 	orr.w	r2, r3, #1
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c
 8002a74:	e014      	b.n	8002aa0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	f023 0312 	bic.w	r3, r3, #18
 8002a7e:	f043 0210 	orr.w	r2, r3, #16
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002a98:	e002      	b.n	8002aa0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002aa0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3738      	adds	r7, #56	; 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40012700 	.word	0x40012700
 8002ab4:	fcfc16ff 	.word	0xfcfc16ff
 8002ab8:	c0fff18d 	.word	0xc0fff18d
 8002abc:	bf80fffe 	.word	0xbf80fffe

08002ac0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_Start_DMA+0x1e>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e074      	b.n	8002bc8 <HAL_ADC_Start_DMA+0x108>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f9da 	bl	8002ea0 <ADC_Enable>
 8002aec:	4603      	mov	r3, r0
 8002aee:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d167      	bne.n	8002bc6 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d007      	beq.n	8002b28 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b34:	d106      	bne.n	8002b44 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	f023 0206 	bic.w	r2, r3, #6
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	651a      	str	r2, [r3, #80]	; 0x50
 8002b42:	e002      	b.n	8002b4a <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_ADC_Start_DMA+0x110>)
 8002b58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <HAL_ADC_Start_DMA+0x114>)
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_ADC_Start_DMA+0x118>)
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3358      	adds	r3, #88	; 0x58
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f000 fbba 	bl	800331c <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d107      	bne.n	8002bc6 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bc4:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	08002f59 	.word	0x08002f59
 8002bd4:	08003001 	.word	0x08003001
 8002bd8:	0800301d 	.word	0x0800301d

08002bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x20>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e134      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x28a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d81c      	bhi.n	8002c6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b05      	subs	r3, #5
 8002c42:	221f      	movs	r2, #31
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	4019      	ands	r1, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	3b05      	subs	r3, #5
 8002c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
 8002c68:	e07e      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d81c      	bhi.n	8002cac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	3b23      	subs	r3, #35	; 0x23
 8002c84:	221f      	movs	r2, #31
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4019      	ands	r1, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b23      	subs	r3, #35	; 0x23
 8002c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002caa:	e05d      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b12      	cmp	r3, #18
 8002cb2:	d81c      	bhi.n	8002cee <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b41      	subs	r3, #65	; 0x41
 8002cc6:	221f      	movs	r2, #31
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	4019      	ands	r1, r3
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b41      	subs	r3, #65	; 0x41
 8002ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
 8002cec:	e03c      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	d81c      	bhi.n	8002d30 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	3b5f      	subs	r3, #95	; 0x5f
 8002d08:	221f      	movs	r2, #31
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	4019      	ands	r1, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6818      	ldr	r0, [r3, #0]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b5f      	subs	r3, #95	; 0x5f
 8002d22:	fa00 f203 	lsl.w	r2, r0, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d2e:	e01b      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b7d      	subs	r3, #125	; 0x7d
 8002d42:	221f      	movs	r2, #31
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	4019      	ands	r1, r3
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b7d      	subs	r3, #125	; 0x7d
 8002d5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b09      	cmp	r3, #9
 8002d6e:	d81a      	bhi.n	8002da6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6959      	ldr	r1, [r3, #20]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	2207      	movs	r2, #7
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	4019      	ands	r1, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6898      	ldr	r0, [r3, #8]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4413      	add	r3, r2
 8002d98:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	615a      	str	r2, [r3, #20]
 8002da4:	e042      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b13      	cmp	r3, #19
 8002dac:	d81c      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6919      	ldr	r1, [r3, #16]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b1e      	subs	r3, #30
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	4019      	ands	r1, r3
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6898      	ldr	r0, [r3, #8]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b1e      	subs	r3, #30
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	e021      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b1a      	cmp	r3, #26
 8002dee:	d81c      	bhi.n	8002e2a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68d9      	ldr	r1, [r3, #12]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b3c      	subs	r3, #60	; 0x3c
 8002e02:	2207      	movs	r2, #7
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	4019      	ands	r1, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6898      	ldr	r0, [r3, #8]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	3b3c      	subs	r3, #60	; 0x3c
 8002e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	e000      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002e2a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d003      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e38:	2b11      	cmp	r3, #17
 8002e3a:	d121      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002e3c:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_ADC_ConfigChannel+0x294>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11b      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_ADC_ConfigChannel+0x294>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_ADC_ConfigChannel+0x294>)
 8002e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e52:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d111      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	; (8002e98 <HAL_ADC_ConfigChannel+0x298>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <HAL_ADC_ConfigChannel+0x29c>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0c9a      	lsrs	r2, r3, #18
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002e72:	e002      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f9      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3714      	adds	r7, #20
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40012700 	.word	0x40012700
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	431bde83 	.word	0x431bde83

08002ea0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d043      	beq.n	8002f46 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <ADC_Enable+0xb0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a20      	ldr	r2, [pc, #128]	; (8002f54 <ADC_Enable+0xb4>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	0c9a      	lsrs	r2, r3, #18
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002ee2:	e002      	b.n	8002eea <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f9      	bne.n	8002ee4 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002ef0:	f7ff fc96 	bl	8002820 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ef6:	e01f      	b.n	8002f38 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002ef8:	f7ff fc92 	bl	8002820 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d918      	bls.n	8002f38 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f10:	2b40      	cmp	r3, #64	; 0x40
 8002f12:	d011      	beq.n	8002f38 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d1d8      	bne.n	8002ef8 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000000 	.word	0x20000000
 8002f54:	431bde83 	.word	0x431bde83

08002f58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d13d      	bne.n	8002fee <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12c      	bne.n	8002fe6 <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d127      	bne.n	8002fe6 <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d119      	bne.n	8002fe6 <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0220 	bic.w	r2, r2, #32
 8002fc0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7fe fa80 	bl	80014ec <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002fec:	e004      	b.n	8002ff8 <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fde4 	bl	8002bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003014:	bf00      	nop
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303a:	f043 0204 	orr.w	r2, r3, #4
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fdd3 	bl	8002bee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003048:	bf00      	nop
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800306c:	4013      	ands	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800307c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <__NVIC_SetPriorityGrouping+0x44>)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	60d3      	str	r3, [r2, #12]
}
 8003088:	bf00      	nop
 800308a:	3714      	adds	r7, #20
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <__NVIC_GetPriorityGrouping+0x18>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 0307 	and.w	r3, r3, #7
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	db0b      	blt.n	80030de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	f003 021f 	and.w	r2, r3, #31
 80030cc:	4906      	ldr	r1, [pc, #24]	; (80030e8 <__NVIC_EnableIRQ+0x34>)
 80030ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	2001      	movs	r0, #1
 80030d6:	fa00 f202 	lsl.w	r2, r0, r2
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100

080030ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	6039      	str	r1, [r7, #0]
 80030f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	db0a      	blt.n	8003116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	490c      	ldr	r1, [pc, #48]	; (8003138 <__NVIC_SetPriority+0x4c>)
 8003106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	440b      	add	r3, r1
 8003110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003114:	e00a      	b.n	800312c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4908      	ldr	r1, [pc, #32]	; (800313c <__NVIC_SetPriority+0x50>)
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	3b04      	subs	r3, #4
 8003124:	0112      	lsls	r2, r2, #4
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	440b      	add	r3, r1
 800312a:	761a      	strb	r2, [r3, #24]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000e100 	.word	0xe000e100
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003140:	b480      	push	{r7}
 8003142:	b089      	sub	sp, #36	; 0x24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f1c3 0307 	rsb	r3, r3, #7
 800315a:	2b04      	cmp	r3, #4
 800315c:	bf28      	it	cs
 800315e:	2304      	movcs	r3, #4
 8003160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3304      	adds	r3, #4
 8003166:	2b06      	cmp	r3, #6
 8003168:	d902      	bls.n	8003170 <NVIC_EncodePriority+0x30>
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3b03      	subs	r3, #3
 800316e:	e000      	b.n	8003172 <NVIC_EncodePriority+0x32>
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	f04f 32ff 	mov.w	r2, #4294967295
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	401a      	ands	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003188:	f04f 31ff 	mov.w	r1, #4294967295
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa01 f303 	lsl.w	r3, r1, r3
 8003192:	43d9      	mvns	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	4313      	orrs	r3, r2
         );
}
 800319a:	4618      	mov	r0, r3
 800319c:	3724      	adds	r7, #36	; 0x24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d301      	bcc.n	80031ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <SysTick_Config+0x40>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c2:	210f      	movs	r1, #15
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f7ff ff90 	bl	80030ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SysTick_Config+0x40>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x40>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff2d 	bl	8003050 <__NVIC_SetPriorityGrouping>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003210:	f7ff ff42 	bl	8003098 <__NVIC_GetPriorityGrouping>
 8003214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7ff ff90 	bl	8003140 <NVIC_EncodePriority>
 8003220:	4602      	mov	r2, r0
 8003222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff5f 	bl	80030ec <__NVIC_SetPriority>
}
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff35 	bl	80030b4 <__NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffa2 	bl	80031a4 <SysTick_Config>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e043      	b.n	8003306 <HAL_DMA_Init+0x9a>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_DMA_Init+0xa4>)
 8003286:	4413      	add	r3, r2
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_DMA_Init+0xa8>)
 800328a:	fba2 2303 	umull	r2, r3, r2, r3
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	009a      	lsls	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_DMA_Init+0xac>)
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	bffd9ff8 	.word	0xbffd9ff8
 8003314:	cccccccd 	.word	0xcccccccd
 8003318:	40026000 	.word	0x40026000

0800331c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_DMA_Start_IT+0x20>
 8003338:	2302      	movs	r3, #2
 800333a:	e04b      	b.n	80033d4 <HAL_DMA_Start_IT+0xb8>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d13a      	bne.n	80033c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f95e 	bl	8003636 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d008      	beq.n	8003394 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 020e 	orr.w	r2, r2, #14
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e00f      	b.n	80033b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 020a 	orr.w	r2, r2, #10
 80033b2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e005      	b.n	80033d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033ce:	2302      	movs	r3, #2
 80033d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d008      	beq.n	8003406 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2204      	movs	r2, #4
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e022      	b.n	800344c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 020e 	bic.w	r2, r2, #14
 8003414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 021c 	and.w	r2, r3, #28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f202 	lsl.w	r2, r1, r2
 8003438:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800344a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d005      	beq.n	800347a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2204      	movs	r2, #4
 8003472:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	e029      	b.n	80034ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 020e 	bic.w	r2, r2, #14
 8003488:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 021c 	and.w	r2, r3, #28
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
    }
  }
  return status;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f003 031c 	and.w	r3, r3, #28
 80034f8:	2204      	movs	r2, #4
 80034fa:	409a      	lsls	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4013      	ands	r3, r2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d026      	beq.n	8003552 <HAL_DMA_IRQHandler+0x7a>
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	2b00      	cmp	r3, #0
 800350c:	d021      	beq.n	8003552 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d107      	bne.n	800352c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0204 	bic.w	r2, r2, #4
 800352a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003530:	f003 021c 	and.w	r2, r3, #28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003538:	2104      	movs	r1, #4
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d071      	beq.n	800362c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003550:	e06c      	b.n	800362c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 031c 	and.w	r3, r3, #28
 800355a:	2202      	movs	r2, #2
 800355c:	409a      	lsls	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02e      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xec>
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d029      	beq.n	80035c4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 020a 	bic.w	r2, r2, #10
 800358c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f003 021c 	and.w	r2, r3, #28
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	2102      	movs	r1, #2
 80035a4:	fa01 f202 	lsl.w	r2, r1, r2
 80035a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d038      	beq.n	800362c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035c2:	e033      	b.n	800362c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	f003 031c 	and.w	r3, r3, #28
 80035cc:	2208      	movs	r2, #8
 80035ce:	409a      	lsls	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4013      	ands	r3, r2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d02a      	beq.n	800362e <HAL_DMA_IRQHandler+0x156>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d025      	beq.n	800362e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 020e 	bic.w	r2, r2, #14
 80035f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 021c 	and.w	r2, r3, #28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	2b00      	cmp	r3, #0
 8003622:	d004      	beq.n	800362e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800362c:	bf00      	nop
 800362e:	bf00      	nop
}
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	60f8      	str	r0, [r7, #12]
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f003 021c 	and.w	r2, r3, #28
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b10      	cmp	r3, #16
 8003666:	d108      	bne.n	800367a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003678:	e007      	b.n	800368a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	60da      	str	r2, [r3, #12]
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80036aa:	e154      	b.n	8003956 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	4013      	ands	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 8146 	beq.w	8003950 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d005      	beq.n	80036dc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d130      	bne.n	800373e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	2203      	movs	r2, #3
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	4013      	ands	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4313      	orrs	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003712:	2201      	movs	r2, #1
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43db      	mvns	r3, r3
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 0201 	and.w	r2, r3, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b03      	cmp	r3, #3
 8003748:	d017      	beq.n	800377a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	2203      	movs	r2, #3
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d123      	bne.n	80037ce <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	08da      	lsrs	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	3208      	adds	r2, #8
 800378e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003792:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	220f      	movs	r2, #15
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	6939      	ldr	r1, [r7, #16]
 80037ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 0203 	and.w	r2, r3, #3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80a0 	beq.w	8003950 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003810:	4b58      	ldr	r3, [pc, #352]	; (8003974 <HAL_GPIO_Init+0x2e0>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_GPIO_Init+0x2e0>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6213      	str	r3, [r2, #32]
 800381c:	4b55      	ldr	r3, [pc, #340]	; (8003974 <HAL_GPIO_Init+0x2e0>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003828:	4a53      	ldr	r2, [pc, #332]	; (8003978 <HAL_GPIO_Init+0x2e4>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	3302      	adds	r3, #2
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	220f      	movs	r2, #15
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a4b      	ldr	r2, [pc, #300]	; (800397c <HAL_GPIO_Init+0x2e8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d019      	beq.n	8003888 <HAL_GPIO_Init+0x1f4>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a4a      	ldr	r2, [pc, #296]	; (8003980 <HAL_GPIO_Init+0x2ec>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_GPIO_Init+0x1f0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a49      	ldr	r2, [pc, #292]	; (8003984 <HAL_GPIO_Init+0x2f0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00d      	beq.n	8003880 <HAL_GPIO_Init+0x1ec>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a48      	ldr	r2, [pc, #288]	; (8003988 <HAL_GPIO_Init+0x2f4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <HAL_GPIO_Init+0x1e8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a47      	ldr	r2, [pc, #284]	; (800398c <HAL_GPIO_Init+0x2f8>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_GPIO_Init+0x1e4>
 8003874:	2304      	movs	r3, #4
 8003876:	e008      	b.n	800388a <HAL_GPIO_Init+0x1f6>
 8003878:	2305      	movs	r3, #5
 800387a:	e006      	b.n	800388a <HAL_GPIO_Init+0x1f6>
 800387c:	2303      	movs	r3, #3
 800387e:	e004      	b.n	800388a <HAL_GPIO_Init+0x1f6>
 8003880:	2302      	movs	r3, #2
 8003882:	e002      	b.n	800388a <HAL_GPIO_Init+0x1f6>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_GPIO_Init+0x1f6>
 8003888:	2300      	movs	r3, #0
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	f002 0203 	and.w	r2, r2, #3
 8003890:	0092      	lsls	r2, r2, #2
 8003892:	4093      	lsls	r3, r2
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800389a:	4937      	ldr	r1, [pc, #220]	; (8003978 <HAL_GPIO_Init+0x2e4>)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	3302      	adds	r3, #2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038a8:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80038cc:	4a30      	ldr	r2, [pc, #192]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80038d2:	4b2f      	ldr	r3, [pc, #188]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038f6:	4a26      	ldr	r2, [pc, #152]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038fc:	4b24      	ldr	r3, [pc, #144]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003920:	4a1b      	ldr	r2, [pc, #108]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003926:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43db      	mvns	r3, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4013      	ands	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800394a:	4a11      	ldr	r2, [pc, #68]	; (8003990 <HAL_GPIO_Init+0x2fc>)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3301      	adds	r3, #1
 8003954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	f47f aea3 	bne.w	80036ac <HAL_GPIO_Init+0x18>
  }
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	40010000 	.word	0x40010000
 800397c:	40020000 	.word	0x40020000
 8003980:	40020400 	.word	0x40020400
 8003984:	40020800 	.word	0x40020800
 8003988:	40020c00 	.word	0x40020c00
 800398c:	40021000 	.word	0x40021000
 8003990:	40010400 	.word	0x40010400

08003994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	bc80      	pop	{r7}
 80039c0:	4770      	bx	lr

080039c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	807b      	strh	r3, [r7, #2]
 80039ce:	4613      	mov	r3, r2
 80039d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039d2:	787b      	ldrb	r3, [r7, #1]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80039de:	e003      	b.n	80039e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	041a      	lsls	r2, r3, #16
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr

080039f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a04:	887a      	ldrh	r2, [r7, #2]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	041a      	lsls	r2, r3, #16
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	400b      	ands	r3, r1
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	619a      	str	r2, [r3, #24]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a3a:	4a05      	ldr	r2, [pc, #20]	; (8003a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a40:	88fb      	ldrh	r3, [r7, #6]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fd fed6 	bl	80017f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40010400 	.word	0x40010400

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e31d      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a66:	4b94      	ldr	r3, [pc, #592]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a70:	4b91      	ldr	r3, [pc, #580]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d07b      	beq.n	8003b7e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d006      	beq.n	8003a9a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d10f      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5e>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d10b      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9a:	4b87      	ldr	r3, [pc, #540]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d06a      	beq.n	8003b7c <HAL_RCC_OscConfig+0x128>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d166      	bne.n	8003b7c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e2f7      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d106      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x74>
 8003aba:	4b7f      	ldr	r3, [pc, #508]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7e      	ldr	r2, [pc, #504]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	e02d      	b.n	8003b24 <HAL_RCC_OscConfig+0xd0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10c      	bne.n	8003aea <HAL_RCC_OscConfig+0x96>
 8003ad0:	4b79      	ldr	r3, [pc, #484]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a78      	ldr	r2, [pc, #480]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a75      	ldr	r2, [pc, #468]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	e01c      	b.n	8003b24 <HAL_RCC_OscConfig+0xd0>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d10c      	bne.n	8003b0c <HAL_RCC_OscConfig+0xb8>
 8003af2:	4b71      	ldr	r3, [pc, #452]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a70      	ldr	r2, [pc, #448]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	4b6e      	ldr	r3, [pc, #440]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6d      	ldr	r2, [pc, #436]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCC_OscConfig+0xd0>
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a69      	ldr	r2, [pc, #420]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a66      	ldr	r2, [pc, #408]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d013      	beq.n	8003b54 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fe78 	bl	8002820 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b34:	f7fe fe74 	bl	8002820 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b64      	cmp	r3, #100	; 0x64
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e2ad      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0xe0>
 8003b52:	e014      	b.n	8003b7e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fe64 	bl	8002820 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fe fe60 	bl	8002820 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e299      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b6e:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x108>
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d05a      	beq.n	8003c40 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d119      	bne.n	8003bca <HAL_RCC_OscConfig+0x176>
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d116      	bne.n	8003bca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x160>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e276      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	021b      	lsls	r3, r3, #8
 8003bc2:	493d      	ldr	r1, [pc, #244]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc8:	e03a      	b.n	8003c40 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd2:	4b3a      	ldr	r3, [pc, #232]	; (8003cbc <HAL_RCC_OscConfig+0x268>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fe22 	bl	8002820 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be0:	f7fe fe1e 	bl	8002820 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e257      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf2:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfe:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	492a      	ldr	r1, [pc, #168]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	604b      	str	r3, [r1, #4]
 8003c12:	e015      	b.n	8003c40 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c14:	4b29      	ldr	r3, [pc, #164]	; (8003cbc <HAL_RCC_OscConfig+0x268>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fe01 	bl	8002820 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe fdfd 	bl	8002820 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e236      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80b8 	beq.w	8003dbe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d170      	bne.n	8003d36 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c54:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x218>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e21a      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d921      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fc23 	bl	80044cc <RCC_SetFlashLatencyFromMSIRange>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e208      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c90:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4906      	ldr	r1, [pc, #24]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	061b      	lsls	r3, r3, #24
 8003cb0:	4901      	ldr	r1, [pc, #4]	; (8003cb8 <HAL_RCC_OscConfig+0x264>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e020      	b.n	8003cfa <HAL_RCC_OscConfig+0x2a6>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc0:	4ba4      	ldr	r3, [pc, #656]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	49a1      	ldr	r1, [pc, #644]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd2:	4ba0      	ldr	r3, [pc, #640]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	061b      	lsls	r3, r3, #24
 8003ce0:	499c      	ldr	r1, [pc, #624]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 fbee 	bl	80044cc <RCC_SetFlashLatencyFromMSIRange>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e1d3      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	0b5b      	lsrs	r3, r3, #13
 8003d00:	3301      	adds	r3, #1
 8003d02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003d0a:	4a92      	ldr	r2, [pc, #584]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003d0c:	6892      	ldr	r2, [r2, #8]
 8003d0e:	0912      	lsrs	r2, r2, #4
 8003d10:	f002 020f 	and.w	r2, r2, #15
 8003d14:	4990      	ldr	r1, [pc, #576]	; (8003f58 <HAL_RCC_OscConfig+0x504>)
 8003d16:	5c8a      	ldrb	r2, [r1, r2]
 8003d18:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003d1a:	4a90      	ldr	r2, [pc, #576]	; (8003f5c <HAL_RCC_OscConfig+0x508>)
 8003d1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d1e:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <HAL_RCC_OscConfig+0x50c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fd30 	bl	8002788 <HAL_InitTick>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d045      	beq.n	8003dbe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	e1b5      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d029      	beq.n	8003d92 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d3e:	4b89      	ldr	r3, [pc, #548]	; (8003f64 <HAL_RCC_OscConfig+0x510>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fd6c 	bl	8002820 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fd68 	bl	8002820 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1a1      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d5e:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d6a:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4977      	ldr	r1, [pc, #476]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d7c:	4b75      	ldr	r3, [pc, #468]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	4972      	ldr	r1, [pc, #456]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	e015      	b.n	8003dbe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d92:	4b74      	ldr	r3, [pc, #464]	; (8003f64 <HAL_RCC_OscConfig+0x510>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fe fd42 	bl	8002820 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003da0:	f7fe fd3e 	bl	8002820 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e177      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003db2:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d030      	beq.n	8003e2c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x514>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd8:	f7fe fd22 	bl	8002820 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de0:	f7fe fd1e 	bl	8002820 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e157      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003df2:	4b58      	ldr	r3, [pc, #352]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x38c>
 8003dfe:	e015      	b.n	8003e2c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e00:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <HAL_RCC_OscConfig+0x514>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e06:	f7fe fd0b 	bl	8002820 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fd07 	bl	8002820 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e140      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e20:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80b5 	beq.w	8003fa4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	4a41      	ldr	r2, [pc, #260]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e54:	6253      	str	r3, [r2, #36]	; 0x24
 8003e56:	4b3f      	ldr	r3, [pc, #252]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b41      	ldr	r3, [pc, #260]	; (8003f6c <HAL_RCC_OscConfig+0x518>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b3e      	ldr	r3, [pc, #248]	; (8003f6c <HAL_RCC_OscConfig+0x518>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3d      	ldr	r2, [pc, #244]	; (8003f6c <HAL_RCC_OscConfig+0x518>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fccf 	bl	8002820 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fe fccb 	bl	8002820 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	; 0x64
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e104      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x518>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x466>
 8003eac:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb6:	6353      	str	r3, [r2, #52]	; 0x34
 8003eb8:	e02d      	b.n	8003f16 <HAL_RCC_OscConfig+0x4c2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x488>
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	6353      	str	r3, [r2, #52]	; 0x34
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed2:	4a20      	ldr	r2, [pc, #128]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ed4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed8:	6353      	str	r3, [r2, #52]	; 0x34
 8003eda:	e01c      	b.n	8003f16 <HAL_RCC_OscConfig+0x4c2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d10c      	bne.n	8003efe <HAL_RCC_OscConfig+0x4aa>
 8003ee4:	4b1b      	ldr	r3, [pc, #108]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eee:	6353      	str	r3, [r2, #52]	; 0x34
 8003ef0:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6353      	str	r3, [r2, #52]	; 0x34
 8003efc:	e00b      	b.n	8003f16 <HAL_RCC_OscConfig+0x4c2>
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f08:	6353      	str	r3, [r2, #52]	; 0x34
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f14:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1e:	f7fe fc7f 	bl	8002820 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f24:	e00a      	b.n	8003f3c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fe fc7b 	bl	8002820 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e0b2      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ee      	beq.n	8003f26 <HAL_RCC_OscConfig+0x4d2>
 8003f48:	e023      	b.n	8003f92 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fc69 	bl	8002820 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f50:	e019      	b.n	8003f86 <HAL_RCC_OscConfig+0x532>
 8003f52:	bf00      	nop
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08006908 	.word	0x08006908
 8003f5c:	20000000 	.word	0x20000000
 8003f60:	20000004 	.word	0x20000004
 8003f64:	42470020 	.word	0x42470020
 8003f68:	42470680 	.word	0x42470680
 8003f6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fe fc56 	bl	8002820 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e08d      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f86:	4b49      	ldr	r3, [pc, #292]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8003f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ee      	bne.n	8003f70 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f92:	7ffb      	ldrb	r3, [r7, #31]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	4a43      	ldr	r2, [pc, #268]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d079      	beq.n	80040a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b0c      	cmp	r3, #12
 8003fb0:	d056      	beq.n	8004060 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d13b      	bne.n	8004032 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b3d      	ldr	r3, [pc, #244]	; (80040b0 <HAL_RCC_OscConfig+0x65c>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fc2e 	bl	8002820 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe fc2a 	bl	8002820 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e063      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fda:	4b34      	ldr	r3, [pc, #208]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe6:	4b31      	ldr	r3, [pc, #196]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	4319      	orrs	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	492b      	ldr	r1, [pc, #172]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8004000:	4313      	orrs	r3, r2
 8004002:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004004:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <HAL_RCC_OscConfig+0x65c>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400a:	f7fe fc09 	bl	8002820 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004012:	f7fe fc05 	bl	8002820 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e03e      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x5be>
 8004030:	e036      	b.n	80040a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004032:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <HAL_RCC_OscConfig+0x65c>)
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fe fbf2 	bl	8002820 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004040:	f7fe fbee 	bl	8002820 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b02      	cmp	r3, #2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e027      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004052:	4b16      	ldr	r3, [pc, #88]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f0      	bne.n	8004040 <HAL_RCC_OscConfig+0x5ec>
 800405e:	e01f      	b.n	80040a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e01a      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_RCC_OscConfig+0x658>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	429a      	cmp	r2, r3
 800407e:	d10d      	bne.n	800409c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d106      	bne.n	800409c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40023800 	.word	0x40023800
 80040b0:	42470060 	.word	0x42470060

080040b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e11a      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d919      	bls.n	800410a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x34>
 80040dc:	4b8a      	ldr	r3, [pc, #552]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a89      	ldr	r2, [pc, #548]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b87      	ldr	r3, [pc, #540]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 0201 	bic.w	r2, r3, #1
 80040f0:	4985      	ldr	r1, [pc, #532]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f8:	4b83      	ldr	r3, [pc, #524]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d001      	beq.n	800410a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0f9      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d008      	beq.n	8004128 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004116:	4b7d      	ldr	r3, [pc, #500]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	497a      	ldr	r1, [pc, #488]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004124:	4313      	orrs	r3, r2
 8004126:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 808e 	beq.w	8004252 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800413e:	4b73      	ldr	r3, [pc, #460]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d121      	bne.n	800418e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e0d7      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004156:	4b6d      	ldr	r3, [pc, #436]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e0cb      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800416e:	4b67      	ldr	r3, [pc, #412]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e0bf      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800417e:	4b63      	ldr	r3, [pc, #396]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0b7      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418e:	4b5f      	ldr	r3, [pc, #380]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f023 0203 	bic.w	r2, r3, #3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	495c      	ldr	r1, [pc, #368]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 800419c:	4313      	orrs	r3, r2
 800419e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a0:	f7fe fb3e 	bl	8002820 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d112      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fe fb36 	bl	8002820 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e09b      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80041c6:	4b51      	ldr	r3, [pc, #324]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xfc>
 80041d2:	e03e      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d112      	bne.n	8004202 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041dc:	e00a      	b.n	80041f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041de:	f7fe fb1f 	bl	8002820 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e084      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f4:	4b45      	ldr	r3, [pc, #276]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b0c      	cmp	r3, #12
 80041fe:	d1ee      	bne.n	80041de <HAL_RCC_ClockConfig+0x12a>
 8004200:	e027      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d11d      	bne.n	8004246 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800420a:	e00a      	b.n	8004222 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800420c:	f7fe fb08 	bl	8002820 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	f241 3288 	movw	r2, #5000	; 0x1388
 800421a:	4293      	cmp	r3, r2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e06d      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d1ee      	bne.n	800420c <HAL_RCC_ClockConfig+0x158>
 800422e:	e010      	b.n	8004252 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004230:	f7fe faf6 	bl	8002820 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	f241 3288 	movw	r2, #5000	; 0x1388
 800423e:	4293      	cmp	r3, r2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e05b      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1ee      	bne.n	8004230 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d219      	bcs.n	8004294 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <HAL_RCC_ClockConfig+0x1be>
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a27      	ldr	r2, [pc, #156]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0201 	bic.w	r2, r3, #1
 800427a:	4923      	ldr	r1, [pc, #140]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCC_ClockConfig+0x254>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e034      	b.n	80042fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4917      	ldr	r1, [pc, #92]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0308 	and.w	r3, r3, #8
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	490f      	ldr	r1, [pc, #60]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d2:	f000 f823 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4b0c      	ldr	r3, [pc, #48]	; (800430c <HAL_RCC_ClockConfig+0x258>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	490b      	ldr	r1, [pc, #44]	; (8004310 <HAL_RCC_ClockConfig+0x25c>)
 80042e4:	5ccb      	ldrb	r3, [r1, r3]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x260>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCC_ClockConfig+0x264>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fe fa48 	bl	8002788 <HAL_InitTick>
 80042f8:	4603      	mov	r3, r0
 80042fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80042fc:	7afb      	ldrb	r3, [r7, #11]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00
 800430c:	40023800 	.word	0x40023800
 8004310:	08006908 	.word	0x08006908
 8004314:	20000000 	.word	0x20000000
 8004318:	20000004 	.word	0x20000004

0800431c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b5b0      	push	{r4, r5, r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004322:	4b4d      	ldr	r3, [pc, #308]	; (8004458 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d00c      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x30>
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d87c      	bhi.n	8004430 <HAL_RCC_GetSysClockFreq+0x114>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d002      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x24>
 800433a:	2b08      	cmp	r3, #8
 800433c:	d003      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x2a>
 800433e:	e077      	b.n	8004430 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b46      	ldr	r3, [pc, #280]	; (800445c <HAL_RCC_GetSysClockFreq+0x140>)
 8004342:	613b      	str	r3, [r7, #16]
      break;
 8004344:	e082      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004346:	4b46      	ldr	r3, [pc, #280]	; (8004460 <HAL_RCC_GetSysClockFreq+0x144>)
 8004348:	613b      	str	r3, [r7, #16]
      break;
 800434a:	e07f      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	0c9b      	lsrs	r3, r3, #18
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	4a43      	ldr	r2, [pc, #268]	; (8004464 <HAL_RCC_GetSysClockFreq+0x148>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	0d9b      	lsrs	r3, r3, #22
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	3301      	adds	r3, #1
 8004364:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004366:	4b3c      	ldr	r3, [pc, #240]	; (8004458 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d01a      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	461a      	mov	r2, r3
 8004376:	f04f 0300 	mov.w	r3, #0
 800437a:	4939      	ldr	r1, [pc, #228]	; (8004460 <HAL_RCC_GetSysClockFreq+0x144>)
 800437c:	fb01 f003 	mul.w	r0, r1, r3
 8004380:	2100      	movs	r1, #0
 8004382:	fb01 f102 	mul.w	r1, r1, r2
 8004386:	1844      	adds	r4, r0, r1
 8004388:	4935      	ldr	r1, [pc, #212]	; (8004460 <HAL_RCC_GetSysClockFreq+0x144>)
 800438a:	fba2 0101 	umull	r0, r1, r2, r1
 800438e:	1863      	adds	r3, r4, r1
 8004390:	4619      	mov	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	461a      	mov	r2, r3
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	f7fc fe2b 	bl	8000ff4 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4613      	mov	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e040      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	461c      	mov	r4, r3
 80043ac:	f04f 0500 	mov.w	r5, #0
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	014b      	lsls	r3, r1, #5
 80043be:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043c2:	0142      	lsls	r2, r0, #5
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	1b00      	subs	r0, r0, r4
 80043ca:	eb61 0105 	sbc.w	r1, r1, r5
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	018b      	lsls	r3, r1, #6
 80043d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043dc:	0182      	lsls	r2, r0, #6
 80043de:	1a12      	subs	r2, r2, r0
 80043e0:	eb63 0301 	sbc.w	r3, r3, r1
 80043e4:	f04f 0000 	mov.w	r0, #0
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	00d9      	lsls	r1, r3, #3
 80043ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f2:	00d0      	lsls	r0, r2, #3
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	1912      	adds	r2, r2, r4
 80043fa:	eb45 0303 	adc.w	r3, r5, r3
 80043fe:	f04f 0000 	mov.w	r0, #0
 8004402:	f04f 0100 	mov.w	r1, #0
 8004406:	0299      	lsls	r1, r3, #10
 8004408:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800440c:	0290      	lsls	r0, r2, #10
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	461a      	mov	r2, r3
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	f7fc fde9 	bl	8000ff4 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4613      	mov	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	613b      	str	r3, [r7, #16]
      break;
 800442e:	e00d      	b.n	800444c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	0b5b      	lsrs	r3, r3, #13
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3301      	adds	r3, #1
 8004440:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	613b      	str	r3, [r7, #16]
      break;
 800444a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800444c:	693b      	ldr	r3, [r7, #16]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bdb0      	pop	{r4, r5, r7, pc}
 8004456:	bf00      	nop
 8004458:	40023800 	.word	0x40023800
 800445c:	00f42400 	.word	0x00f42400
 8004460:	016e3600 	.word	0x016e3600
 8004464:	080068fc 	.word	0x080068fc

08004468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <HAL_RCC_GetHCLKFreq+0x10>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	20000000 	.word	0x20000000

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004480:	f7ff fff2 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40023800 	.word	0x40023800
 80044a0:	08006918 	.word	0x08006918

080044a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044a8:	f7ff ffde 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044ac:	4602      	mov	r2, r0
 80044ae:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	0adb      	lsrs	r3, r3, #11
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	4903      	ldr	r1, [pc, #12]	; (80044c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ba:	5ccb      	ldrb	r3, [r1, r3]
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40023800 	.word	0x40023800
 80044c8:	08006918 	.word	0x08006918

080044cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d12c      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e4:	4b26      	ldr	r3, [pc, #152]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80044f0:	4b24      	ldr	r3, [pc, #144]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80044f8:	617b      	str	r3, [r7, #20]
 80044fa:	e016      	b.n	800452a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	6253      	str	r3, [r2, #36]	; 0x24
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800451c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004530:	d105      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004538:	d101      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800453a:	2301      	movs	r3, #1
 800453c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d105      	bne.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004544:	4b10      	ldr	r3, [pc, #64]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f023 0201 	bic.w	r2, r3, #1
 8004558:	490b      	ldr	r1, [pc, #44]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	429a      	cmp	r2, r3
 800456c:	d001      	beq.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000
 8004588:	40023c00 	.word	0x40023c00

0800458c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e031      	b.n	8004602 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd feb2 	bl	800231c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 fbf6 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d001      	beq.n	8004624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e03a      	b.n	800469a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0201 	orr.w	r2, r2, #1
 800463a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004644:	d00e      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x58>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <HAL_TIM_Base_Start_IT+0x98>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x58>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_TIM_Base_Start_IT+0x58>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a13      	ldr	r2, [pc, #76]	; (80046ac <HAL_TIM_Base_Start_IT+0xa0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d111      	bne.n	8004688 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b06      	cmp	r3, #6
 8004674:	d010      	beq.n	8004698 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004686:	e007      	b.n	8004698 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40010800 	.word	0x40010800

080046b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 0201 	bic.w	r2, r2, #1
 80046c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_Base_Stop_IT+0x38>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e031      	b.n	8004772 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f829 	bl	800477a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 fb3e 	bl	8004dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	bc80      	pop	{r7}
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x24>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e022      	b.n	80047f6 <HAL_TIM_PWM_Start+0x6a>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b04      	cmp	r3, #4
 80047b4:	d109      	bne.n	80047ca <HAL_TIM_PWM_Start+0x3e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e015      	b.n	80047f6 <HAL_TIM_PWM_Start+0x6a>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x58>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e008      	b.n	80047f6 <HAL_TIM_PWM_Start+0x6a>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e051      	b.n	80048a2 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0x82>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800480c:	e013      	b.n	8004836 <HAL_TIM_PWM_Start+0xaa>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0x92>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800481c:	e00b      	b.n	8004836 <HAL_TIM_PWM_Start+0xaa>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800482c:	e003      	b.n	8004836 <HAL_TIM_PWM_Start+0xaa>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	6839      	ldr	r1, [r7, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fca9 	bl	8005196 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d00e      	beq.n	800486c <HAL_TIM_PWM_Start+0xe0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a16      	ldr	r2, [pc, #88]	; (80048ac <HAL_TIM_PWM_Start+0x120>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_TIM_PWM_Start+0xe0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <HAL_TIM_PWM_Start+0x124>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d004      	beq.n	800486c <HAL_TIM_PWM_Start+0xe0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <HAL_TIM_PWM_Start+0x128>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d111      	bne.n	8004890 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b06      	cmp	r3, #6
 800487c:	d010      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	e007      	b.n	80048a0 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40000400 	.word	0x40000400
 80048b0:	40000800 	.word	0x40000800
 80048b4:	40010800 	.word	0x40010800

080048b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d122      	bne.n	8004914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d11b      	bne.n	8004914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0202 	mvn.w	r2, #2
 80048e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa43 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004900:	e005      	b.n	800490e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa36 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa45 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	f003 0304 	and.w	r3, r3, #4
 800491e:	2b04      	cmp	r3, #4
 8004920:	d122      	bne.n	8004968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b04      	cmp	r3, #4
 800492e:	d11b      	bne.n	8004968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0204 	mvn.w	r2, #4
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2202      	movs	r2, #2
 800493e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fa19 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa0c 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 fa1b 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b08      	cmp	r3, #8
 8004974:	d122      	bne.n	80049bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b08      	cmp	r3, #8
 8004982:	d11b      	bne.n	80049bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0208 	mvn.w	r2, #8
 800498c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2204      	movs	r2, #4
 8004992:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f9ef 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 80049a8:	e005      	b.n	80049b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f9e2 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f9f1 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0310 	and.w	r3, r3, #16
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d122      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d11b      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0210 	mvn.w	r2, #16
 80049e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2208      	movs	r2, #8
 80049e6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9c5 	bl	8004d86 <HAL_TIM_IC_CaptureCallback>
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9b8 	bl	8004d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9c7 	bl	8004d98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10e      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d107      	bne.n	8004a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0201 	mvn.w	r2, #1
 8004a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7fd fcfc 	bl	8002434 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d10e      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a54:	2b40      	cmp	r3, #64	; 0x40
 8004a56:	d107      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f9a1 	bl	8004daa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e0ac      	b.n	8004be4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	f200 809f 	bhi.w	8004bd8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ad5 	.word	0x08004ad5
 8004aa4:	08004bd9 	.word	0x08004bd9
 8004aa8:	08004bd9 	.word	0x08004bd9
 8004aac:	08004bd9 	.word	0x08004bd9
 8004ab0:	08004b15 	.word	0x08004b15
 8004ab4:	08004bd9 	.word	0x08004bd9
 8004ab8:	08004bd9 	.word	0x08004bd9
 8004abc:	08004bd9 	.word	0x08004bd9
 8004ac0:	08004b57 	.word	0x08004b57
 8004ac4:	08004bd9 	.word	0x08004bd9
 8004ac8:	08004bd9 	.word	0x08004bd9
 8004acc:	08004bd9 	.word	0x08004bd9
 8004ad0:	08004b97 	.word	0x08004b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 f9d0 	bl	8004e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699a      	ldr	r2, [r3, #24]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0208 	orr.w	r2, r2, #8
 8004aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f022 0204 	bic.w	r2, r2, #4
 8004afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6999      	ldr	r1, [r3, #24]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	619a      	str	r2, [r3, #24]
      break;
 8004b12:	e062      	b.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f9ec 	bl	8004ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	619a      	str	r2, [r3, #24]
      break;
 8004b54:	e041      	b.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fa09 	bl	8004f74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0208 	orr.w	r2, r2, #8
 8004b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69da      	ldr	r2, [r3, #28]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f022 0204 	bic.w	r2, r2, #4
 8004b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69d9      	ldr	r1, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	61da      	str	r2, [r3, #28]
      break;
 8004b94:	e021      	b.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa26 	bl	8004fee <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	021a      	lsls	r2, r3, #8
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	61da      	str	r2, [r3, #28]
      break;
 8004bd6:	e000      	b.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004bd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x18>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0b3      	b.n	8004d6c <HAL_TIM_ConfigClockSource+0x180>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0xd0>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4a:	f000 8085 	beq.w	8004d58 <HAL_TIM_ConfigClockSource+0x16c>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c54:	2b70      	cmp	r3, #112	; 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xa2>
 8004c58:	2b70      	cmp	r3, #112	; 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c5c:	2b60      	cmp	r3, #96	; 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x116>
 8004c60:	2b60      	cmp	r3, #96	; 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c64:	2b50      	cmp	r3, #80	; 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xf6>
 8004c68:	2b50      	cmp	r3, #80	; 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x136>
 8004c70:	2b40      	cmp	r3, #64	; 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x156>
 8004c78:	2b30      	cmp	r3, #48	; 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x156>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x156>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f000 fa5b 	bl	8005158 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cb0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04e      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f000 fa44 	bl	8005158 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03b      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 f9bb 	bl	800506a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	; 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fa12 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02b      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 f9d9 	bl	80050c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	; 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fa02 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01b      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 f99b 	bl	800506a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	; 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 f9f2 	bl	8005124 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00b      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 f9e9 	bl	8005124 <TIM_ITRx_SetConfig>
        break;
 8004d52:	e002      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d54:	bf00      	nop
 8004d56:	e000      	b.n	8004d5a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bc80      	pop	{r7}
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr

08004dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd2:	d007      	beq.n	8004de4 <TIM_Base_SetConfig+0x28>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a25      	ldr	r2, [pc, #148]	; (8004e6c <TIM_Base_SetConfig+0xb0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0x28>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a24      	ldr	r2, [pc, #144]	; (8004e70 <TIM_Base_SetConfig+0xb4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0x6a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	; (8004e6c <TIM_Base_SetConfig+0xb0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0x6a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <TIM_Base_SetConfig+0xb4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x6a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a18      	ldr	r2, [pc, #96]	; (8004e74 <TIM_Base_SetConfig+0xb8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x6a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <TIM_Base_SetConfig+0xbc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x6a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <TIM_Base_SetConfig+0xc0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	615a      	str	r2, [r3, #20]
}
 8004e62:	bf00      	nop
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40010800 	.word	0x40010800
 8004e78:	40010c00 	.word	0x40010c00
 8004e7c:	40011000 	.word	0x40011000

08004e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0201 	bic.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0302 	bic.w	r3, r3, #2
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f023 0210 	bic.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0320 	bic.w	r3, r3, #32
 8004f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr

08004f74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	621a      	str	r2, [r3, #32]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc80      	pop	{r7}
 8004fec:	4770      	bx	lr

08004fee <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b087      	sub	sp, #28
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005024:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	031b      	lsls	r3, r3, #12
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	621a      	str	r2, [r3, #32]
}
 8005060:	bf00      	nop
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	bc80      	pop	{r7}
 8005068:	4770      	bx	lr

0800506a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f023 0201 	bic.w	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f023 030a 	bic.w	r3, r3, #10
 80050a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b087      	sub	sp, #28
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	60f8      	str	r0, [r7, #12]
 80050ce:	60b9      	str	r1, [r7, #8]
 80050d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	f023 0210 	bic.w	r2, r3, #16
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	031b      	lsls	r3, r3, #12
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005102:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	f043 0307 	orr.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	609a      	str	r2, [r3, #8]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	021a      	lsls	r2, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	431a      	orrs	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4313      	orrs	r3, r2
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	609a      	str	r2, [r3, #8]
}
 800518c:	bf00      	nop
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr

08005196 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005196:	b480      	push	{r7}
 8005198:	b087      	sub	sp, #28
 800519a:	af00      	add	r7, sp, #0
 800519c:	60f8      	str	r0, [r7, #12]
 800519e:	60b9      	str	r1, [r7, #8]
 80051a0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f003 031f 	and.w	r3, r3, #31
 80051a8:	2201      	movs	r2, #1
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	43db      	mvns	r3, r3
 80051b8:	401a      	ands	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1a      	ldr	r2, [r3, #32]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	f003 031f 	and.w	r3, r3, #31
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	431a      	orrs	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e046      	b.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d00e      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d009      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10c      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4313      	orrs	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	40010800 	.word	0x40010800

0800529c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e03f      	b.n	800532e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fd f940 	bl	8002548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2224      	movs	r2, #36	; 0x24
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fc85 	bl	8005bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b08a      	sub	sp, #40	; 0x28
 800533a:	af02      	add	r7, sp, #8
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	603b      	str	r3, [r7, #0]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b20      	cmp	r3, #32
 8005354:	d17c      	bne.n	8005450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_UART_Transmit+0x2c>
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e075      	b.n	8005452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_UART_Transmit+0x3e>
 8005370:	2302      	movs	r3, #2
 8005372:	e06e      	b.n	8005452 <HAL_UART_Transmit+0x11c>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2221      	movs	r2, #33	; 0x21
 8005386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800538a:	f7fd fa49 	bl	8002820 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d108      	bne.n	80053b8 <HAL_UART_Transmit+0x82>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e003      	b.n	80053c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80053c8:	e02a      	b.n	8005420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2200      	movs	r2, #0
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fa38 	bl	800584a <UART_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e036      	b.n	8005452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	3302      	adds	r3, #2
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e007      	b.n	8005412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	781a      	ldrb	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3301      	adds	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005424:	b29b      	uxth	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1cf      	bne.n	80053ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2200      	movs	r2, #0
 8005432:	2140      	movs	r1, #64	; 0x40
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fa08 	bl	800584a <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e006      	b.n	8005452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	4613      	mov	r3, r2
 8005466:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b20      	cmp	r3, #32
 8005472:	d11d      	bne.n	80054b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <HAL_UART_Receive_IT+0x26>
 800547a:	88fb      	ldrh	r3, [r7, #6]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e016      	b.n	80054b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_UART_Receive_IT+0x38>
 800548e:	2302      	movs	r3, #2
 8005490:	e00f      	b.n	80054b2 <HAL_UART_Receive_IT+0x58>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80054a0:	88fb      	ldrh	r3, [r7, #6]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fa19 	bl	80058de <UART_Start_Receive_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	e000      	b.n	80054b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
  }
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10d      	bne.n	800550e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <HAL_UART_IRQHandler+0x52>
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fac9 	bl	8005a9e <UART_Receive_IT>
      return;
 800550c:	e17b      	b.n	8005806 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80b1 	beq.w	8005678 <HAL_UART_IRQHandler+0x1bc>
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <HAL_UART_IRQHandler+0x70>
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80a6 	beq.w	8005678 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_UART_IRQHandler+0x90>
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	f043 0201 	orr.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_UART_IRQHandler+0xb0>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	f043 0202 	orr.w	r2, r3, #2
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_UART_IRQHandler+0xd0>
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f043 0204 	orr.w	r2, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00f      	beq.n	80055b6 <HAL_UART_IRQHandler+0xfa>
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f003 0320 	and.w	r3, r3, #32
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <HAL_UART_IRQHandler+0xee>
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ae:	f043 0208 	orr.w	r2, r3, #8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 811e 	beq.w	80057fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_UART_IRQHandler+0x11e>
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fa62 	bl	8005a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f003 0308 	and.w	r3, r3, #8
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d102      	bne.n	8005602 <HAL_UART_IRQHandler+0x146>
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d031      	beq.n	8005666 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f9a4 	bl	8005950 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d123      	bne.n	800565e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005624:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	d013      	beq.n	8005656 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	4a76      	ldr	r2, [pc, #472]	; (800580c <HAL_UART_IRQHandler+0x350>)
 8005634:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd ff0b 	bl	8003456 <HAL_DMA_Abort_IT>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d016      	beq.n	8005674 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	e00e      	b.n	8005674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f8e3 	bl	8005822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e00a      	b.n	8005674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f8df 	bl	8005822 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e006      	b.n	8005674 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8db 	bl	8005822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005672:	e0c3      	b.n	80057fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005674:	bf00      	nop
    return;
 8005676:	e0c1      	b.n	80057fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	2b01      	cmp	r3, #1
 800567e:	f040 80a1 	bne.w	80057c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 809b 	beq.w	80057c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8095 	beq.w	80057c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d14e      	bne.n	800575c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80056c8:	8a3b      	ldrh	r3, [r7, #16]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f000 8098 	beq.w	8005800 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056d4:	8a3a      	ldrh	r2, [r7, #16]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f080 8092 	bcs.w	8005800 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8a3a      	ldrh	r2, [r7, #16]
 80056e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d02b      	beq.n	8005744 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 0201 	bic.w	r2, r2, #1
 800570a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68da      	ldr	r2, [r3, #12]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0210 	bic.w	r2, r2, #16
 8005738:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd fe4c 	bl	80033dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f86d 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800575a:	e051      	b.n	8005800 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005764:	b29b      	uxth	r3, r3
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576e:	b29b      	uxth	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d047      	beq.n	8005804 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005774:	8a7b      	ldrh	r3, [r7, #18]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d044      	beq.n	8005804 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005788:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0210 	bic.w	r2, r2, #16
 80057b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057b8:	8a7b      	ldrh	r3, [r7, #18]
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f839 	bl	8005834 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057c2:	e01f      	b.n	8005804 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d008      	beq.n	80057e0 <HAL_UART_IRQHandler+0x324>
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f8f9 	bl	80059d0 <UART_Transmit_IT>
    return;
 80057de:	e012      	b.n	8005806 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <HAL_UART_IRQHandler+0x34a>
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f93a 	bl	8005a6e <UART_EndTransmit_IT>
    return;
 80057fa:	e004      	b.n	8005806 <HAL_UART_IRQHandler+0x34a>
    return;
 80057fc:	bf00      	nop
 80057fe:	e002      	b.n	8005806 <HAL_UART_IRQHandler+0x34a>
      return;
 8005800:	bf00      	nop
 8005802:	e000      	b.n	8005806 <HAL_UART_IRQHandler+0x34a>
      return;
 8005804:	bf00      	nop
  }
}
 8005806:	3728      	adds	r7, #40	; 0x28
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	080059a9 	.word	0x080059a9

08005810 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b084      	sub	sp, #16
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4613      	mov	r3, r2
 8005858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585a:	e02c      	b.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d028      	beq.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <UART_WaitOnFlagUntilTimeout+0x30>
 800586a:	f7fc ffd9 	bl	8002820 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	429a      	cmp	r2, r3
 8005878:	d21d      	bcs.n	80058b6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005888:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695a      	ldr	r2, [r3, #20]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e00f      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d0c3      	beq.n	800585c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058de:	b480      	push	{r7}
 80058e0:	b085      	sub	sp, #20
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	4613      	mov	r3, r2
 80058ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	88fa      	ldrh	r2, [r7, #6]
 80058fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2222      	movs	r2, #34	; 0x22
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005922:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695a      	ldr	r2, [r3, #20]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0220 	orr.w	r2, r2, #32
 8005942:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005966:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	2b01      	cmp	r3, #1
 800597e:	d107      	bne.n	8005990 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0210 	bic.w	r2, r2, #16
 800598e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f7ff ff2d 	bl	8005822 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c8:	bf00      	nop
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b21      	cmp	r3, #33	; 0x21
 80059e2:	d13e      	bne.n	8005a62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ec:	d114      	bne.n	8005a18 <UART_Transmit_IT+0x48>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d110      	bne.n	8005a18 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	881b      	ldrh	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	621a      	str	r2, [r3, #32]
 8005a16:	e008      	b.n	8005a2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6211      	str	r1, [r2, #32]
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	4619      	mov	r1, r3
 8005a38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10f      	bne.n	8005a5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff febe 	bl	8005810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b22      	cmp	r3, #34	; 0x22
 8005ab0:	f040 8099 	bne.w	8005be6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005abc:	d117      	bne.n	8005aee <UART_Receive_IT+0x50>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d113      	bne.n	8005aee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	1c9a      	adds	r2, r3, #2
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
 8005aec:	e026      	b.n	8005b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b00:	d007      	beq.n	8005b12 <UART_Receive_IT+0x74>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <UART_Receive_IT+0x82>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e008      	b.n	8005b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d148      	bne.n	8005be2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0220 	bic.w	r2, r2, #32
 8005b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d123      	bne.n	8005bd8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0210 	bic.w	r2, r2, #16
 8005ba4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d10a      	bne.n	8005bca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fe2f 	bl	8005834 <HAL_UARTEx_RxEventCallback>
 8005bd6:	e002      	b.n	8005bde <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fc fd85 	bl	80026e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e002      	b.n	8005be8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005be6:	2302      	movs	r3, #2
  }
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c30:	f023 030c 	bic.w	r3, r3, #12
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a55      	ldr	r2, [pc, #340]	; (8005db0 <UART_SetConfig+0x1c0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d103      	bne.n	8005c66 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c5e:	f7fe fc21 	bl	80044a4 <HAL_RCC_GetPCLK2Freq>
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	e002      	b.n	8005c6c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c66:	f7fe fc09 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005c6a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c74:	d14c      	bne.n	8005d10 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009a      	lsls	r2, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8c:	4a49      	ldr	r2, [pc, #292]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	095b      	lsrs	r3, r3, #5
 8005c94:	0119      	lsls	r1, r3, #4
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009a      	lsls	r2, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cac:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005cae:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	2064      	movs	r0, #100	; 0x64
 8005cb6:	fb00 f303 	mul.w	r3, r0, r3
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	3332      	adds	r3, #50	; 0x32
 8005cc0:	4a3c      	ldr	r2, [pc, #240]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cce:	4419      	add	r1, r3
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009a      	lsls	r2, r3, #2
 8005cda:	441a      	add	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce6:	4b33      	ldr	r3, [pc, #204]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005ce8:	fba3 0302 	umull	r0, r3, r3, r2
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	2064      	movs	r0, #100	; 0x64
 8005cf0:	fb00 f303 	mul.w	r3, r0, r3
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	3332      	adds	r3, #50	; 0x32
 8005cfa:	4a2e      	ldr	r2, [pc, #184]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f003 0207 	and.w	r2, r3, #7
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d0e:	e04a      	b.n	8005da6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009a      	lsls	r2, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d26:	4a23      	ldr	r2, [pc, #140]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	0119      	lsls	r1, r3, #4
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4613      	mov	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	009a      	lsls	r2, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d46:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005d48:	fba3 0302 	umull	r0, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	2064      	movs	r0, #100	; 0x64
 8005d50:	fb00 f303 	mul.w	r3, r0, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	3332      	adds	r3, #50	; 0x32
 8005d5a:	4a16      	ldr	r2, [pc, #88]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d66:	4419      	add	r1, r3
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009a      	lsls	r2, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005d80:	fba3 0302 	umull	r0, r3, r3, r2
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	2064      	movs	r0, #100	; 0x64
 8005d88:	fb00 f303 	mul.w	r3, r0, r3
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	3332      	adds	r3, #50	; 0x32
 8005d92:	4a08      	ldr	r2, [pc, #32]	; (8005db4 <UART_SetConfig+0x1c4>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f003 020f 	and.w	r2, r3, #15
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	440a      	add	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40013800 	.word	0x40013800
 8005db4:	51eb851f 	.word	0x51eb851f

08005db8 <__errno>:
 8005db8:	4b01      	ldr	r3, [pc, #4]	; (8005dc0 <__errno+0x8>)
 8005dba:	6818      	ldr	r0, [r3, #0]
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	2000000c 	.word	0x2000000c

08005dc4 <__libc_init_array>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	2600      	movs	r6, #0
 8005dc8:	4d0c      	ldr	r5, [pc, #48]	; (8005dfc <__libc_init_array+0x38>)
 8005dca:	4c0d      	ldr	r4, [pc, #52]	; (8005e00 <__libc_init_array+0x3c>)
 8005dcc:	1b64      	subs	r4, r4, r5
 8005dce:	10a4      	asrs	r4, r4, #2
 8005dd0:	42a6      	cmp	r6, r4
 8005dd2:	d109      	bne.n	8005de8 <__libc_init_array+0x24>
 8005dd4:	f000 fc5c 	bl	8006690 <_init>
 8005dd8:	2600      	movs	r6, #0
 8005dda:	4d0a      	ldr	r5, [pc, #40]	; (8005e04 <__libc_init_array+0x40>)
 8005ddc:	4c0a      	ldr	r4, [pc, #40]	; (8005e08 <__libc_init_array+0x44>)
 8005dde:	1b64      	subs	r4, r4, r5
 8005de0:	10a4      	asrs	r4, r4, #2
 8005de2:	42a6      	cmp	r6, r4
 8005de4:	d105      	bne.n	8005df2 <__libc_init_array+0x2e>
 8005de6:	bd70      	pop	{r4, r5, r6, pc}
 8005de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dec:	4798      	blx	r3
 8005dee:	3601      	adds	r6, #1
 8005df0:	e7ee      	b.n	8005dd0 <__libc_init_array+0xc>
 8005df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005df6:	4798      	blx	r3
 8005df8:	3601      	adds	r6, #1
 8005dfa:	e7f2      	b.n	8005de2 <__libc_init_array+0x1e>
 8005dfc:	0800695c 	.word	0x0800695c
 8005e00:	0800695c 	.word	0x0800695c
 8005e04:	0800695c 	.word	0x0800695c
 8005e08:	08006960 	.word	0x08006960

08005e0c <memset>:
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	4402      	add	r2, r0
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d100      	bne.n	8005e16 <memset+0xa>
 8005e14:	4770      	bx	lr
 8005e16:	f803 1b01 	strb.w	r1, [r3], #1
 8005e1a:	e7f9      	b.n	8005e10 <memset+0x4>

08005e1c <siprintf>:
 8005e1c:	b40e      	push	{r1, r2, r3}
 8005e1e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e22:	b500      	push	{lr}
 8005e24:	b09c      	sub	sp, #112	; 0x70
 8005e26:	ab1d      	add	r3, sp, #116	; 0x74
 8005e28:	9002      	str	r0, [sp, #8]
 8005e2a:	9006      	str	r0, [sp, #24]
 8005e2c:	9107      	str	r1, [sp, #28]
 8005e2e:	9104      	str	r1, [sp, #16]
 8005e30:	4808      	ldr	r0, [pc, #32]	; (8005e54 <siprintf+0x38>)
 8005e32:	4909      	ldr	r1, [pc, #36]	; (8005e58 <siprintf+0x3c>)
 8005e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e38:	9105      	str	r1, [sp, #20]
 8005e3a:	6800      	ldr	r0, [r0, #0]
 8005e3c:	a902      	add	r1, sp, #8
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	f000 f868 	bl	8005f14 <_svfiprintf_r>
 8005e44:	2200      	movs	r2, #0
 8005e46:	9b02      	ldr	r3, [sp, #8]
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	b01c      	add	sp, #112	; 0x70
 8005e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e50:	b003      	add	sp, #12
 8005e52:	4770      	bx	lr
 8005e54:	2000000c 	.word	0x2000000c
 8005e58:	ffff0208 	.word	0xffff0208

08005e5c <__ssputs_r>:
 8005e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e60:	688e      	ldr	r6, [r1, #8]
 8005e62:	4682      	mov	sl, r0
 8005e64:	429e      	cmp	r6, r3
 8005e66:	460c      	mov	r4, r1
 8005e68:	4690      	mov	r8, r2
 8005e6a:	461f      	mov	r7, r3
 8005e6c:	d838      	bhi.n	8005ee0 <__ssputs_r+0x84>
 8005e6e:	898a      	ldrh	r2, [r1, #12]
 8005e70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e74:	d032      	beq.n	8005edc <__ssputs_r+0x80>
 8005e76:	6825      	ldr	r5, [r4, #0]
 8005e78:	6909      	ldr	r1, [r1, #16]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	eba5 0901 	sub.w	r9, r5, r1
 8005e80:	6965      	ldr	r5, [r4, #20]
 8005e82:	444b      	add	r3, r9
 8005e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e8c:	106d      	asrs	r5, r5, #1
 8005e8e:	429d      	cmp	r5, r3
 8005e90:	bf38      	it	cc
 8005e92:	461d      	movcc	r5, r3
 8005e94:	0553      	lsls	r3, r2, #21
 8005e96:	d531      	bpl.n	8005efc <__ssputs_r+0xa0>
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f000 fb53 	bl	8006544 <_malloc_r>
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	b950      	cbnz	r0, 8005eb8 <__ssputs_r+0x5c>
 8005ea2:	230c      	movs	r3, #12
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	f8ca 3000 	str.w	r3, [sl]
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb8:	464a      	mov	r2, r9
 8005eba:	6921      	ldr	r1, [r4, #16]
 8005ebc:	f000 face 	bl	800645c <memcpy>
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	6126      	str	r6, [r4, #16]
 8005ece:	444e      	add	r6, r9
 8005ed0:	6026      	str	r6, [r4, #0]
 8005ed2:	463e      	mov	r6, r7
 8005ed4:	6165      	str	r5, [r4, #20]
 8005ed6:	eba5 0509 	sub.w	r5, r5, r9
 8005eda:	60a5      	str	r5, [r4, #8]
 8005edc:	42be      	cmp	r6, r7
 8005ede:	d900      	bls.n	8005ee2 <__ssputs_r+0x86>
 8005ee0:	463e      	mov	r6, r7
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4641      	mov	r1, r8
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	f000 fac6 	bl	8006478 <memmove>
 8005eec:	68a3      	ldr	r3, [r4, #8]
 8005eee:	6822      	ldr	r2, [r4, #0]
 8005ef0:	1b9b      	subs	r3, r3, r6
 8005ef2:	4432      	add	r2, r6
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	e7db      	b.n	8005eb4 <__ssputs_r+0x58>
 8005efc:	462a      	mov	r2, r5
 8005efe:	f000 fb7b 	bl	80065f8 <_realloc_r>
 8005f02:	4606      	mov	r6, r0
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d1e1      	bne.n	8005ecc <__ssputs_r+0x70>
 8005f08:	4650      	mov	r0, sl
 8005f0a:	6921      	ldr	r1, [r4, #16]
 8005f0c:	f000 face 	bl	80064ac <_free_r>
 8005f10:	e7c7      	b.n	8005ea2 <__ssputs_r+0x46>
	...

08005f14 <_svfiprintf_r>:
 8005f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f18:	4698      	mov	r8, r3
 8005f1a:	898b      	ldrh	r3, [r1, #12]
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	061b      	lsls	r3, r3, #24
 8005f20:	460d      	mov	r5, r1
 8005f22:	4614      	mov	r4, r2
 8005f24:	b09d      	sub	sp, #116	; 0x74
 8005f26:	d50e      	bpl.n	8005f46 <_svfiprintf_r+0x32>
 8005f28:	690b      	ldr	r3, [r1, #16]
 8005f2a:	b963      	cbnz	r3, 8005f46 <_svfiprintf_r+0x32>
 8005f2c:	2140      	movs	r1, #64	; 0x40
 8005f2e:	f000 fb09 	bl	8006544 <_malloc_r>
 8005f32:	6028      	str	r0, [r5, #0]
 8005f34:	6128      	str	r0, [r5, #16]
 8005f36:	b920      	cbnz	r0, 8005f42 <_svfiprintf_r+0x2e>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	e0d1      	b.n	80060e6 <_svfiprintf_r+0x1d2>
 8005f42:	2340      	movs	r3, #64	; 0x40
 8005f44:	616b      	str	r3, [r5, #20]
 8005f46:	2300      	movs	r3, #0
 8005f48:	9309      	str	r3, [sp, #36]	; 0x24
 8005f4a:	2320      	movs	r3, #32
 8005f4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f50:	2330      	movs	r3, #48	; 0x30
 8005f52:	f04f 0901 	mov.w	r9, #1
 8005f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006100 <_svfiprintf_r+0x1ec>
 8005f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f62:	4623      	mov	r3, r4
 8005f64:	469a      	mov	sl, r3
 8005f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f6a:	b10a      	cbz	r2, 8005f70 <_svfiprintf_r+0x5c>
 8005f6c:	2a25      	cmp	r2, #37	; 0x25
 8005f6e:	d1f9      	bne.n	8005f64 <_svfiprintf_r+0x50>
 8005f70:	ebba 0b04 	subs.w	fp, sl, r4
 8005f74:	d00b      	beq.n	8005f8e <_svfiprintf_r+0x7a>
 8005f76:	465b      	mov	r3, fp
 8005f78:	4622      	mov	r2, r4
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	4638      	mov	r0, r7
 8005f7e:	f7ff ff6d 	bl	8005e5c <__ssputs_r>
 8005f82:	3001      	adds	r0, #1
 8005f84:	f000 80aa 	beq.w	80060dc <_svfiprintf_r+0x1c8>
 8005f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f8a:	445a      	add	r2, fp
 8005f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80a2 	beq.w	80060dc <_svfiprintf_r+0x1c8>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fa2:	f10a 0a01 	add.w	sl, sl, #1
 8005fa6:	9304      	str	r3, [sp, #16]
 8005fa8:	9307      	str	r3, [sp, #28]
 8005faa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fae:	931a      	str	r3, [sp, #104]	; 0x68
 8005fb0:	4654      	mov	r4, sl
 8005fb2:	2205      	movs	r2, #5
 8005fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb8:	4851      	ldr	r0, [pc, #324]	; (8006100 <_svfiprintf_r+0x1ec>)
 8005fba:	f000 fa41 	bl	8006440 <memchr>
 8005fbe:	9a04      	ldr	r2, [sp, #16]
 8005fc0:	b9d8      	cbnz	r0, 8005ffa <_svfiprintf_r+0xe6>
 8005fc2:	06d0      	lsls	r0, r2, #27
 8005fc4:	bf44      	itt	mi
 8005fc6:	2320      	movmi	r3, #32
 8005fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fcc:	0711      	lsls	r1, r2, #28
 8005fce:	bf44      	itt	mi
 8005fd0:	232b      	movmi	r3, #43	; 0x2b
 8005fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fda:	2b2a      	cmp	r3, #42	; 0x2a
 8005fdc:	d015      	beq.n	800600a <_svfiprintf_r+0xf6>
 8005fde:	4654      	mov	r4, sl
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f04f 0c0a 	mov.w	ip, #10
 8005fe6:	9a07      	ldr	r2, [sp, #28]
 8005fe8:	4621      	mov	r1, r4
 8005fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fee:	3b30      	subs	r3, #48	; 0x30
 8005ff0:	2b09      	cmp	r3, #9
 8005ff2:	d94e      	bls.n	8006092 <_svfiprintf_r+0x17e>
 8005ff4:	b1b0      	cbz	r0, 8006024 <_svfiprintf_r+0x110>
 8005ff6:	9207      	str	r2, [sp, #28]
 8005ff8:	e014      	b.n	8006024 <_svfiprintf_r+0x110>
 8005ffa:	eba0 0308 	sub.w	r3, r0, r8
 8005ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8006002:	4313      	orrs	r3, r2
 8006004:	46a2      	mov	sl, r4
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	e7d2      	b.n	8005fb0 <_svfiprintf_r+0x9c>
 800600a:	9b03      	ldr	r3, [sp, #12]
 800600c:	1d19      	adds	r1, r3, #4
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	9103      	str	r1, [sp, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	bfbb      	ittet	lt
 8006016:	425b      	neglt	r3, r3
 8006018:	f042 0202 	orrlt.w	r2, r2, #2
 800601c:	9307      	strge	r3, [sp, #28]
 800601e:	9307      	strlt	r3, [sp, #28]
 8006020:	bfb8      	it	lt
 8006022:	9204      	strlt	r2, [sp, #16]
 8006024:	7823      	ldrb	r3, [r4, #0]
 8006026:	2b2e      	cmp	r3, #46	; 0x2e
 8006028:	d10c      	bne.n	8006044 <_svfiprintf_r+0x130>
 800602a:	7863      	ldrb	r3, [r4, #1]
 800602c:	2b2a      	cmp	r3, #42	; 0x2a
 800602e:	d135      	bne.n	800609c <_svfiprintf_r+0x188>
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	3402      	adds	r4, #2
 8006034:	1d1a      	adds	r2, r3, #4
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	9203      	str	r2, [sp, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	bfb8      	it	lt
 800603e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006110 <_svfiprintf_r+0x1fc>
 8006048:	2203      	movs	r2, #3
 800604a:	4650      	mov	r0, sl
 800604c:	7821      	ldrb	r1, [r4, #0]
 800604e:	f000 f9f7 	bl	8006440 <memchr>
 8006052:	b140      	cbz	r0, 8006066 <_svfiprintf_r+0x152>
 8006054:	2340      	movs	r3, #64	; 0x40
 8006056:	eba0 000a 	sub.w	r0, r0, sl
 800605a:	fa03 f000 	lsl.w	r0, r3, r0
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	3401      	adds	r4, #1
 8006062:	4303      	orrs	r3, r0
 8006064:	9304      	str	r3, [sp, #16]
 8006066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606a:	2206      	movs	r2, #6
 800606c:	4825      	ldr	r0, [pc, #148]	; (8006104 <_svfiprintf_r+0x1f0>)
 800606e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006072:	f000 f9e5 	bl	8006440 <memchr>
 8006076:	2800      	cmp	r0, #0
 8006078:	d038      	beq.n	80060ec <_svfiprintf_r+0x1d8>
 800607a:	4b23      	ldr	r3, [pc, #140]	; (8006108 <_svfiprintf_r+0x1f4>)
 800607c:	bb1b      	cbnz	r3, 80060c6 <_svfiprintf_r+0x1b2>
 800607e:	9b03      	ldr	r3, [sp, #12]
 8006080:	3307      	adds	r3, #7
 8006082:	f023 0307 	bic.w	r3, r3, #7
 8006086:	3308      	adds	r3, #8
 8006088:	9303      	str	r3, [sp, #12]
 800608a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800608c:	4433      	add	r3, r6
 800608e:	9309      	str	r3, [sp, #36]	; 0x24
 8006090:	e767      	b.n	8005f62 <_svfiprintf_r+0x4e>
 8006092:	460c      	mov	r4, r1
 8006094:	2001      	movs	r0, #1
 8006096:	fb0c 3202 	mla	r2, ip, r2, r3
 800609a:	e7a5      	b.n	8005fe8 <_svfiprintf_r+0xd4>
 800609c:	2300      	movs	r3, #0
 800609e:	f04f 0c0a 	mov.w	ip, #10
 80060a2:	4619      	mov	r1, r3
 80060a4:	3401      	adds	r4, #1
 80060a6:	9305      	str	r3, [sp, #20]
 80060a8:	4620      	mov	r0, r4
 80060aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060ae:	3a30      	subs	r2, #48	; 0x30
 80060b0:	2a09      	cmp	r2, #9
 80060b2:	d903      	bls.n	80060bc <_svfiprintf_r+0x1a8>
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0c5      	beq.n	8006044 <_svfiprintf_r+0x130>
 80060b8:	9105      	str	r1, [sp, #20]
 80060ba:	e7c3      	b.n	8006044 <_svfiprintf_r+0x130>
 80060bc:	4604      	mov	r4, r0
 80060be:	2301      	movs	r3, #1
 80060c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c4:	e7f0      	b.n	80060a8 <_svfiprintf_r+0x194>
 80060c6:	ab03      	add	r3, sp, #12
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	462a      	mov	r2, r5
 80060cc:	4638      	mov	r0, r7
 80060ce:	4b0f      	ldr	r3, [pc, #60]	; (800610c <_svfiprintf_r+0x1f8>)
 80060d0:	a904      	add	r1, sp, #16
 80060d2:	f3af 8000 	nop.w
 80060d6:	1c42      	adds	r2, r0, #1
 80060d8:	4606      	mov	r6, r0
 80060da:	d1d6      	bne.n	800608a <_svfiprintf_r+0x176>
 80060dc:	89ab      	ldrh	r3, [r5, #12]
 80060de:	065b      	lsls	r3, r3, #25
 80060e0:	f53f af2c 	bmi.w	8005f3c <_svfiprintf_r+0x28>
 80060e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060e6:	b01d      	add	sp, #116	; 0x74
 80060e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	ab03      	add	r3, sp, #12
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	462a      	mov	r2, r5
 80060f2:	4638      	mov	r0, r7
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <_svfiprintf_r+0x1f8>)
 80060f6:	a904      	add	r1, sp, #16
 80060f8:	f000 f87c 	bl	80061f4 <_printf_i>
 80060fc:	e7eb      	b.n	80060d6 <_svfiprintf_r+0x1c2>
 80060fe:	bf00      	nop
 8006100:	08006920 	.word	0x08006920
 8006104:	0800692a 	.word	0x0800692a
 8006108:	00000000 	.word	0x00000000
 800610c:	08005e5d 	.word	0x08005e5d
 8006110:	08006926 	.word	0x08006926

08006114 <_printf_common>:
 8006114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006118:	4616      	mov	r6, r2
 800611a:	4699      	mov	r9, r3
 800611c:	688a      	ldr	r2, [r1, #8]
 800611e:	690b      	ldr	r3, [r1, #16]
 8006120:	4607      	mov	r7, r0
 8006122:	4293      	cmp	r3, r2
 8006124:	bfb8      	it	lt
 8006126:	4613      	movlt	r3, r2
 8006128:	6033      	str	r3, [r6, #0]
 800612a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800612e:	460c      	mov	r4, r1
 8006130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006134:	b10a      	cbz	r2, 800613a <_printf_common+0x26>
 8006136:	3301      	adds	r3, #1
 8006138:	6033      	str	r3, [r6, #0]
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	0699      	lsls	r1, r3, #26
 800613e:	bf42      	ittt	mi
 8006140:	6833      	ldrmi	r3, [r6, #0]
 8006142:	3302      	addmi	r3, #2
 8006144:	6033      	strmi	r3, [r6, #0]
 8006146:	6825      	ldr	r5, [r4, #0]
 8006148:	f015 0506 	ands.w	r5, r5, #6
 800614c:	d106      	bne.n	800615c <_printf_common+0x48>
 800614e:	f104 0a19 	add.w	sl, r4, #25
 8006152:	68e3      	ldr	r3, [r4, #12]
 8006154:	6832      	ldr	r2, [r6, #0]
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	42ab      	cmp	r3, r5
 800615a:	dc28      	bgt.n	80061ae <_printf_common+0x9a>
 800615c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006160:	1e13      	subs	r3, r2, #0
 8006162:	6822      	ldr	r2, [r4, #0]
 8006164:	bf18      	it	ne
 8006166:	2301      	movne	r3, #1
 8006168:	0692      	lsls	r2, r2, #26
 800616a:	d42d      	bmi.n	80061c8 <_printf_common+0xb4>
 800616c:	4649      	mov	r1, r9
 800616e:	4638      	mov	r0, r7
 8006170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006174:	47c0      	blx	r8
 8006176:	3001      	adds	r0, #1
 8006178:	d020      	beq.n	80061bc <_printf_common+0xa8>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	68e5      	ldr	r5, [r4, #12]
 800617e:	f003 0306 	and.w	r3, r3, #6
 8006182:	2b04      	cmp	r3, #4
 8006184:	bf18      	it	ne
 8006186:	2500      	movne	r5, #0
 8006188:	6832      	ldr	r2, [r6, #0]
 800618a:	f04f 0600 	mov.w	r6, #0
 800618e:	68a3      	ldr	r3, [r4, #8]
 8006190:	bf08      	it	eq
 8006192:	1aad      	subeq	r5, r5, r2
 8006194:	6922      	ldr	r2, [r4, #16]
 8006196:	bf08      	it	eq
 8006198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800619c:	4293      	cmp	r3, r2
 800619e:	bfc4      	itt	gt
 80061a0:	1a9b      	subgt	r3, r3, r2
 80061a2:	18ed      	addgt	r5, r5, r3
 80061a4:	341a      	adds	r4, #26
 80061a6:	42b5      	cmp	r5, r6
 80061a8:	d11a      	bne.n	80061e0 <_printf_common+0xcc>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e008      	b.n	80061c0 <_printf_common+0xac>
 80061ae:	2301      	movs	r3, #1
 80061b0:	4652      	mov	r2, sl
 80061b2:	4649      	mov	r1, r9
 80061b4:	4638      	mov	r0, r7
 80061b6:	47c0      	blx	r8
 80061b8:	3001      	adds	r0, #1
 80061ba:	d103      	bne.n	80061c4 <_printf_common+0xb0>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c4:	3501      	adds	r5, #1
 80061c6:	e7c4      	b.n	8006152 <_printf_common+0x3e>
 80061c8:	2030      	movs	r0, #48	; 0x30
 80061ca:	18e1      	adds	r1, r4, r3
 80061cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061d6:	4422      	add	r2, r4
 80061d8:	3302      	adds	r3, #2
 80061da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061de:	e7c5      	b.n	800616c <_printf_common+0x58>
 80061e0:	2301      	movs	r3, #1
 80061e2:	4622      	mov	r2, r4
 80061e4:	4649      	mov	r1, r9
 80061e6:	4638      	mov	r0, r7
 80061e8:	47c0      	blx	r8
 80061ea:	3001      	adds	r0, #1
 80061ec:	d0e6      	beq.n	80061bc <_printf_common+0xa8>
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7d9      	b.n	80061a6 <_printf_common+0x92>
	...

080061f4 <_printf_i>:
 80061f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	460c      	mov	r4, r1
 80061fa:	7e27      	ldrb	r7, [r4, #24]
 80061fc:	4691      	mov	r9, r2
 80061fe:	2f78      	cmp	r7, #120	; 0x78
 8006200:	4680      	mov	r8, r0
 8006202:	469a      	mov	sl, r3
 8006204:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006206:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800620a:	d807      	bhi.n	800621c <_printf_i+0x28>
 800620c:	2f62      	cmp	r7, #98	; 0x62
 800620e:	d80a      	bhi.n	8006226 <_printf_i+0x32>
 8006210:	2f00      	cmp	r7, #0
 8006212:	f000 80d9 	beq.w	80063c8 <_printf_i+0x1d4>
 8006216:	2f58      	cmp	r7, #88	; 0x58
 8006218:	f000 80a4 	beq.w	8006364 <_printf_i+0x170>
 800621c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006224:	e03a      	b.n	800629c <_printf_i+0xa8>
 8006226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800622a:	2b15      	cmp	r3, #21
 800622c:	d8f6      	bhi.n	800621c <_printf_i+0x28>
 800622e:	a001      	add	r0, pc, #4	; (adr r0, 8006234 <_printf_i+0x40>)
 8006230:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006234:	0800628d 	.word	0x0800628d
 8006238:	080062a1 	.word	0x080062a1
 800623c:	0800621d 	.word	0x0800621d
 8006240:	0800621d 	.word	0x0800621d
 8006244:	0800621d 	.word	0x0800621d
 8006248:	0800621d 	.word	0x0800621d
 800624c:	080062a1 	.word	0x080062a1
 8006250:	0800621d 	.word	0x0800621d
 8006254:	0800621d 	.word	0x0800621d
 8006258:	0800621d 	.word	0x0800621d
 800625c:	0800621d 	.word	0x0800621d
 8006260:	080063af 	.word	0x080063af
 8006264:	080062d1 	.word	0x080062d1
 8006268:	08006391 	.word	0x08006391
 800626c:	0800621d 	.word	0x0800621d
 8006270:	0800621d 	.word	0x0800621d
 8006274:	080063d1 	.word	0x080063d1
 8006278:	0800621d 	.word	0x0800621d
 800627c:	080062d1 	.word	0x080062d1
 8006280:	0800621d 	.word	0x0800621d
 8006284:	0800621d 	.word	0x0800621d
 8006288:	08006399 	.word	0x08006399
 800628c:	680b      	ldr	r3, [r1, #0]
 800628e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	600a      	str	r2, [r1, #0]
 8006298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800629c:	2301      	movs	r3, #1
 800629e:	e0a4      	b.n	80063ea <_printf_i+0x1f6>
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	6808      	ldr	r0, [r1, #0]
 80062a4:	062e      	lsls	r6, r5, #24
 80062a6:	f100 0304 	add.w	r3, r0, #4
 80062aa:	d50a      	bpl.n	80062c2 <_printf_i+0xce>
 80062ac:	6805      	ldr	r5, [r0, #0]
 80062ae:	600b      	str	r3, [r1, #0]
 80062b0:	2d00      	cmp	r5, #0
 80062b2:	da03      	bge.n	80062bc <_printf_i+0xc8>
 80062b4:	232d      	movs	r3, #45	; 0x2d
 80062b6:	426d      	negs	r5, r5
 80062b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062bc:	230a      	movs	r3, #10
 80062be:	485e      	ldr	r0, [pc, #376]	; (8006438 <_printf_i+0x244>)
 80062c0:	e019      	b.n	80062f6 <_printf_i+0x102>
 80062c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062c6:	6805      	ldr	r5, [r0, #0]
 80062c8:	600b      	str	r3, [r1, #0]
 80062ca:	bf18      	it	ne
 80062cc:	b22d      	sxthne	r5, r5
 80062ce:	e7ef      	b.n	80062b0 <_printf_i+0xbc>
 80062d0:	680b      	ldr	r3, [r1, #0]
 80062d2:	6825      	ldr	r5, [r4, #0]
 80062d4:	1d18      	adds	r0, r3, #4
 80062d6:	6008      	str	r0, [r1, #0]
 80062d8:	0628      	lsls	r0, r5, #24
 80062da:	d501      	bpl.n	80062e0 <_printf_i+0xec>
 80062dc:	681d      	ldr	r5, [r3, #0]
 80062de:	e002      	b.n	80062e6 <_printf_i+0xf2>
 80062e0:	0669      	lsls	r1, r5, #25
 80062e2:	d5fb      	bpl.n	80062dc <_printf_i+0xe8>
 80062e4:	881d      	ldrh	r5, [r3, #0]
 80062e6:	2f6f      	cmp	r7, #111	; 0x6f
 80062e8:	bf0c      	ite	eq
 80062ea:	2308      	moveq	r3, #8
 80062ec:	230a      	movne	r3, #10
 80062ee:	4852      	ldr	r0, [pc, #328]	; (8006438 <_printf_i+0x244>)
 80062f0:	2100      	movs	r1, #0
 80062f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062f6:	6866      	ldr	r6, [r4, #4]
 80062f8:	2e00      	cmp	r6, #0
 80062fa:	bfa8      	it	ge
 80062fc:	6821      	ldrge	r1, [r4, #0]
 80062fe:	60a6      	str	r6, [r4, #8]
 8006300:	bfa4      	itt	ge
 8006302:	f021 0104 	bicge.w	r1, r1, #4
 8006306:	6021      	strge	r1, [r4, #0]
 8006308:	b90d      	cbnz	r5, 800630e <_printf_i+0x11a>
 800630a:	2e00      	cmp	r6, #0
 800630c:	d04d      	beq.n	80063aa <_printf_i+0x1b6>
 800630e:	4616      	mov	r6, r2
 8006310:	fbb5 f1f3 	udiv	r1, r5, r3
 8006314:	fb03 5711 	mls	r7, r3, r1, r5
 8006318:	5dc7      	ldrb	r7, [r0, r7]
 800631a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800631e:	462f      	mov	r7, r5
 8006320:	42bb      	cmp	r3, r7
 8006322:	460d      	mov	r5, r1
 8006324:	d9f4      	bls.n	8006310 <_printf_i+0x11c>
 8006326:	2b08      	cmp	r3, #8
 8006328:	d10b      	bne.n	8006342 <_printf_i+0x14e>
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	07df      	lsls	r7, r3, #31
 800632e:	d508      	bpl.n	8006342 <_printf_i+0x14e>
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	6861      	ldr	r1, [r4, #4]
 8006334:	4299      	cmp	r1, r3
 8006336:	bfde      	ittt	le
 8006338:	2330      	movle	r3, #48	; 0x30
 800633a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800633e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006342:	1b92      	subs	r2, r2, r6
 8006344:	6122      	str	r2, [r4, #16]
 8006346:	464b      	mov	r3, r9
 8006348:	4621      	mov	r1, r4
 800634a:	4640      	mov	r0, r8
 800634c:	f8cd a000 	str.w	sl, [sp]
 8006350:	aa03      	add	r2, sp, #12
 8006352:	f7ff fedf 	bl	8006114 <_printf_common>
 8006356:	3001      	adds	r0, #1
 8006358:	d14c      	bne.n	80063f4 <_printf_i+0x200>
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	b004      	add	sp, #16
 8006360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006364:	4834      	ldr	r0, [pc, #208]	; (8006438 <_printf_i+0x244>)
 8006366:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800636a:	680e      	ldr	r6, [r1, #0]
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006372:	061f      	lsls	r7, r3, #24
 8006374:	600e      	str	r6, [r1, #0]
 8006376:	d514      	bpl.n	80063a2 <_printf_i+0x1ae>
 8006378:	07d9      	lsls	r1, r3, #31
 800637a:	bf44      	itt	mi
 800637c:	f043 0320 	orrmi.w	r3, r3, #32
 8006380:	6023      	strmi	r3, [r4, #0]
 8006382:	b91d      	cbnz	r5, 800638c <_printf_i+0x198>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	f023 0320 	bic.w	r3, r3, #32
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	2310      	movs	r3, #16
 800638e:	e7af      	b.n	80062f0 <_printf_i+0xfc>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	f043 0320 	orr.w	r3, r3, #32
 8006396:	6023      	str	r3, [r4, #0]
 8006398:	2378      	movs	r3, #120	; 0x78
 800639a:	4828      	ldr	r0, [pc, #160]	; (800643c <_printf_i+0x248>)
 800639c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063a0:	e7e3      	b.n	800636a <_printf_i+0x176>
 80063a2:	065e      	lsls	r6, r3, #25
 80063a4:	bf48      	it	mi
 80063a6:	b2ad      	uxthmi	r5, r5
 80063a8:	e7e6      	b.n	8006378 <_printf_i+0x184>
 80063aa:	4616      	mov	r6, r2
 80063ac:	e7bb      	b.n	8006326 <_printf_i+0x132>
 80063ae:	680b      	ldr	r3, [r1, #0]
 80063b0:	6826      	ldr	r6, [r4, #0]
 80063b2:	1d1d      	adds	r5, r3, #4
 80063b4:	6960      	ldr	r0, [r4, #20]
 80063b6:	600d      	str	r5, [r1, #0]
 80063b8:	0635      	lsls	r5, r6, #24
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	d501      	bpl.n	80063c2 <_printf_i+0x1ce>
 80063be:	6018      	str	r0, [r3, #0]
 80063c0:	e002      	b.n	80063c8 <_printf_i+0x1d4>
 80063c2:	0671      	lsls	r1, r6, #25
 80063c4:	d5fb      	bpl.n	80063be <_printf_i+0x1ca>
 80063c6:	8018      	strh	r0, [r3, #0]
 80063c8:	2300      	movs	r3, #0
 80063ca:	4616      	mov	r6, r2
 80063cc:	6123      	str	r3, [r4, #16]
 80063ce:	e7ba      	b.n	8006346 <_printf_i+0x152>
 80063d0:	680b      	ldr	r3, [r1, #0]
 80063d2:	1d1a      	adds	r2, r3, #4
 80063d4:	600a      	str	r2, [r1, #0]
 80063d6:	681e      	ldr	r6, [r3, #0]
 80063d8:	2100      	movs	r1, #0
 80063da:	4630      	mov	r0, r6
 80063dc:	6862      	ldr	r2, [r4, #4]
 80063de:	f000 f82f 	bl	8006440 <memchr>
 80063e2:	b108      	cbz	r0, 80063e8 <_printf_i+0x1f4>
 80063e4:	1b80      	subs	r0, r0, r6
 80063e6:	6060      	str	r0, [r4, #4]
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	6123      	str	r3, [r4, #16]
 80063ec:	2300      	movs	r3, #0
 80063ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063f2:	e7a8      	b.n	8006346 <_printf_i+0x152>
 80063f4:	4632      	mov	r2, r6
 80063f6:	4649      	mov	r1, r9
 80063f8:	4640      	mov	r0, r8
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	47d0      	blx	sl
 80063fe:	3001      	adds	r0, #1
 8006400:	d0ab      	beq.n	800635a <_printf_i+0x166>
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	079b      	lsls	r3, r3, #30
 8006406:	d413      	bmi.n	8006430 <_printf_i+0x23c>
 8006408:	68e0      	ldr	r0, [r4, #12]
 800640a:	9b03      	ldr	r3, [sp, #12]
 800640c:	4298      	cmp	r0, r3
 800640e:	bfb8      	it	lt
 8006410:	4618      	movlt	r0, r3
 8006412:	e7a4      	b.n	800635e <_printf_i+0x16a>
 8006414:	2301      	movs	r3, #1
 8006416:	4632      	mov	r2, r6
 8006418:	4649      	mov	r1, r9
 800641a:	4640      	mov	r0, r8
 800641c:	47d0      	blx	sl
 800641e:	3001      	adds	r0, #1
 8006420:	d09b      	beq.n	800635a <_printf_i+0x166>
 8006422:	3501      	adds	r5, #1
 8006424:	68e3      	ldr	r3, [r4, #12]
 8006426:	9903      	ldr	r1, [sp, #12]
 8006428:	1a5b      	subs	r3, r3, r1
 800642a:	42ab      	cmp	r3, r5
 800642c:	dcf2      	bgt.n	8006414 <_printf_i+0x220>
 800642e:	e7eb      	b.n	8006408 <_printf_i+0x214>
 8006430:	2500      	movs	r5, #0
 8006432:	f104 0619 	add.w	r6, r4, #25
 8006436:	e7f5      	b.n	8006424 <_printf_i+0x230>
 8006438:	08006931 	.word	0x08006931
 800643c:	08006942 	.word	0x08006942

08006440 <memchr>:
 8006440:	4603      	mov	r3, r0
 8006442:	b510      	push	{r4, lr}
 8006444:	b2c9      	uxtb	r1, r1
 8006446:	4402      	add	r2, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	4618      	mov	r0, r3
 800644c:	d101      	bne.n	8006452 <memchr+0x12>
 800644e:	2000      	movs	r0, #0
 8006450:	e003      	b.n	800645a <memchr+0x1a>
 8006452:	7804      	ldrb	r4, [r0, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	428c      	cmp	r4, r1
 8006458:	d1f6      	bne.n	8006448 <memchr+0x8>
 800645a:	bd10      	pop	{r4, pc}

0800645c <memcpy>:
 800645c:	440a      	add	r2, r1
 800645e:	4291      	cmp	r1, r2
 8006460:	f100 33ff 	add.w	r3, r0, #4294967295
 8006464:	d100      	bne.n	8006468 <memcpy+0xc>
 8006466:	4770      	bx	lr
 8006468:	b510      	push	{r4, lr}
 800646a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800646e:	4291      	cmp	r1, r2
 8006470:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006474:	d1f9      	bne.n	800646a <memcpy+0xe>
 8006476:	bd10      	pop	{r4, pc}

08006478 <memmove>:
 8006478:	4288      	cmp	r0, r1
 800647a:	b510      	push	{r4, lr}
 800647c:	eb01 0402 	add.w	r4, r1, r2
 8006480:	d902      	bls.n	8006488 <memmove+0x10>
 8006482:	4284      	cmp	r4, r0
 8006484:	4623      	mov	r3, r4
 8006486:	d807      	bhi.n	8006498 <memmove+0x20>
 8006488:	1e43      	subs	r3, r0, #1
 800648a:	42a1      	cmp	r1, r4
 800648c:	d008      	beq.n	80064a0 <memmove+0x28>
 800648e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006492:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006496:	e7f8      	b.n	800648a <memmove+0x12>
 8006498:	4601      	mov	r1, r0
 800649a:	4402      	add	r2, r0
 800649c:	428a      	cmp	r2, r1
 800649e:	d100      	bne.n	80064a2 <memmove+0x2a>
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064aa:	e7f7      	b.n	800649c <memmove+0x24>

080064ac <_free_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4605      	mov	r5, r0
 80064b0:	2900      	cmp	r1, #0
 80064b2:	d043      	beq.n	800653c <_free_r+0x90>
 80064b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b8:	1f0c      	subs	r4, r1, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfb8      	it	lt
 80064be:	18e4      	addlt	r4, r4, r3
 80064c0:	f000 f8d0 	bl	8006664 <__malloc_lock>
 80064c4:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <_free_r+0x94>)
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	4610      	mov	r0, r2
 80064ca:	b933      	cbnz	r3, 80064da <_free_r+0x2e>
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	6014      	str	r4, [r2, #0]
 80064d0:	4628      	mov	r0, r5
 80064d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064d6:	f000 b8cb 	b.w	8006670 <__malloc_unlock>
 80064da:	42a3      	cmp	r3, r4
 80064dc:	d90a      	bls.n	80064f4 <_free_r+0x48>
 80064de:	6821      	ldr	r1, [r4, #0]
 80064e0:	1862      	adds	r2, r4, r1
 80064e2:	4293      	cmp	r3, r2
 80064e4:	bf01      	itttt	eq
 80064e6:	681a      	ldreq	r2, [r3, #0]
 80064e8:	685b      	ldreq	r3, [r3, #4]
 80064ea:	1852      	addeq	r2, r2, r1
 80064ec:	6022      	streq	r2, [r4, #0]
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	6004      	str	r4, [r0, #0]
 80064f2:	e7ed      	b.n	80064d0 <_free_r+0x24>
 80064f4:	461a      	mov	r2, r3
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	b10b      	cbz	r3, 80064fe <_free_r+0x52>
 80064fa:	42a3      	cmp	r3, r4
 80064fc:	d9fa      	bls.n	80064f4 <_free_r+0x48>
 80064fe:	6811      	ldr	r1, [r2, #0]
 8006500:	1850      	adds	r0, r2, r1
 8006502:	42a0      	cmp	r0, r4
 8006504:	d10b      	bne.n	800651e <_free_r+0x72>
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	4401      	add	r1, r0
 800650a:	1850      	adds	r0, r2, r1
 800650c:	4283      	cmp	r3, r0
 800650e:	6011      	str	r1, [r2, #0]
 8006510:	d1de      	bne.n	80064d0 <_free_r+0x24>
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	4401      	add	r1, r0
 8006518:	6011      	str	r1, [r2, #0]
 800651a:	6053      	str	r3, [r2, #4]
 800651c:	e7d8      	b.n	80064d0 <_free_r+0x24>
 800651e:	d902      	bls.n	8006526 <_free_r+0x7a>
 8006520:	230c      	movs	r3, #12
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	e7d4      	b.n	80064d0 <_free_r+0x24>
 8006526:	6820      	ldr	r0, [r4, #0]
 8006528:	1821      	adds	r1, r4, r0
 800652a:	428b      	cmp	r3, r1
 800652c:	bf01      	itttt	eq
 800652e:	6819      	ldreq	r1, [r3, #0]
 8006530:	685b      	ldreq	r3, [r3, #4]
 8006532:	1809      	addeq	r1, r1, r0
 8006534:	6021      	streq	r1, [r4, #0]
 8006536:	6063      	str	r3, [r4, #4]
 8006538:	6054      	str	r4, [r2, #4]
 800653a:	e7c9      	b.n	80064d0 <_free_r+0x24>
 800653c:	bd38      	pop	{r3, r4, r5, pc}
 800653e:	bf00      	nop
 8006540:	200000a0 	.word	0x200000a0

08006544 <_malloc_r>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	1ccd      	adds	r5, r1, #3
 8006548:	f025 0503 	bic.w	r5, r5, #3
 800654c:	3508      	adds	r5, #8
 800654e:	2d0c      	cmp	r5, #12
 8006550:	bf38      	it	cc
 8006552:	250c      	movcc	r5, #12
 8006554:	2d00      	cmp	r5, #0
 8006556:	4606      	mov	r6, r0
 8006558:	db01      	blt.n	800655e <_malloc_r+0x1a>
 800655a:	42a9      	cmp	r1, r5
 800655c:	d903      	bls.n	8006566 <_malloc_r+0x22>
 800655e:	230c      	movs	r3, #12
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	2000      	movs	r0, #0
 8006564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006566:	f000 f87d 	bl	8006664 <__malloc_lock>
 800656a:	4921      	ldr	r1, [pc, #132]	; (80065f0 <_malloc_r+0xac>)
 800656c:	680a      	ldr	r2, [r1, #0]
 800656e:	4614      	mov	r4, r2
 8006570:	b99c      	cbnz	r4, 800659a <_malloc_r+0x56>
 8006572:	4f20      	ldr	r7, [pc, #128]	; (80065f4 <_malloc_r+0xb0>)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	b923      	cbnz	r3, 8006582 <_malloc_r+0x3e>
 8006578:	4621      	mov	r1, r4
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f862 	bl	8006644 <_sbrk_r>
 8006580:	6038      	str	r0, [r7, #0]
 8006582:	4629      	mov	r1, r5
 8006584:	4630      	mov	r0, r6
 8006586:	f000 f85d 	bl	8006644 <_sbrk_r>
 800658a:	1c43      	adds	r3, r0, #1
 800658c:	d123      	bne.n	80065d6 <_malloc_r+0x92>
 800658e:	230c      	movs	r3, #12
 8006590:	4630      	mov	r0, r6
 8006592:	6033      	str	r3, [r6, #0]
 8006594:	f000 f86c 	bl	8006670 <__malloc_unlock>
 8006598:	e7e3      	b.n	8006562 <_malloc_r+0x1e>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	1b5b      	subs	r3, r3, r5
 800659e:	d417      	bmi.n	80065d0 <_malloc_r+0x8c>
 80065a0:	2b0b      	cmp	r3, #11
 80065a2:	d903      	bls.n	80065ac <_malloc_r+0x68>
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	441c      	add	r4, r3
 80065a8:	6025      	str	r5, [r4, #0]
 80065aa:	e004      	b.n	80065b6 <_malloc_r+0x72>
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	42a2      	cmp	r2, r4
 80065b0:	bf0c      	ite	eq
 80065b2:	600b      	streq	r3, [r1, #0]
 80065b4:	6053      	strne	r3, [r2, #4]
 80065b6:	4630      	mov	r0, r6
 80065b8:	f000 f85a 	bl	8006670 <__malloc_unlock>
 80065bc:	f104 000b 	add.w	r0, r4, #11
 80065c0:	1d23      	adds	r3, r4, #4
 80065c2:	f020 0007 	bic.w	r0, r0, #7
 80065c6:	1ac2      	subs	r2, r0, r3
 80065c8:	d0cc      	beq.n	8006564 <_malloc_r+0x20>
 80065ca:	1a1b      	subs	r3, r3, r0
 80065cc:	50a3      	str	r3, [r4, r2]
 80065ce:	e7c9      	b.n	8006564 <_malloc_r+0x20>
 80065d0:	4622      	mov	r2, r4
 80065d2:	6864      	ldr	r4, [r4, #4]
 80065d4:	e7cc      	b.n	8006570 <_malloc_r+0x2c>
 80065d6:	1cc4      	adds	r4, r0, #3
 80065d8:	f024 0403 	bic.w	r4, r4, #3
 80065dc:	42a0      	cmp	r0, r4
 80065de:	d0e3      	beq.n	80065a8 <_malloc_r+0x64>
 80065e0:	1a21      	subs	r1, r4, r0
 80065e2:	4630      	mov	r0, r6
 80065e4:	f000 f82e 	bl	8006644 <_sbrk_r>
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1dd      	bne.n	80065a8 <_malloc_r+0x64>
 80065ec:	e7cf      	b.n	800658e <_malloc_r+0x4a>
 80065ee:	bf00      	nop
 80065f0:	200000a0 	.word	0x200000a0
 80065f4:	200000a4 	.word	0x200000a4

080065f8 <_realloc_r>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	4607      	mov	r7, r0
 80065fc:	4614      	mov	r4, r2
 80065fe:	460e      	mov	r6, r1
 8006600:	b921      	cbnz	r1, 800660c <_realloc_r+0x14>
 8006602:	4611      	mov	r1, r2
 8006604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006608:	f7ff bf9c 	b.w	8006544 <_malloc_r>
 800660c:	b922      	cbnz	r2, 8006618 <_realloc_r+0x20>
 800660e:	f7ff ff4d 	bl	80064ac <_free_r>
 8006612:	4625      	mov	r5, r4
 8006614:	4628      	mov	r0, r5
 8006616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006618:	f000 f830 	bl	800667c <_malloc_usable_size_r>
 800661c:	42a0      	cmp	r0, r4
 800661e:	d20f      	bcs.n	8006640 <_realloc_r+0x48>
 8006620:	4621      	mov	r1, r4
 8006622:	4638      	mov	r0, r7
 8006624:	f7ff ff8e 	bl	8006544 <_malloc_r>
 8006628:	4605      	mov	r5, r0
 800662a:	2800      	cmp	r0, #0
 800662c:	d0f2      	beq.n	8006614 <_realloc_r+0x1c>
 800662e:	4631      	mov	r1, r6
 8006630:	4622      	mov	r2, r4
 8006632:	f7ff ff13 	bl	800645c <memcpy>
 8006636:	4631      	mov	r1, r6
 8006638:	4638      	mov	r0, r7
 800663a:	f7ff ff37 	bl	80064ac <_free_r>
 800663e:	e7e9      	b.n	8006614 <_realloc_r+0x1c>
 8006640:	4635      	mov	r5, r6
 8006642:	e7e7      	b.n	8006614 <_realloc_r+0x1c>

08006644 <_sbrk_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	2300      	movs	r3, #0
 8006648:	4d05      	ldr	r5, [pc, #20]	; (8006660 <_sbrk_r+0x1c>)
 800664a:	4604      	mov	r4, r0
 800664c:	4608      	mov	r0, r1
 800664e:	602b      	str	r3, [r5, #0]
 8006650:	f7fb fd32 	bl	80020b8 <_sbrk>
 8006654:	1c43      	adds	r3, r0, #1
 8006656:	d102      	bne.n	800665e <_sbrk_r+0x1a>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	b103      	cbz	r3, 800665e <_sbrk_r+0x1a>
 800665c:	6023      	str	r3, [r4, #0]
 800665e:	bd38      	pop	{r3, r4, r5, pc}
 8006660:	200002c8 	.word	0x200002c8

08006664 <__malloc_lock>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__malloc_lock+0x8>)
 8006666:	f000 b811 	b.w	800668c <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	200002d0 	.word	0x200002d0

08006670 <__malloc_unlock>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__malloc_unlock+0x8>)
 8006672:	f000 b80c 	b.w	800668e <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	200002d0 	.word	0x200002d0

0800667c <_malloc_usable_size_r>:
 800667c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006680:	1f18      	subs	r0, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	bfbc      	itt	lt
 8006686:	580b      	ldrlt	r3, [r1, r0]
 8006688:	18c0      	addlt	r0, r0, r3
 800668a:	4770      	bx	lr

0800668c <__retarget_lock_acquire_recursive>:
 800668c:	4770      	bx	lr

0800668e <__retarget_lock_release_recursive>:
 800668e:	4770      	bx	lr

08006690 <_init>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr

0800669c <_fini>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr
