
SMART-MICRO-PUMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004720  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800485c  0800485c  0001485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c8  080048c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d0  080048d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d0  080048d0  000148d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080048d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08004948  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004948  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd6e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002799  00000000  00000000  0002fe07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00033250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016354  00000000  00000000  00033de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f47f  00000000  00000000  0004a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084380  00000000  00000000  000595b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd933  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036dc  00000000  00000000  000dd988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08004844 	.word	0x08004844

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08004844 	.word	0x08004844

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b96e 	b.w	8000480 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	f040 8083 	bne.w	80002d4 <__udivmoddi4+0x118>
 80001ce:	428a      	cmp	r2, r1
 80001d0:	4617      	mov	r7, r2
 80001d2:	d947      	bls.n	8000264 <__udivmoddi4+0xa8>
 80001d4:	fab2 f382 	clz	r3, r2
 80001d8:	b14b      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001da:	f1c3 0120 	rsb	r1, r3, #32
 80001de:	fa05 fe03 	lsl.w	lr, r5, r3
 80001e2:	fa20 f101 	lsr.w	r1, r0, r1
 80001e6:	409f      	lsls	r7, r3
 80001e8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001f2:	fbbe fcf8 	udiv	ip, lr, r8
 80001f6:	fa1f f987 	uxth.w	r9, r7
 80001fa:	fb08 e21c 	mls	r2, r8, ip, lr
 80001fe:	fb0c f009 	mul.w	r0, ip, r9
 8000202:	0c21      	lsrs	r1, r4, #16
 8000204:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	18ba      	adds	r2, r7, r2
 800020e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000212:	f080 8118 	bcs.w	8000446 <__udivmoddi4+0x28a>
 8000216:	4290      	cmp	r0, r2
 8000218:	f240 8115 	bls.w	8000446 <__udivmoddi4+0x28a>
 800021c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000220:	443a      	add	r2, r7
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f8 	udiv	r0, r2, r8
 8000228:	fb08 2210 	mls	r2, r8, r0, r2
 800022c:	fb00 f109 	mul.w	r1, r0, r9
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a1      	cmp	r1, r4
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0x92>
 800023a:	193c      	adds	r4, r7, r4
 800023c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000240:	f080 8103 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000244:	42a1      	cmp	r1, r4
 8000246:	f240 8100 	bls.w	800044a <__udivmoddi4+0x28e>
 800024a:	3802      	subs	r0, #2
 800024c:	443c      	add	r4, r7
 800024e:	1a64      	subs	r4, r4, r1
 8000250:	2100      	movs	r1, #0
 8000252:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000256:	b11e      	cbz	r6, 8000260 <__udivmoddi4+0xa4>
 8000258:	2200      	movs	r2, #0
 800025a:	40dc      	lsrs	r4, r3
 800025c:	e9c6 4200 	strd	r4, r2, [r6]
 8000260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000264:	b902      	cbnz	r2, 8000268 <__udivmoddi4+0xac>
 8000266:	deff      	udf	#255	; 0xff
 8000268:	fab2 f382 	clz	r3, r2
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14f      	bne.n	8000310 <__udivmoddi4+0x154>
 8000270:	1a8d      	subs	r5, r1, r2
 8000272:	2101      	movs	r1, #1
 8000274:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000278:	fa1f f882 	uxth.w	r8, r2
 800027c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000280:	fb0e 551c 	mls	r5, lr, ip, r5
 8000284:	fb08 f00c 	mul.w	r0, r8, ip
 8000288:	0c22      	lsrs	r2, r4, #16
 800028a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800028e:	42a8      	cmp	r0, r5
 8000290:	d907      	bls.n	80002a2 <__udivmoddi4+0xe6>
 8000292:	197d      	adds	r5, r7, r5
 8000294:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000298:	d202      	bcs.n	80002a0 <__udivmoddi4+0xe4>
 800029a:	42a8      	cmp	r0, r5
 800029c:	f200 80e9 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 80002a0:	4694      	mov	ip, r2
 80002a2:	1a2d      	subs	r5, r5, r0
 80002a4:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a8:	fb0e 5510 	mls	r5, lr, r0, r5
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	b2a4      	uxth	r4, r4
 80002b2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b6:	45a0      	cmp	r8, r4
 80002b8:	d907      	bls.n	80002ca <__udivmoddi4+0x10e>
 80002ba:	193c      	adds	r4, r7, r4
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	d202      	bcs.n	80002c8 <__udivmoddi4+0x10c>
 80002c2:	45a0      	cmp	r8, r4
 80002c4:	f200 80d9 	bhi.w	800047a <__udivmoddi4+0x2be>
 80002c8:	4610      	mov	r0, r2
 80002ca:	eba4 0408 	sub.w	r4, r4, r8
 80002ce:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002d2:	e7c0      	b.n	8000256 <__udivmoddi4+0x9a>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x12e>
 80002d8:	2e00      	cmp	r6, #0
 80002da:	f000 80b1 	beq.w	8000440 <__udivmoddi4+0x284>
 80002de:	2100      	movs	r1, #0
 80002e0:	e9c6 0500 	strd	r0, r5, [r6]
 80002e4:	4608      	mov	r0, r1
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d14b      	bne.n	800038a <__udivmoddi4+0x1ce>
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0x140>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80b9 	bhi.w	800046e <__udivmoddi4+0x2b2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb65 0303 	sbc.w	r3, r5, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0aa      	beq.n	8000260 <__udivmoddi4+0xa4>
 800030a:	e9c6 4e00 	strd	r4, lr, [r6]
 800030e:	e7a7      	b.n	8000260 <__udivmoddi4+0xa4>
 8000310:	409f      	lsls	r7, r3
 8000312:	f1c3 0220 	rsb	r2, r3, #32
 8000316:	40d1      	lsrs	r1, r2
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	fa24 f202 	lsr.w	r2, r4, r2
 800032c:	409d      	lsls	r5, r3
 800032e:	fb00 fc08 	mul.w	ip, r0, r8
 8000332:	432a      	orrs	r2, r5
 8000334:	0c15      	lsrs	r5, r2, #16
 8000336:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800033a:	45ac      	cmp	ip, r5
 800033c:	fa04 f403 	lsl.w	r4, r4, r3
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0x19a>
 8000342:	197d      	adds	r5, r7, r5
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	f080 808f 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800034c:	45ac      	cmp	ip, r5
 800034e:	f240 808c 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000352:	3802      	subs	r0, #2
 8000354:	443d      	add	r5, r7
 8000356:	eba5 050c 	sub.w	r5, r5, ip
 800035a:	fbb5 f1fe 	udiv	r1, r5, lr
 800035e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000362:	fb01 f908 	mul.w	r9, r1, r8
 8000366:	b295      	uxth	r5, r2
 8000368:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036c:	45a9      	cmp	r9, r5
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x1c4>
 8000370:	197d      	adds	r5, r7, r5
 8000372:	f101 32ff 	add.w	r2, r1, #4294967295
 8000376:	d274      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000378:	45a9      	cmp	r9, r5
 800037a:	d972      	bls.n	8000462 <__udivmoddi4+0x2a6>
 800037c:	3902      	subs	r1, #2
 800037e:	443d      	add	r5, r7
 8000380:	eba5 0509 	sub.w	r5, r5, r9
 8000384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000388:	e778      	b.n	800027c <__udivmoddi4+0xc0>
 800038a:	f1c1 0720 	rsb	r7, r1, #32
 800038e:	408b      	lsls	r3, r1
 8000390:	fa22 fc07 	lsr.w	ip, r2, r7
 8000394:	ea4c 0c03 	orr.w	ip, ip, r3
 8000398:	fa25 f407 	lsr.w	r4, r5, r7
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80003a4:	fa1f f88c 	uxth.w	r8, ip
 80003a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ac:	fa20 f307 	lsr.w	r3, r0, r7
 80003b0:	fb09 fa08 	mul.w	sl, r9, r8
 80003b4:	408d      	lsls	r5, r1
 80003b6:	431d      	orrs	r5, r3
 80003b8:	0c2b      	lsrs	r3, r5, #16
 80003ba:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003be:	45a2      	cmp	sl, r4
 80003c0:	fa02 f201 	lsl.w	r2, r2, r1
 80003c4:	fa00 f301 	lsl.w	r3, r0, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x222>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d2:	d248      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d946      	bls.n	8000466 <__udivmoddi4+0x2aa>
 80003d8:	f1a9 0902 	sub.w	r9, r9, #2
 80003dc:	4464      	add	r4, ip
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003e6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003ea:	fb00 fa08 	mul.w	sl, r0, r8
 80003ee:	b2ad      	uxth	r5, r5
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x24e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000400:	d22d      	bcs.n	800045e <__udivmoddi4+0x2a2>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d92b      	bls.n	800045e <__udivmoddi4+0x2a2>
 8000406:	3802      	subs	r0, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c6      	mov	lr, r8
 800041a:	464d      	mov	r5, r9
 800041c:	d319      	bcc.n	8000452 <__udivmoddi4+0x296>
 800041e:	d016      	beq.n	800044e <__udivmoddi4+0x292>
 8000420:	b15e      	cbz	r6, 800043a <__udivmoddi4+0x27e>
 8000422:	ebb3 020e 	subs.w	r2, r3, lr
 8000426:	eb64 0405 	sbc.w	r4, r4, r5
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	fa22 f301 	lsr.w	r3, r2, r1
 8000432:	431f      	orrs	r7, r3
 8000434:	40cc      	lsrs	r4, r1
 8000436:	e9c6 7400 	strd	r7, r4, [r6]
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	4631      	mov	r1, r6
 8000442:	4630      	mov	r0, r6
 8000444:	e70c      	b.n	8000260 <__udivmoddi4+0xa4>
 8000446:	468c      	mov	ip, r1
 8000448:	e6eb      	b.n	8000222 <__udivmoddi4+0x66>
 800044a:	4610      	mov	r0, r2
 800044c:	e6ff      	b.n	800024e <__udivmoddi4+0x92>
 800044e:	4543      	cmp	r3, r8
 8000450:	d2e6      	bcs.n	8000420 <__udivmoddi4+0x264>
 8000452:	ebb8 0e02 	subs.w	lr, r8, r2
 8000456:	eb69 050c 	sbc.w	r5, r9, ip
 800045a:	3801      	subs	r0, #1
 800045c:	e7e0      	b.n	8000420 <__udivmoddi4+0x264>
 800045e:	4628      	mov	r0, r5
 8000460:	e7d3      	b.n	800040a <__udivmoddi4+0x24e>
 8000462:	4611      	mov	r1, r2
 8000464:	e78c      	b.n	8000380 <__udivmoddi4+0x1c4>
 8000466:	4681      	mov	r9, r0
 8000468:	e7b9      	b.n	80003de <__udivmoddi4+0x222>
 800046a:	4608      	mov	r0, r1
 800046c:	e773      	b.n	8000356 <__udivmoddi4+0x19a>
 800046e:	4608      	mov	r0, r1
 8000470:	e749      	b.n	8000306 <__udivmoddi4+0x14a>
 8000472:	f1ac 0c02 	sub.w	ip, ip, #2
 8000476:	443d      	add	r5, r7
 8000478:	e713      	b.n	80002a2 <__udivmoddi4+0xe6>
 800047a:	3802      	subs	r0, #2
 800047c:	443c      	add	r4, r7
 800047e:	e724      	b.n	80002ca <__udivmoddi4+0x10e>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC_Init+0xa8>)
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <MX_ADC_Init+0xac>)
 8000498:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_ADC_Init+0xa8>)
 800049c:	2200      	movs	r2, #0
 800049e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_ADC_Init+0xa8>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_ADC_Init+0xa8>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_ADC_Init+0xa8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_ADC_Init+0xa8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_ADC_Init+0xa8>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_ADC_Init+0xa8>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_ADC_Init+0xa8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <MX_ADC_Init+0xa8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <MX_ADC_Init+0xa8>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC_Init+0xa8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC_Init+0xa8>)
 80004e2:	2210      	movs	r2, #16
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <MX_ADC_Init+0xa8>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <MX_ADC_Init+0xa8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <MX_ADC_Init+0xa8>)
 80004f6:	f000 fd9d 	bl	8001034 <HAL_ADC_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000500:	f000 f9a0 	bl	8000844 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000504:	2305      	movs	r3, #5
 8000506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	4619      	mov	r1, r3
 8000514:	4805      	ldr	r0, [pc, #20]	; (800052c <MX_ADC_Init+0xa8>)
 8000516:	f000 fed3 	bl	80012c0 <HAL_ADC_ConfigChannel>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8000520:	f000 f990 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200000a0 	.word	0x200000a0
 8000530:	40012400 	.word	0x40012400

08000534 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <HAL_ADC_MspInit+0x74>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d123      	bne.n	800059e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000558:	6a1b      	ldr	r3, [r3, #32]
 800055a:	4a14      	ldr	r2, [pc, #80]	; (80005ac <HAL_ADC_MspInit+0x78>)
 800055c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000560:	6213      	str	r3, [r2, #32]
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000564:	6a1b      	ldr	r3, [r3, #32]
 8000566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a0e      	ldr	r2, [pc, #56]	; (80005ac <HAL_ADC_MspInit+0x78>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <HAL_ADC_MspInit+0x78>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = ADC_CURRENT_Pin|ADC_FLOW_Pin|ADC_TRIMPOT_Pin;
 8000586:	2338      	movs	r3, #56	; 0x38
 8000588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058a:	2303      	movs	r3, #3
 800058c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <HAL_ADC_MspInit+0x7c>)
 800059a:	f001 f96d 	bl	8001878 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40012400 	.word	0x40012400
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000

080005b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b31      	ldr	r3, [pc, #196]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a30      	ldr	r2, [pc, #192]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a2a      	ldr	r2, [pc, #168]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b28      	ldr	r3, [pc, #160]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_GPIO_Init+0xdc>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	4a24      	ldr	r2, [pc, #144]	; (8000690 <MX_GPIO_Init+0xdc>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	61d3      	str	r3, [r2, #28]
 8000606:	4b22      	ldr	r3, [pc, #136]	; (8000690 <MX_GPIO_Init+0xdc>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	481f      	ldr	r0, [pc, #124]	; (8000694 <MX_GPIO_Init+0xe0>)
 8000618:	f001 fac5 	bl	8001ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	481d      	ldr	r0, [pc, #116]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000622:	f001 fac0 	bl	8001ba6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_TEST_Pin;
 8000626:	2301      	movs	r3, #1
 8000628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OUT_TEST_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	4619      	mov	r1, r3
 800063c:	4815      	ldr	r0, [pc, #84]	; (8000694 <MX_GPIO_Init+0xe0>)
 800063e:	f001 f91b 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin;
 8000642:	2301      	movs	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000646:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_USER_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	4811      	ldr	r0, [pc, #68]	; (800069c <MX_GPIO_Init+0xe8>)
 8000658:	f001 f90e 	bl	8001878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <MX_GPIO_Init+0xe4>)
 8000674:	f001 f900 	bl	8001878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2006      	movs	r0, #6
 800067e:	f001 f846 	bl	800170e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000682:	2006      	movs	r0, #6
 8000684:	f001 f85f 	bl	8001746 <HAL_NVIC_EnableIRQ>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40020800 	.word	0x40020800
 8000698:	40020400 	.word	0x40020400
 800069c:	40020000 	.word	0x40020000

080006a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_USER_Pin)		// When edge is detected,
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d102      	bne.n	80006b6 <HAL_GPIO_EXTI_Callback+0x16>
	{									//	Timer 6 starts, for button debounce
		//HAL_GPIO_WritePin(OUT_TEST_GPIO_Port, OUT_TEST_Pin, 1);
		HAL_TIM_Base_Start_IT(&htim6);
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <HAL_GPIO_EXTI_Callback+0x20>)
 80006b2:	f002 f885 	bl	80027c0 <HAL_TIM_Base_Start_IT>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000134 	.word	0x20000134

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	enum operation_mode op_mode = mode_manual;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
	uint16_t pulse = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fc1e 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f867 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f7ff ff6b 	bl	80005b4 <MX_GPIO_Init>
  MX_ADC_Init();
 80006de:	f7ff fed1 	bl	8000484 <MX_ADC_Init>
  MX_TIM4_Init();
 80006e2:	f000 f97b 	bl	80009dc <MX_TIM4_Init>
  MX_TIM6_Init();
 80006e6:	f000 f9ed 	bl	8000ac4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80006ea:	f000 fa21 	bl	8000b30 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80006ee:	f000 fb41 	bl	8000d74 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);	// Timer 4 for PWM generation
 80006f2:	2100      	movs	r1, #0
 80006f4:	4824      	ldr	r0, [pc, #144]	; (8000788 <main+0xc4>)
 80006f6:	f002 f923 	bl	8002940 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim7);				// Timer 7 for sampling period
 80006fa:	4824      	ldr	r0, [pc, #144]	; (800078c <main+0xc8>)
 80006fc:	f002 f860 	bl	80027c0 <HAL_TIM_Base_Start_IT>

	sprintf(tx_buffer, "Smart Micro Pump\n");
 8000700:	4923      	ldr	r1, [pc, #140]	; (8000790 <main+0xcc>)
 8000702:	4824      	ldr	r0, [pc, #144]	; (8000794 <main+0xd0>)
 8000704:	f003 fc64 	bl	8003fd0 <siprintf>
	UART_TX(tx_buffer);
 8000708:	4822      	ldr	r0, [pc, #136]	; (8000794 <main+0xd0>)
 800070a:	f000 fba9 	bl	8000e60 <UART_TX>
	UART_RX(rx_buffer);
 800070e:	4822      	ldr	r0, [pc, #136]	; (8000798 <main+0xd4>)
 8000710:	f000 fbbc 	bl	8000e8c <UART_RX>
    /* USER CODE BEGIN 3 */
		//HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		//HAL_Delay(500);

		// Mode selection via user button (Manual/Auto)
		if (debouncedButtonPressed != 0)	// User button selects between
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <main+0xd8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d017      	beq.n	800074e <main+0x8a>
		{									// Manual and Auto modes
			if (op_mode == mode_manual)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d107      	bne.n	8000734 <main+0x70>
			{
				op_mode = mode_auto;
 8000724:	2301      	movs	r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	481c      	ldr	r0, [pc, #112]	; (80007a0 <main+0xdc>)
 800072e:	f001 fa3a 	bl	8001ba6 <HAL_GPIO_WritePin>
 8000732:	e009      	b.n	8000748 <main+0x84>
			}
			else if (op_mode == mode_auto)
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d106      	bne.n	8000748 <main+0x84>
			{
				op_mode = mode_manual;
 800073a:	2300      	movs	r3, #0
 800073c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	4817      	ldr	r0, [pc, #92]	; (80007a0 <main+0xdc>)
 8000744:	f001 fa2f 	bl	8001ba6 <HAL_GPIO_WritePin>
			}
			debouncedButtonPressed = 0;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <main+0xd8>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
//		if (debouncedButtonReleased != 0)	// Interrupts are also generated when
//		{									// button is released
//			debouncedButtonReleased = 0;
//		}

		if (op_mode == mode_manual)			// Manual mode:
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10f      	bne.n	8000774 <main+0xb0>
		{									// PWM duty cycle is set based on
											// trimpot value read by the ADC
			// To do

			pulse++;
 8000754:	88bb      	ldrh	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	80bb      	strh	r3, [r7, #4]
			if (pulse == 1000)
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000760:	d101      	bne.n	8000766 <main+0xa2>
			{
				pulse = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	80bb      	strh	r3, [r7, #4]
			}

			PWM_setPulse(pulse);
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f871 	bl	8000850 <PWM_setPulse>
			HAL_Delay(5);
 800076e:	2005      	movs	r0, #5
 8000770:	f000 fc3e 	bl	8000ff0 <HAL_Delay>
		else if (op_mode == mode_debug)
		{
			// To do
		}

		if (flag_dt != 0)	// Sampling time (dt) = 10ms (fS = 100 Hz)
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <main+0xe0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0ca      	beq.n	8000714 <main+0x50>

			// Update pump drive level (PWM)

			// Send data (UART)

			flag_dt = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <main+0xe0>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
		if (debouncedButtonPressed != 0)	// User button selects between
 8000784:	e7c6      	b.n	8000714 <main+0x50>
 8000786:	bf00      	nop
 8000788:	200000f4 	.word	0x200000f4
 800078c:	20000174 	.word	0x20000174
 8000790:	0800485c 	.word	0x0800485c
 8000794:	200001d4 	.word	0x200001d4
 8000798:	200001b4 	.word	0x200001b4
 800079c:	2000008f 	.word	0x2000008f
 80007a0:	40020400 	.word	0x40020400
 80007a4:	20000091 	.word	0x20000091

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b092      	sub	sp, #72	; 0x48
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2234      	movs	r2, #52	; 0x34
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f003 fc02 	bl	8003fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	463b      	mov	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <SystemClock_Config+0x98>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80007d2:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <SystemClock_Config+0x98>)
 80007d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d8:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e2:	2310      	movs	r3, #16
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e6:	2302      	movs	r3, #2
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ea:	2300      	movs	r3, #0
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80007ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80007f4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fa02 	bl	8001c08 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080a:	f000 f81b 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000822:	463b      	mov	r3, r7
 8000824:	2101      	movs	r1, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fd1e 	bl	8002268 <HAL_RCC_ClockConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000832:	f000 f807 	bl	8000844 <Error_Handler>
  }
}
 8000836:	bf00      	nop
 8000838:	3748      	adds	r7, #72	; 0x48
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40007000 	.word	0x40007000

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <PWM_setPulse>:
 *      Author: Andre
 */
#include "tim.h"

void PWM_setPulse(uint16_t per_mille)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, per_mille);
 800085a:	4b04      	ldr	r3, [pc, #16]	; (800086c <PWM_setPulse+0x1c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	88fa      	ldrh	r2, [r7, #6]
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	200000f4 	.word	0x200000f4

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_MspInit+0x58>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <HAL_MspInit+0x58>)
 800087c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000880:	6253      	str	r3, [r2, #36]	; 0x24
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <HAL_MspInit+0x58>)
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <HAL_MspInit+0x58>)
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <HAL_MspInit+0x58>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6213      	str	r3, [r2, #32]
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_MspInit+0x58>)
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x58>)
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <HAL_MspInit+0x58>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	6253      	str	r3, [r2, #36]	; 0x24
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_MspInit+0x58>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	40023800 	.word	0x40023800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000912:	f000 fb51 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}

0800091a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(OUT_TEST_Pin);
 800091e:	2001      	movs	r0, #1
 8000920:	f001 f95a 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART1_IRQHandler+0x10>)
 800092e:	f002 fe9f 	bl	8003670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200001f4 	.word	0x200001f4

0800093c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <TIM6_IRQHandler+0x10>)
 8000942:	f002 f893 	bl	8002a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000134 	.word	0x20000134

08000950 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <TIM7_IRQHandler+0x10>)
 8000956:	f002 f889 	bl	8002a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000174 	.word	0x20000174

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f003 faea 	bl	8003f6c <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20004000 	.word	0x20004000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	20000094 	.word	0x20000094
 80009cc:	20000250 	.word	0x20000250

080009d0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <MX_TIM4_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <MX_TIM4_Init+0xe4>)
 8000a0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = (32 - 1);
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a0e:	221f      	movs	r2, #31
 8000a10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = (1000 - 1);
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a1a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a2c:	4823      	ldr	r0, [pc, #140]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a2e:	f001 fe87 	bl	8002740 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000a38:	f7ff ff04 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	4619      	mov	r1, r3
 8000a48:	481c      	ldr	r0, [pc, #112]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a4a:	f002 f9a9 	bl	8002da0 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f7ff fef6 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a58:	4818      	ldr	r0, [pc, #96]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a5a:	f001 ff29 	bl	80028b0 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f7ff feee 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	4619      	mov	r1, r3
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a78:	f002 fc8c 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000a82:	f7ff fedf 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a86:	2360      	movs	r3, #96	; 0x60
 8000a88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000a9e:	f002 f8c1 	bl	8002c24 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000aa8:	f7ff fecc 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000aac:	4803      	ldr	r0, [pc, #12]	; (8000abc <MX_TIM4_Init+0xe0>)
 8000aae:	f000 f8cb 	bl	8000c48 <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000f4 	.word	0x200000f4
 8000ac0:	40000800 	.word	0x40000800

08000ac4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ad4:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <MX_TIM6_Init+0x68>)
 8000ad6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = (32 - 1);
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ada:	221f      	movs	r2, #31
 8000adc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (1000 - 1);
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000af2:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000af4:	f001 fe24 	bl	8002740 <HAL_TIM_Base_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000afe:	f7ff fea1 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	; (8000b28 <MX_TIM6_Init+0x64>)
 8000b10:	f002 fc40 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000b1a:	f7ff fe93 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000134 	.word	0x20000134
 8000b2c:	40001000 	.word	0x40001000

08000b30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b40:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_TIM7_Init+0x68>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (32 -1);
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b46:	221f      	movs	r2, #31
 8000b48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = (10000 - 1);
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b52:	f242 720f 	movw	r2, #9999	; 0x270f
 8000b56:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b60:	f001 fdee 	bl	8002740 <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000b6a:	f7ff fe6b 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_TIM7_Init+0x64>)
 8000b7c:	f002 fc0a 	bl	8003394 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000b86:	f7ff fe5d 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000174 	.word	0x20000174
 8000b98:	40001400 	.word	0x40001400

08000b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <HAL_TIM_Base_MspInit+0x9c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d10c      	bne.n	8000bc8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6253      	str	r3, [r2, #36]	; 0x24
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000bc6:	e032      	b.n	8000c2e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_TIM_Base_MspInit+0xa4>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d114      	bne.n	8000bfc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000bd8:	f043 0310 	orr.w	r3, r3, #16
 8000bdc:	6253      	str	r3, [r2, #36]	; 0x24
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	f003 0310 	and.w	r3, r3, #16
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	202b      	movs	r0, #43	; 0x2b
 8000bf0:	f000 fd8d 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000bf4:	202b      	movs	r0, #43	; 0x2b
 8000bf6:	f000 fda6 	bl	8001746 <HAL_NVIC_EnableIRQ>
}
 8000bfa:	e018      	b.n	8000c2e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_TIM_Base_MspInit+0xa8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000c0c:	f043 0320 	orr.w	r3, r3, #32
 8000c10:	6253      	str	r3, [r2, #36]	; 0x24
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <HAL_TIM_Base_MspInit+0xa0>)
 8000c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	202c      	movs	r0, #44	; 0x2c
 8000c24:	f000 fd73 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c28:	202c      	movs	r0, #44	; 0x2c
 8000c2a:	f000 fd8c 	bl	8001746 <HAL_NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40000800 	.word	0x40000800
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40001000 	.word	0x40001000
 8000c44:	40001400 	.word	0x40001400

08000c48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a11      	ldr	r2, [pc, #68]	; (8000cac <HAL_TIM_MspPostInit+0x64>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d11b      	bne.n	8000ca2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_TIM_MspPostInit+0x68>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_TIM_MspPostInit+0x68>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_TIM_MspPostInit+0x68>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = PWM_PUMP_Pin;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_PUMP_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_TIM_MspPostInit+0x6c>)
 8000c9e:	f000 fdeb 	bl	8001878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40000800 	.word	0x40000800
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)	// Timed debounce routine:
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d137      	bne.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x80>
	{					//	After first edge is detected, accumulate
						// 	DEBOUNCE_STABLE_PERIOD equal samples and
						// 	finally set PRESSED or RELEASED flag and
						//	disables this counter until next edge occurs
		previousButton = currentButton;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cd0:	701a      	strb	r2, [r3, #0]
		currentButton  = HAL_GPIO_ReadPin(BUTTON_USER_GPIO_Port, BUTTON_USER_Pin);
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4821      	ldr	r0, [pc, #132]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cd6:	f000 ff4f 	bl	8001b78 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce0:	701a      	strb	r2, [r3, #0]

		if (currentButton == previousButton)	// Increments counter if stable
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d107      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x4a>
		{
			debounceCounter++;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	e002      	b.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else									// Resets counter if bounce occurs
		{
			debounceCounter = 0;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
		}

		if (debounceCounter >= DEBOUNCE_STABLE_PERIOD)
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b09      	cmp	r3, #9
 8000d10:	d919      	bls.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{	// Debounce finished
			HAL_TIM_Base_Stop_IT(&htim6);
 8000d12:	480f      	ldr	r0, [pc, #60]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d14:	f001 fda6 	bl	8002864 <HAL_TIM_Base_Stop_IT>
			debounceCounter = 0;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]

			if (currentButton == 1)			// Active HIGH: Button Pressed == 1
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d103      	bne.n	8000d30 <HAL_TIM_PeriodElapsedCallback+0x78>
			{
				debouncedButtonPressed = 1;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
	}
	else if (htim == &htim7)	//
	{	// Sampling period (dt) has passed
		flag_dt = 1;
	}
}
 8000d2e:	e00a      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x8e>
				debouncedButtonReleased = 1;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
}
 8000d36:	e006      	b.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x8e>
	else if (htim == &htim7)	//
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d102      	bne.n	8000d46 <HAL_TIM_PeriodElapsedCallback+0x8e>
		flag_dt = 1;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000134 	.word	0x20000134
 8000d54:	2000008c 	.word	0x2000008c
 8000d58:	2000008d 	.word	0x2000008d
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	2000008e 	.word	0x2000008e
 8000d64:	2000008f 	.word	0x2000008f
 8000d68:	20000090 	.word	0x20000090
 8000d6c:	20000174 	.word	0x20000174
 8000d70:	20000091 	.word	0x20000091

08000d74 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_USART1_UART_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART1_UART_Init+0x4c>)
 8000dac:	f002 fb50 	bl	8003450 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000db6:	f7ff fd45 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001f4 	.word	0x200001f4
 8000dc4:	40013800 	.word	0x40013800

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_UART_MspInit+0x8c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d130      	bne.n	8000e4c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000dec:	6a1b      	ldr	r3, [r3, #32]
 8000dee:	4a1a      	ldr	r2, [pc, #104]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df4:	6213      	str	r3, [r2, #32]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000df8:	6a1b      	ldr	r3, [r3, #32]
 8000dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x90>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e1a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e2c:	2307      	movs	r3, #7
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x94>)
 8000e38:	f000 fd1e 	bl	8001878 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2025      	movs	r0, #37	; 0x25
 8000e42:	f000 fc64 	bl	800170e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e46:	2025      	movs	r0, #37	; 0x25
 8000e48:	f000 fc7d 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <UART_TX>:
}

/* USER CODE BEGIN 1 */

void UART_TX(char* buffer)	// UART TX facade
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff f987 	bl	800017c <strlen>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <UART_TX+0x28>)
 8000e7a:	f002 fb36 	bl	80034ea <HAL_UART_Transmit>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001f4 	.word	0x200001f4

08000e8c <UART_RX>:

void UART_RX(char* buffer)	// UART RX facade
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t *)buffer, BYTES_TO_RX);
 8000e94:	2204      	movs	r2, #4
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <UART_RX+0x1c>)
 8000e9a:	f002 fbb8 	bl	800360e <HAL_UART_Receive_IT>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001f4 	.word	0x200001f4

08000eac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	UART_RX(rx_buffer);
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <HAL_UART_RxCpltCallback+0x18>)
 8000eb6:	f7ff ffe9 	bl	8000e8c <UART_RX>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001b4 	.word	0x200001b4

08000ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eca:	490d      	ldr	r1, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee0:	4c0a      	ldr	r4, [pc, #40]	; (8000f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eee:	f7ff fd6f 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f003 f841 	bl	8003f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fbe5 	bl	80006c4 <main>
  bx lr
 8000efa:	4770      	bx	lr
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f04:	080048d8 	.word	0x080048d8
  ldr r2, =_sbss
 8000f08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f0c:	2000024c 	.word	0x2000024c

08000f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>

08000f12 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 fbeb 	bl	80016f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f80e 	bl	8000f44 <HAL_InitTick>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	e001      	b.n	8000f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f34:	f7ff fc9c 	bl	8000870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_InitTick+0x68>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d022      	beq.n	8000f9e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_InitTick+0x6c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_InitTick+0x68>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fbf8 	bl	8001762 <HAL_SYSTICK_Config>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10f      	bne.n	8000f98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	d809      	bhi.n	8000f92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
 8000f86:	f000 fbc2 	bl	800170e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_InitTick+0x70>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e007      	b.n	8000fa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	e004      	b.n	8000fa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	e001      	b.n	8000fa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000004 	.word	0x20000004

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fc8:	6013      	str	r3, [r2, #0]
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000238 	.word	0x20000238
 8000fd8:	20000008 	.word	0x20000008

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	20000238 	.word	0x20000238

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001008:	d004      	beq.n	8001014 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_Delay+0x40>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001014:	bf00      	nop
 8001016:	f7ff ffe1 	bl	8000fdc <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	429a      	cmp	r2, r3
 8001024:	d8f7      	bhi.n	8001016 <HAL_Delay+0x26>
  {
  }
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008

08001034 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e127      	b.n	80012a4 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001070:	4b8e      	ldr	r3, [pc, #568]	; (80012ac <HAL_ADC_Init+0x278>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a8d      	ldr	r2, [pc, #564]	; (80012ac <HAL_ADC_Init+0x278>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_ADC_Init+0x278>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fa53 	bl	8000534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 80ff 	bne.w	800129a <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010a4:	f023 0302 	bic.w	r3, r3, #2
 80010a8:	f043 0202 	orr.w	r2, r3, #2
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <HAL_ADC_Init+0x27c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	497c      	ldr	r1, [pc, #496]	; (80012b0 <HAL_ADC_Init+0x27c>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80010ca:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d2:	4619      	mov	r1, r3
 80010d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d8:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010da:	6a3b      	ldr	r3, [r7, #32]
 80010dc:	fa93 f3a3 	rbit	r3, r3
 80010e0:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80010ee:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001116:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800111a:	4313      	orrs	r3, r2
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001122:	2b10      	cmp	r3, #16
 8001124:	d007      	beq.n	8001136 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800112e:	4313      	orrs	r3, r2
 8001130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001132:	4313      	orrs	r3, r2
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001140:	2b40      	cmp	r3, #64	; 0x40
 8001142:	d04f      	beq.n	80011e4 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800114a:	4313      	orrs	r3, r2
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001156:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6912      	ldr	r2, [r2, #16]
 800115c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001160:	d003      	beq.n	800116a <HAL_ADC_Init+0x136>
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	6912      	ldr	r2, [r2, #16]
 8001166:	2a01      	cmp	r2, #1
 8001168:	d102      	bne.n	8001170 <HAL_ADC_Init+0x13c>
 800116a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116e:	e000      	b.n	8001172 <HAL_ADC_Init+0x13e>
 8001170:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8001172:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001176:	4313      	orrs	r3, r2
 8001178:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001180:	2b01      	cmp	r3, #1
 8001182:	d125      	bne.n	80011d0 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800118a:	2b00      	cmp	r3, #0
 800118c:	d114      	bne.n	80011b8 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	3b01      	subs	r3, #1
 8001194:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001198:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	fa92 f2a2 	rbit	r2, r2
 80011a0:	617a      	str	r2, [r7, #20]
  return result;
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	4093      	lsls	r3, r2
 80011ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011b2:	4313      	orrs	r3, r2
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
 80011b6:	e00b      	b.n	80011d0 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	f043 0220 	orr.w	r2, r3, #32
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_ADC_Init+0x280>)
 80011d8:	4013      	ands	r3, r2
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <HAL_ADC_Init+0x284>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001200:	d003      	beq.n	800120a <HAL_ADC_Init+0x1d6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d119      	bne.n	800123e <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	3b01      	subs	r3, #1
 800121a:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800121e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	fa92 f2a2 	rbit	r2, r2
 8001226:	60fa      	str	r2, [r7, #12]
  return result;
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	fab2 f282 	clz	r2, r2
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	fa03 f202 	lsl.w	r2, r3, r2
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	430a      	orrs	r2, r1
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
 800123c:	e007      	b.n	800124e <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 800124c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_ADC_Init+0x288>)
 8001256:	4013      	ands	r3, r2
 8001258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125a:	429a      	cmp	r2, r3
 800125c:	d10b      	bne.n	8001276 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	f023 0303 	bic.w	r3, r3, #3
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	64da      	str	r2, [r3, #76]	; 0x4c
 8001274:	e014      	b.n	80012a0 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f023 0312 	bic.w	r3, r3, #18
 800127e:	f043 0210 	orr.w	r2, r3, #16
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001298:	e002      	b.n	80012a0 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3738      	adds	r7, #56	; 0x38
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40012700 	.word	0x40012700
 80012b4:	fcfc16ff 	.word	0xfcfc16ff
 80012b8:	c0fff18d 	.word	0xc0fff18d
 80012bc:	bf80fffe 	.word	0xbf80fffe

080012c0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d101      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x20>
 80012dc:	2302      	movs	r3, #2
 80012de:	e134      	b.n	800154a <HAL_ADC_ConfigChannel+0x28a>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d81c      	bhi.n	800132a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	3b05      	subs	r3, #5
 8001302:	221f      	movs	r2, #31
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	4019      	ands	r1, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	3b05      	subs	r3, #5
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	641a      	str	r2, [r3, #64]	; 0x40
 8001328:	e07e      	b.n	8001428 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d81c      	bhi.n	800136c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	3b23      	subs	r3, #35	; 0x23
 8001344:	221f      	movs	r2, #31
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	4019      	ands	r1, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	3b23      	subs	r3, #35	; 0x23
 800135e:	fa00 f203 	lsl.w	r2, r0, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	430a      	orrs	r2, r1
 8001368:	63da      	str	r2, [r3, #60]	; 0x3c
 800136a:	e05d      	b.n	8001428 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b12      	cmp	r3, #18
 8001372:	d81c      	bhi.n	80013ae <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b41      	subs	r3, #65	; 0x41
 8001386:	221f      	movs	r2, #31
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	4019      	ands	r1, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b41      	subs	r3, #65	; 0x41
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	639a      	str	r2, [r3, #56]	; 0x38
 80013ac:	e03c      	b.n	8001428 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b18      	cmp	r3, #24
 80013b4:	d81c      	bhi.n	80013f0 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3b5f      	subs	r3, #95	; 0x5f
 80013c8:	221f      	movs	r2, #31
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	4019      	ands	r1, r3
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	4413      	add	r3, r2
 80013e0:	3b5f      	subs	r3, #95	; 0x5f
 80013e2:	fa00 f203 	lsl.w	r2, r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
 80013ee:	e01b      	b.n	8001428 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b7d      	subs	r3, #125	; 0x7d
 8001402:	221f      	movs	r2, #31
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	4019      	ands	r1, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	3b7d      	subs	r3, #125	; 0x7d
 800141c:	fa00 f203 	lsl.w	r2, r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b09      	cmp	r3, #9
 800142e:	d81a      	bhi.n	8001466 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6959      	ldr	r1, [r3, #20]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	2207      	movs	r2, #7
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	4019      	ands	r1, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	6898      	ldr	r0, [r3, #8]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	fa00 f203 	lsl.w	r2, r0, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	e042      	b.n	80014ec <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b13      	cmp	r3, #19
 800146c:	d81c      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6919      	ldr	r1, [r3, #16]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	3b1e      	subs	r3, #30
 8001480:	2207      	movs	r2, #7
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	4019      	ands	r1, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6898      	ldr	r0, [r3, #8]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	3b1e      	subs	r3, #30
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	611a      	str	r2, [r3, #16]
 80014a6:	e021      	b.n	80014ec <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b1a      	cmp	r3, #26
 80014ae:	d81c      	bhi.n	80014ea <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68d9      	ldr	r1, [r3, #12]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	3b3c      	subs	r3, #60	; 0x3c
 80014c2:	2207      	movs	r2, #7
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4019      	ands	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	3b3c      	subs	r3, #60	; 0x3c
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	e000      	b.n	80014ec <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80014ea:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b10      	cmp	r3, #16
 80014f2:	d003      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014f8:	2b11      	cmp	r3, #17
 80014fa:	d121      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80014fc:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_ADC_ConfigChannel+0x294>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d11b      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_ADC_ConfigChannel+0x294>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_ADC_ConfigChannel+0x294>)
 800150e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001512:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b10      	cmp	r3, #16
 800151a:	d111      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800151c:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_ADC_ConfigChannel+0x298>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_ADC_ConfigChannel+0x29c>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9a      	lsrs	r2, r3, #18
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001532:	e002      	b.n	800153a <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3b01      	subs	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f9      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40012700 	.word	0x40012700
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <__NVIC_EnableIRQ+0x34>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c4:	d301      	bcc.n	80016ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c6:	2301      	movs	r3, #1
 80016c8:	e00f      	b.n	80016ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <SysTick_Config+0x40>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d2:	210f      	movs	r1, #15
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295
 80016d8:	f7ff ff90 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <SysTick_Config+0x40>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <SysTick_Config+0x40>)
 80016e4:	2207      	movs	r2, #7
 80016e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	e000e010 	.word	0xe000e010

080016f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff2d 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001720:	f7ff ff42 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 8001724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	6978      	ldr	r0, [r7, #20]
 800172c:	f7ff ff90 	bl	8001650 <NVIC_EncodePriority>
 8001730:	4602      	mov	r2, r0
 8001732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff5f 	bl	80015fc <__NVIC_SetPriority>
}
 800173e:	bf00      	nop
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff35 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ffa2 	bl	80016b4 <SysTick_Config>
 8001770:	4603      	mov	r3, r0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d008      	beq.n	80017a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e022      	b.n	80017ea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 020e 	bic.w	r2, r2, #14
 80017b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 021c 	and.w	r2, r3, #28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2101      	movs	r1, #1
 80017d2:	fa01 f202 	lsl.w	r2, r1, r2
 80017d6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d005      	beq.n	8001818 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
 8001816:	e029      	b.n	800186c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 020e 	bic.w	r2, r2, #14
 8001826:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 021c 	and.w	r2, r3, #28
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	4798      	blx	r3
    }
  }
  return status;
 800186c:	7bfb      	ldrb	r3, [r7, #15]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800188e:	e154      	b.n	8001b3a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	2101      	movs	r1, #1
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 8146 	beq.w	8001b34 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d005      	beq.n	80018c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d130      	bne.n	8001922 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	2203      	movs	r2, #3
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80018f6:	2201      	movs	r2, #1
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 0201 	and.w	r2, r3, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b03      	cmp	r3, #3
 800192c:	d017      	beq.n	800195e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d123      	bne.n	80019b2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001976:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	220f      	movs	r2, #15
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	08da      	lsrs	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3208      	adds	r2, #8
 80019ac:	6939      	ldr	r1, [r7, #16]
 80019ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	2203      	movs	r2, #3
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0203 	and.w	r2, r3, #3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a0 	beq.w	8001b34 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_GPIO_Init+0x2e0>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a57      	ldr	r2, [pc, #348]	; (8001b58 <HAL_GPIO_Init+0x2e0>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4b55      	ldr	r3, [pc, #340]	; (8001b58 <HAL_GPIO_Init+0x2e0>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a0c:	4a53      	ldr	r2, [pc, #332]	; (8001b5c <HAL_GPIO_Init+0x2e4>)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4b      	ldr	r2, [pc, #300]	; (8001b60 <HAL_GPIO_Init+0x2e8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d019      	beq.n	8001a6c <HAL_GPIO_Init+0x1f4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_GPIO_Init+0x2ec>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d013      	beq.n	8001a68 <HAL_GPIO_Init+0x1f0>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <HAL_GPIO_Init+0x2f0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00d      	beq.n	8001a64 <HAL_GPIO_Init+0x1ec>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a48      	ldr	r2, [pc, #288]	; (8001b6c <HAL_GPIO_Init+0x2f4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d007      	beq.n	8001a60 <HAL_GPIO_Init+0x1e8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a47      	ldr	r2, [pc, #284]	; (8001b70 <HAL_GPIO_Init+0x2f8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_GPIO_Init+0x1e4>
 8001a58:	2304      	movs	r3, #4
 8001a5a:	e008      	b.n	8001a6e <HAL_GPIO_Init+0x1f6>
 8001a5c:	2305      	movs	r3, #5
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1f6>
 8001a60:	2303      	movs	r3, #3
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1f6>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1f6>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1f6>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a7e:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_GPIO_Init+0x2e4>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a8c:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ada:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b2e:	4a11      	ldr	r2, [pc, #68]	; (8001b74 <HAL_GPIO_Init+0x2fc>)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f47f aea3 	bne.w	8001890 <HAL_GPIO_Init+0x18>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
 8001b4e:	371c      	adds	r7, #28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40020000 	.word	0x40020000
 8001b64:	40020400 	.word	0x40020400
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e001      	b.n	8001b9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb6:	787b      	ldrb	r3, [r7, #1]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bbc:	887a      	ldrh	r2, [r7, #2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001bc2:	e003      	b.n	8001bcc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	041a      	lsls	r2, r3, #16
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd52 	bl	80006a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e31d      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1a:	4b94      	ldr	r3, [pc, #592]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c24:	4b91      	ldr	r3, [pc, #580]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d07b      	beq.n	8001d32 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d006      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d10f      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b87      	ldr	r3, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06a      	beq.n	8001d30 <HAL_RCC_OscConfig+0x128>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d166      	bne.n	8001d30 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2f7      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d106      	bne.n	8001c7c <HAL_RCC_OscConfig+0x74>
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e02d      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd0>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x96>
 8001c84:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a78      	ldr	r2, [pc, #480]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a75      	ldr	r2, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xb8>
 8001ca6:	4b71      	ldr	r3, [pc, #452]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a70      	ldr	r2, [pc, #448]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	4b6e      	ldr	r3, [pc, #440]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6d      	ldr	r2, [pc, #436]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e00b      	b.n	8001cd8 <HAL_RCC_OscConfig+0xd0>
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a66      	ldr	r2, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff f97c 	bl	8000fdc <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff f978 	bl	8000fdc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e2ad      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0xe0>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff f968 	bl	8000fdc <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff f964 	bl	8000fdc <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e299      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d22:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x108>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d05a      	beq.n	8001df4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d119      	bne.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d116      	bne.n	8001d7e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x160>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e276      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	493d      	ldr	r1, [pc, #244]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7c:	e03a      	b.n	8001df4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d020      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d86:	4b3a      	ldr	r3, [pc, #232]	; (8001e70 <HAL_RCC_OscConfig+0x268>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f926 	bl	8000fdc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f922 	bl	8000fdc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e257      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	492a      	ldr	r1, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
 8001dc6:	e015      	b.n	8001df4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_OscConfig+0x268>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff f905 	bl	8000fdc <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff f901 	bl	8000fdc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e236      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80b8 	beq.w	8001f72 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d170      	bne.n	8001eea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x218>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e21a      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d921      	bls.n	8001e74 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fc23 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e208      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4906      	ldr	r1, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	061b      	lsls	r3, r3, #24
 8001e64:	4901      	ldr	r1, [pc, #4]	; (8001e6c <HAL_RCC_OscConfig+0x264>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
 8001e6a:	e020      	b.n	8001eae <HAL_RCC_OscConfig+0x2a6>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e74:	4ba4      	ldr	r3, [pc, #656]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	49a1      	ldr	r1, [pc, #644]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e86:	4ba0      	ldr	r3, [pc, #640]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	061b      	lsls	r3, r3, #24
 8001e94:	499c      	ldr	r1, [pc, #624]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fbee 	bl	8002680 <RCC_SetFlashLatencyFromMSIRange>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e1d3      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	0b5b      	lsrs	r3, r3, #13
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ebe:	4a92      	ldr	r2, [pc, #584]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001ec0:	6892      	ldr	r2, [r2, #8]
 8001ec2:	0912      	lsrs	r2, r2, #4
 8001ec4:	f002 020f 	and.w	r2, r2, #15
 8001ec8:	4990      	ldr	r1, [pc, #576]	; (800210c <HAL_RCC_OscConfig+0x504>)
 8001eca:	5c8a      	ldrb	r2, [r1, r2]
 8001ecc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ece:	4a90      	ldr	r2, [pc, #576]	; (8002110 <HAL_RCC_OscConfig+0x508>)
 8001ed0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ed2:	4b90      	ldr	r3, [pc, #576]	; (8002114 <HAL_RCC_OscConfig+0x50c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f834 	bl	8000f44 <HAL_InitTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d045      	beq.n	8001f72 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	e1b5      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d029      	beq.n	8001f46 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0x510>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f870 	bl	8000fdc <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f00:	f7ff f86c 	bl	8000fdc <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e1a1      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4977      	ldr	r1, [pc, #476]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f30:	4b75      	ldr	r3, [pc, #468]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	4972      	ldr	r1, [pc, #456]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f46:	4b74      	ldr	r3, [pc, #464]	; (8002118 <HAL_RCC_OscConfig+0x510>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f846 	bl	8000fdc <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f54:	f7ff f842 	bl	8000fdc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e177      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001f66:	4b68      	ldr	r3, [pc, #416]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d030      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b65      	ldr	r3, [pc, #404]	; (800211c <HAL_RCC_OscConfig+0x514>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f826 	bl	8000fdc <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7ff f822 	bl	8000fdc <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e157      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fa6:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x38c>
 8001fb2:	e015      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_OscConfig+0x514>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f80f 	bl	8000fdc <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7ff f80b 	bl	8000fdc <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e140      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fd4:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80b5 	beq.w	8002158 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b45      	ldr	r3, [pc, #276]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10d      	bne.n	800201a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	4a41      	ldr	r2, [pc, #260]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002008:	6253      	str	r3, [r2, #36]	; 0x24
 800200a:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002016:	2301      	movs	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x518>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d118      	bne.n	8002058 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCC_OscConfig+0x518>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a3d      	ldr	r2, [pc, #244]	; (8002120 <HAL_RCC_OscConfig+0x518>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002032:	f7fe ffd3 	bl	8000fdc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe ffcf 	bl	8000fdc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b64      	cmp	r3, #100	; 0x64
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e104      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_OscConfig+0x518>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d106      	bne.n	800206e <HAL_RCC_OscConfig+0x466>
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	4a28      	ldr	r2, [pc, #160]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206a:	6353      	str	r3, [r2, #52]	; 0x34
 800206c:	e02d      	b.n	80020ca <HAL_RCC_OscConfig+0x4c2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x488>
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	4a23      	ldr	r2, [pc, #140]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 800207c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002080:	6353      	str	r3, [r2, #52]	; 0x34
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	4a20      	ldr	r2, [pc, #128]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 8002088:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800208c:	6353      	str	r3, [r2, #52]	; 0x34
 800208e:	e01c      	b.n	80020ca <HAL_RCC_OscConfig+0x4c2>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b05      	cmp	r3, #5
 8002096:	d10c      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209c:	4a1a      	ldr	r2, [pc, #104]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a2:	6353      	str	r3, [r2, #52]	; 0x34
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	4a17      	ldr	r2, [pc, #92]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6353      	str	r3, [r2, #52]	; 0x34
 80020b0:	e00b      	b.n	80020ca <HAL_RCC_OscConfig+0x4c2>
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020bc:	6353      	str	r3, [r2, #52]	; 0x34
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020c8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d015      	beq.n	80020fe <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe ff83 	bl	8000fdc <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7fe ff7f 	bl	8000fdc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0b2      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_OscConfig+0x500>)
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ee      	beq.n	80020da <HAL_RCC_OscConfig+0x4d2>
 80020fc:	e023      	b.n	8002146 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7fe ff6d 	bl	8000fdc <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002104:	e019      	b.n	800213a <HAL_RCC_OscConfig+0x532>
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	0800487c 	.word	0x0800487c
 8002110:	20000000 	.word	0x20000000
 8002114:	20000004 	.word	0x20000004
 8002118:	42470020 	.word	0x42470020
 800211c:	42470680 	.word	0x42470680
 8002120:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe ff5a 	bl	8000fdc <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e08d      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800213a:	4b49      	ldr	r3, [pc, #292]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	4a43      	ldr	r2, [pc, #268]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d079      	beq.n	8002254 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d056      	beq.n	8002214 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	2b02      	cmp	r3, #2
 800216c:	d13b      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_OscConfig+0x65c>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe ff32 	bl	8000fdc <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe ff2e 	bl	8000fdc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e063      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800218e:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219a:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	4319      	orrs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b0:	430b      	orrs	r3, r1
 80021b2:	492b      	ldr	r1, [pc, #172]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x65c>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe ff0d 	bl	8000fdc <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe ff09 	bl	8000fdc <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e03e      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x5be>
 80021e4:	e036      	b.n	8002254 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e6:	4b1f      	ldr	r3, [pc, #124]	; (8002264 <HAL_RCC_OscConfig+0x65c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fef6 	bl	8000fdc <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021f4:	f7fe fef2 	bl	8000fdc <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e027      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f0      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5ec>
 8002212:	e01f      	b.n	8002254 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e01a      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCC_OscConfig+0x658>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	429a      	cmp	r2, r3
 8002232:	d10d      	bne.n	8002250 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d106      	bne.n	8002250 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800
 8002264:	42470060 	.word	0x42470060

08002268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e11a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b8f      	ldr	r3, [pc, #572]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d919      	bls.n	80022be <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_ClockConfig+0x34>
 8002290:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a89      	ldr	r2, [pc, #548]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 0201 	bic.w	r2, r3, #1
 80022a4:	4985      	ldr	r1, [pc, #532]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ac:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0f9      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ca:	4b7d      	ldr	r3, [pc, #500]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	497a      	ldr	r1, [pc, #488]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 808e 	beq.w	8002406 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022f2:	4b73      	ldr	r3, [pc, #460]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d121      	bne.n	8002342 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0d7      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0cb      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e0bf      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0b7      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	495c      	ldr	r1, [pc, #368]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002354:	f7fe fe42 	bl	8000fdc <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d112      	bne.n	8002388 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7fe fe3a 	bl	8000fdc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e09b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
 8002382:	2b08      	cmp	r3, #8
 8002384:	d1ee      	bne.n	8002364 <HAL_RCC_ClockConfig+0xfc>
 8002386:	e03e      	b.n	8002406 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d112      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe fe23 	bl	8000fdc <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e084      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a8:	4b45      	ldr	r3, [pc, #276]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d1ee      	bne.n	8002392 <HAL_RCC_ClockConfig+0x12a>
 80023b4:	e027      	b.n	8002406 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d11d      	bne.n	80023fa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe fe0c 	bl	8000fdc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e06d      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d6:	4b3a      	ldr	r3, [pc, #232]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d1ee      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x158>
 80023e2:	e010      	b.n	8002406 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fdfa 	bl	8000fdc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e05b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023fa:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1ee      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d219      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCC_ClockConfig+0x1be>
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002420:	f043 0304 	orr.w	r3, r3, #4
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0201 	bic.w	r2, r3, #1
 800242e:	4923      	ldr	r1, [pc, #140]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <HAL_RCC_ClockConfig+0x254>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e034      	b.n	80024b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4917      	ldr	r1, [pc, #92]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490f      	ldr	r1, [pc, #60]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f823 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_ClockConfig+0x258>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490b      	ldr	r1, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x25c>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x264>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fd4c 	bl	8000f44 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80024b0:	7afb      	ldrb	r3, [r7, #11]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	0800487c 	.word	0x0800487c
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80024d6:	4b4d      	ldr	r3, [pc, #308]	; (800260c <HAL_RCC_GetSysClockFreq+0x13c>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b0c      	cmp	r3, #12
 80024e4:	d00c      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d87c      	bhi.n	80025e4 <HAL_RCC_GetSysClockFreq+0x114>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d002      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x24>
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0x2a>
 80024f2:	e077      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024f4:	4b46      	ldr	r3, [pc, #280]	; (8002610 <HAL_RCC_GetSysClockFreq+0x140>)
 80024f6:	613b      	str	r3, [r7, #16]
      break;
 80024f8:	e082      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_RCC_GetSysClockFreq+0x144>)
 80024fc:	613b      	str	r3, [r7, #16]
      break;
 80024fe:	e07f      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	0c9b      	lsrs	r3, r3, #18
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4a43      	ldr	r2, [pc, #268]	; (8002618 <HAL_RCC_GetSysClockFreq+0x148>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0d9b      	lsrs	r3, r3, #22
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800251a:	4b3c      	ldr	r3, [pc, #240]	; (800260c <HAL_RCC_GetSysClockFreq+0x13c>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d01a      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	461a      	mov	r2, r3
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	4939      	ldr	r1, [pc, #228]	; (8002614 <HAL_RCC_GetSysClockFreq+0x144>)
 8002530:	fb01 f003 	mul.w	r0, r1, r3
 8002534:	2100      	movs	r1, #0
 8002536:	fb01 f102 	mul.w	r1, r1, r2
 800253a:	1844      	adds	r4, r0, r1
 800253c:	4935      	ldr	r1, [pc, #212]	; (8002614 <HAL_RCC_GetSysClockFreq+0x144>)
 800253e:	fba2 0101 	umull	r0, r1, r2, r1
 8002542:	1863      	adds	r3, r4, r1
 8002544:	4619      	mov	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	461a      	mov	r2, r3
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	f7fd fe1d 	bl	800018c <__aeabi_uldivmod>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4613      	mov	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e040      	b.n	80025de <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	461c      	mov	r4, r3
 8002560:	f04f 0500 	mov.w	r5, #0
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	014b      	lsls	r3, r1, #5
 8002572:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002576:	0142      	lsls	r2, r0, #5
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	1b00      	subs	r0, r0, r4
 800257e:	eb61 0105 	sbc.w	r1, r1, r5
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	018b      	lsls	r3, r1, #6
 800258c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002590:	0182      	lsls	r2, r0, #6
 8002592:	1a12      	subs	r2, r2, r0
 8002594:	eb63 0301 	sbc.w	r3, r3, r1
 8002598:	f04f 0000 	mov.w	r0, #0
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	00d9      	lsls	r1, r3, #3
 80025a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025a6:	00d0      	lsls	r0, r2, #3
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	1912      	adds	r2, r2, r4
 80025ae:	eb45 0303 	adc.w	r3, r5, r3
 80025b2:	f04f 0000 	mov.w	r0, #0
 80025b6:	f04f 0100 	mov.w	r1, #0
 80025ba:	0299      	lsls	r1, r3, #10
 80025bc:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025c0:	0290      	lsls	r0, r2, #10
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	f7fd fddb 	bl	800018c <__aeabi_uldivmod>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4613      	mov	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	613b      	str	r3, [r7, #16]
      break;
 80025e2:	e00d      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0b5b      	lsrs	r3, r3, #13
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	3301      	adds	r3, #1
 80025f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	613b      	str	r3, [r7, #16]
      break;
 80025fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002600:	693b      	ldr	r3, [r7, #16]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bdb0      	pop	{r4, r5, r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	00f42400 	.word	0x00f42400
 8002614:	016e3600 	.word	0x016e3600
 8002618:	08004870 	.word	0x08004870

0800261c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002620:	4b02      	ldr	r3, [pc, #8]	; (800262c <HAL_RCC_GetHCLKFreq+0x10>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	20000000 	.word	0x20000000

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002634:	f7ff fff2 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	0800488c 	.word	0x0800488c

08002658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800265c:	f7ff ffde 	bl	800261c <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	; (8002678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	0adb      	lsrs	r3, r3, #11
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4903      	ldr	r1, [pc, #12]	; (800267c <HAL_RCC_GetPCLK2Freq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40023800 	.word	0x40023800
 800267c:	0800488c 	.word	0x0800488c

08002680 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d12c      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026a4:	4b24      	ldr	r3, [pc, #144]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e016      	b.n	80026de <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ba:	6253      	str	r3, [r2, #36]	; 0x24
 80026bc:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80026d0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b18      	ldr	r3, [pc, #96]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	4a17      	ldr	r2, [pc, #92]	; (8002734 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80026e4:	d105      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026ec:	d101      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80026ee:	2301      	movs	r3, #1
 80026f0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0f      	ldr	r2, [pc, #60]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026fe:	f043 0304 	orr.w	r3, r3, #4
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 0201 	bic.w	r2, r3, #1
 800270c:	490b      	ldr	r1, [pc, #44]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	429a      	cmp	r2, r3
 8002720:	d001      	beq.n	8002726 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40007000 	.word	0x40007000
 800273c:	40023c00 	.word	0x40023c00

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e031      	b.n	80027b6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fa18 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 fbf6 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d001      	beq.n	80027d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e03a      	b.n	800284e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d00e      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x58>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_TIM_Base_Start_IT+0x98>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x58>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_TIM_Base_Start_IT+0x9c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d004      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x58>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <HAL_TIM_Base_Start_IT+0xa0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d111      	bne.n	800283c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d010      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283a:	e007      	b.n	800284c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	40000400 	.word	0x40000400
 800285c:	40000800 	.word	0x40000800
 8002860:	40010800 	.word	0x40010800

08002864 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a1a      	ldr	r2, [r3, #32]
 8002882:	f241 1311 	movw	r3, #4369	; 0x1111
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d107      	bne.n	800289c <HAL_TIM_Base_Stop_IT+0x38>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e031      	b.n	8002926 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d106      	bne.n	80028dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f829 	bl	800292e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	4619      	mov	r1, r3
 80028ee:	4610      	mov	r0, r2
 80028f0:	f000 fb3e 	bl	8002f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_TIM_PWM_Start+0x24>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e022      	b.n	80029aa <HAL_TIM_PWM_Start+0x6a>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d109      	bne.n	800297e <HAL_TIM_PWM_Start+0x3e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b01      	cmp	r3, #1
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	e015      	b.n	80029aa <HAL_TIM_PWM_Start+0x6a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b08      	cmp	r3, #8
 8002982:	d109      	bne.n	8002998 <HAL_TIM_PWM_Start+0x58>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	e008      	b.n	80029aa <HAL_TIM_PWM_Start+0x6a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e051      	b.n	8002a56 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <HAL_TIM_PWM_Start+0x82>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80029c0:	e013      	b.n	80029ea <HAL_TIM_PWM_Start+0xaa>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d104      	bne.n	80029d2 <HAL_TIM_PWM_Start+0x92>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80029d0:	e00b      	b.n	80029ea <HAL_TIM_PWM_Start+0xaa>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_PWM_Start+0xa2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80029e0:	e003      	b.n	80029ea <HAL_TIM_PWM_Start+0xaa>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2201      	movs	r2, #1
 80029f0:	6839      	ldr	r1, [r7, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fca9 	bl	800334a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a00:	d00e      	beq.n	8002a20 <HAL_TIM_PWM_Start+0xe0>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <HAL_TIM_PWM_Start+0x120>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d009      	beq.n	8002a20 <HAL_TIM_PWM_Start+0xe0>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_TIM_PWM_Start+0x124>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d004      	beq.n	8002a20 <HAL_TIM_PWM_Start+0xe0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_TIM_PWM_Start+0x128>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d111      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d010      	beq.n	8002a54 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a42:	e007      	b.n	8002a54 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40000400 	.word	0x40000400
 8002a64:	40000800 	.word	0x40000800
 8002a68:	40010800 	.word	0x40010800

08002a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d122      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d11b      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0202 	mvn.w	r2, #2
 8002a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa43 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa36 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fa45 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d122      	bne.n	8002b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d11b      	bne.n	8002b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0204 	mvn.w	r2, #4
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa19 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fa0c 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa1b 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d122      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d11b      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 0208 	mvn.w	r2, #8
 8002b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2204      	movs	r2, #4
 8002b46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f9ef 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002b5c:	e005      	b.n	8002b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f9e2 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f9f1 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d122      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0210 	mvn.w	r2, #16
 8002b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2208      	movs	r2, #8
 8002b9a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f9c5 	bl	8002f3a <HAL_TIM_IC_CaptureCallback>
 8002bb0:	e005      	b.n	8002bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f9b8 	bl	8002f28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f9c7 	bl	8002f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0201 	mvn.w	r2, #1
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe f864 	bl	8000cb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f9a1 	bl	8002f5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0ac      	b.n	8002d98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	f200 809f 	bhi.w	8002d8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c89 	.word	0x08002c89
 8002c58:	08002d8d 	.word	0x08002d8d
 8002c5c:	08002d8d 	.word	0x08002d8d
 8002c60:	08002d8d 	.word	0x08002d8d
 8002c64:	08002cc9 	.word	0x08002cc9
 8002c68:	08002d8d 	.word	0x08002d8d
 8002c6c:	08002d8d 	.word	0x08002d8d
 8002c70:	08002d8d 	.word	0x08002d8d
 8002c74:	08002d0b 	.word	0x08002d0b
 8002c78:	08002d8d 	.word	0x08002d8d
 8002c7c:	08002d8d 	.word	0x08002d8d
 8002c80:	08002d8d 	.word	0x08002d8d
 8002c84:	08002d4b 	.word	0x08002d4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f9d0 	bl	8003034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6999      	ldr	r1, [r3, #24]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	619a      	str	r2, [r3, #24]
      break;
 8002cc6:	e062      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f9ec 	bl	80030ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	699a      	ldr	r2, [r3, #24]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6999      	ldr	r1, [r3, #24]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	619a      	str	r2, [r3, #24]
      break;
 8002d08:	e041      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fa09 	bl	8003128 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f042 0208 	orr.w	r2, r2, #8
 8002d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0204 	bic.w	r2, r2, #4
 8002d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	69d9      	ldr	r1, [r3, #28]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	61da      	str	r2, [r3, #28]
      break;
 8002d48:	e021      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fa26 	bl	80031a2 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69da      	ldr	r2, [r3, #28]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69d9      	ldr	r1, [r3, #28]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	021a      	lsls	r2, r3, #8
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	61da      	str	r2, [r3, #28]
      break;
 8002d8a:	e000      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_ConfigClockSource+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0b3      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x180>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xd0>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfe:	f000 8085 	beq.w	8002f0c <HAL_TIM_ConfigClockSource+0x16c>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b70      	cmp	r3, #112	; 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xa2>
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b60      	cmp	r3, #96	; 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x116>
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e18:	2b50      	cmp	r3, #80	; 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xf6>
 8002e1c:	2b50      	cmp	r3, #80	; 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e20:	2b40      	cmp	r3, #64	; 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x136>
 8002e24:	2b40      	cmp	r3, #64	; 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e28:	2b30      	cmp	r3, #48	; 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e2c:	2b30      	cmp	r3, #48	; 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f000 fa5b 	bl	800330c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04e      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f000 fa44 	bl	800330c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 f9bb 	bl	800321e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	; 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fa12 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 f9d9 	bl	800327a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	; 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa02 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 f99b 	bl	800321e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	; 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f9f2 	bl	80032d8 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00b      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 f9e9 	bl	80032d8 <TIM_ITRx_SetConfig>
        break;
 8002f06:	e002      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x28>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a25      	ldr	r2, [pc, #148]	; (8003020 <TIM_Base_SetConfig+0xb0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x28>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a24      	ldr	r2, [pc, #144]	; (8003024 <TIM_Base_SetConfig+0xb4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d013      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <TIM_Base_SetConfig+0xb0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <TIM_Base_SetConfig+0xb4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <TIM_Base_SetConfig+0xb8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <TIM_Base_SetConfig+0xbc>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_Base_SetConfig+0x6a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a16      	ldr	r2, [pc, #88]	; (8003030 <TIM_Base_SetConfig+0xc0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	615a      	str	r2, [r3, #20]
}
 8003016:	bf00      	nop
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40010800 	.word	0x40010800
 800302c:	40010c00 	.word	0x40010c00
 8003030:	40011000 	.word	0x40011000

08003034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0303 	bic.w	r3, r3, #3
 800306a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	621a      	str	r2, [r3, #32]
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b087      	sub	sp, #28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0210 	bic.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0320 	bic.w	r3, r3, #32
 80030f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	621a      	str	r2, [r3, #32]
}
 8003198:	bf00      	nop
 800319a:	371c      	adds	r7, #28
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b087      	sub	sp, #28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	031b      	lsls	r3, r3, #12
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	621a      	str	r2, [r3, #32]
}
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321e:	b480      	push	{r7}
 8003220:	b087      	sub	sp, #28
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f023 0201 	bic.w	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 030a 	bic.w	r3, r3, #10
 800325a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0210 	bic.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f043 0307 	orr.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	609a      	str	r2, [r3, #8]
}
 8003302:	bf00      	nop
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr

0800330c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	431a      	orrs	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800334a:	b480      	push	{r7}
 800334c:	b087      	sub	sp, #28
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2201      	movs	r2, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	43db      	mvns	r3, r3
 800336c:	401a      	ands	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	431a      	orrs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
	...

08003394 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e046      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2202      	movs	r2, #2
 80033b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d00e      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a12      	ldr	r2, [pc, #72]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a10      	ldr	r2, [pc, #64]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10c      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40010800 	.word	0x40010800

08003450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e03f      	b.n	80034e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fca6 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fc85 	bl	8003da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08a      	sub	sp, #40	; 0x28
 80034ee:	af02      	add	r7, sp, #8
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	d17c      	bne.n	8003604 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_UART_Transmit+0x2c>
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e075      	b.n	8003606 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_UART_Transmit+0x3e>
 8003524:	2302      	movs	r3, #2
 8003526:	e06e      	b.n	8003606 <HAL_UART_Transmit+0x11c>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2221      	movs	r2, #33	; 0x21
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800353e:	f7fd fd4d 	bl	8000fdc <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	88fa      	ldrh	r2, [r7, #6]
 8003548:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	88fa      	ldrh	r2, [r7, #6]
 800354e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003558:	d108      	bne.n	800356c <HAL_UART_Transmit+0x82>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d104      	bne.n	800356c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e003      	b.n	8003574 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800357c:	e02a      	b.n	80035d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fa38 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e036      	b.n	8003606 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	3302      	adds	r3, #2
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e007      	b.n	80035c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	781a      	ldrb	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1cf      	bne.n	800357e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2140      	movs	r1, #64	; 0x40
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fa08 	bl	80039fe <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e006      	b.n	8003606 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b20      	cmp	r3, #32
 8003626:	d11d      	bne.n	8003664 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HAL_UART_Receive_IT+0x26>
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e016      	b.n	8003666 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_UART_Receive_IT+0x38>
 8003642:	2302      	movs	r3, #2
 8003644:	e00f      	b.n	8003666 <HAL_UART_Receive_IT+0x58>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	461a      	mov	r2, r3
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa19 	bl	8003a92 <UART_Start_Receive_IT>
 8003660:	4603      	mov	r3, r0
 8003662:	e000      	b.n	8003666 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
  }
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003690:	2300      	movs	r3, #0
 8003692:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <HAL_UART_IRQHandler+0x52>
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fac9 	bl	8003c52 <UART_Receive_IT>
      return;
 80036c0:	e17b      	b.n	80039ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80b1 	beq.w	800382c <HAL_UART_IRQHandler+0x1bc>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_UART_IRQHandler+0x70>
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80a6 	beq.w	800382c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_UART_IRQHandler+0x90>
 80036ea:	6a3b      	ldr	r3, [r7, #32]
 80036ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_UART_IRQHandler+0xb0>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	f043 0202 	orr.w	r2, r3, #2
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_UART_IRQHandler+0xd0>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d005      	beq.n	8003740 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00f      	beq.n	800376a <HAL_UART_IRQHandler+0xfa>
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_UART_IRQHandler+0xee>
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f043 0208 	orr.w	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 811e 	beq.w	80039b0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f003 0320 	and.w	r3, r3, #32
 800377a:	2b00      	cmp	r3, #0
 800377c:	d007      	beq.n	800378e <HAL_UART_IRQHandler+0x11e>
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f003 0320 	and.w	r3, r3, #32
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fa62 	bl	8003c52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <HAL_UART_IRQHandler+0x146>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d031      	beq.n	800381a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9a4 	bl	8003b04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d123      	bne.n	8003812 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d013      	beq.n	800380a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e6:	4a76      	ldr	r2, [pc, #472]	; (80039c0 <HAL_UART_IRQHandler+0x350>)
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe f800 	bl	80017f4 <HAL_DMA_Abort_IT>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003804:	4610      	mov	r0, r2
 8003806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003808:	e00e      	b.n	8003828 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f8e3 	bl	80039d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003810:	e00a      	b.n	8003828 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f8df 	bl	80039d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e006      	b.n	8003828 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8db 	bl	80039d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003826:	e0c3      	b.n	80039b0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	bf00      	nop
    return;
 800382a:	e0c1      	b.n	80039b0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	2b01      	cmp	r3, #1
 8003832:	f040 80a1 	bne.w	8003978 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 809b 	beq.w	8003978 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8095 	beq.w	8003978 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d14e      	bne.n	8003910 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800387c:	8a3b      	ldrh	r3, [r7, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8098 	beq.w	80039b4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003888:	8a3a      	ldrh	r2, [r7, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	f080 8092 	bcs.w	80039b4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8a3a      	ldrh	r2, [r7, #16]
 8003894:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b20      	cmp	r3, #32
 800389e:	d02b      	beq.n	80038f8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0210 	bic.w	r2, r2, #16
 80038ec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd ff41 	bl	800177a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003900:	b29b      	uxth	r3, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	b29b      	uxth	r3, r3
 8003906:	4619      	mov	r1, r3
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f86d 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800390e:	e051      	b.n	80039b4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003918:	b29b      	uxth	r3, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d047      	beq.n	80039b8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003928:	8a7b      	ldrh	r3, [r7, #18]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800393c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695a      	ldr	r2, [r3, #20]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0201 	bic.w	r2, r2, #1
 800394c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0210 	bic.w	r2, r2, #16
 800396a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800396c:	8a7b      	ldrh	r3, [r7, #18]
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f839 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003976:	e01f      	b.n	80039b8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_UART_IRQHandler+0x324>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f8f9 	bl	8003b84 <UART_Transmit_IT>
    return;
 8003992:	e012      	b.n	80039ba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00d      	beq.n	80039ba <HAL_UART_IRQHandler+0x34a>
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f93a 	bl	8003c22 <UART_EndTransmit_IT>
    return;
 80039ae:	e004      	b.n	80039ba <HAL_UART_IRQHandler+0x34a>
    return;
 80039b0:	bf00      	nop
 80039b2:	e002      	b.n	80039ba <HAL_UART_IRQHandler+0x34a>
      return;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <HAL_UART_IRQHandler+0x34a>
      return;
 80039b8:	bf00      	nop
  }
}
 80039ba:	3728      	adds	r7, #40	; 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08003b5d 	.word	0x08003b5d

080039c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0e:	e02c      	b.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a16:	d028      	beq.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d007      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	f7fd fadd 	bl	8000fdc <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d21d      	bcs.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a3c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e00f      	b.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	bf0c      	ite	eq
 8003a7a:	2301      	moveq	r3, #1
 8003a7c:	2300      	movne	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d0c3      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	88fa      	ldrh	r2, [r7, #6]
 8003aaa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	88fa      	ldrh	r2, [r7, #6]
 8003ab0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2222      	movs	r2, #34	; 0x22
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ad6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695a      	ldr	r2, [r3, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0210 	bic.w	r2, r2, #16
 8003b42:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7ff ff2d 	bl	80039d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b21      	cmp	r3, #33	; 0x21
 8003b96:	d13e      	bne.n	8003c16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba0:	d114      	bne.n	8003bcc <UART_Transmit_IT+0x48>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d110      	bne.n	8003bcc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bbe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	621a      	str	r2, [r3, #32]
 8003bca:	e008      	b.n	8003bde <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	1c59      	adds	r1, r3, #1
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6211      	str	r1, [r2, #32]
 8003bd6:	781a      	ldrb	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4619      	mov	r1, r3
 8003bec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff febe 	bl	80039c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b22      	cmp	r3, #34	; 0x22
 8003c64:	f040 8099 	bne.w	8003d9a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d117      	bne.n	8003ca2 <UART_Receive_IT+0x50>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d113      	bne.n	8003ca2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	1c9a      	adds	r2, r3, #2
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003ca0:	e026      	b.n	8003cf0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	d007      	beq.n	8003cc6 <UART_Receive_IT+0x74>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <UART_Receive_IT+0x82>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e008      	b.n	8003ce6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d148      	bne.n	8003d96 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0220 	bic.w	r2, r2, #32
 8003d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d123      	bne.n	8003d8c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0210 	bic.w	r2, r2, #16
 8003d58:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0310 	and.w	r3, r3, #16
 8003d64:	2b10      	cmp	r3, #16
 8003d66:	d10a      	bne.n	8003d7e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff fe2f 	bl	80039e8 <HAL_UARTEx_RxEventCallback>
 8003d8a:	e002      	b.n	8003d92 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7fd f88d 	bl	8000eac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e002      	b.n	8003d9c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
  }
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689a      	ldr	r2, [r3, #8]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003de4:	f023 030c 	bic.w	r3, r3, #12
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a55      	ldr	r2, [pc, #340]	; (8003f64 <UART_SetConfig+0x1c0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d103      	bne.n	8003e1a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e12:	f7fe fc21 	bl	8002658 <HAL_RCC_GetPCLK2Freq>
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	e002      	b.n	8003e20 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e1a:	f7fe fc09 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 8003e1e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e28:	d14c      	bne.n	8003ec4 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009a      	lsls	r2, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	005b      	lsls	r3, r3, #1
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	4a49      	ldr	r2, [pc, #292]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	0119      	lsls	r1, r3, #4
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009a      	lsls	r2, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e60:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003e62:	fba3 0302 	umull	r0, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2064      	movs	r0, #100	; 0x64
 8003e6a:	fb00 f303 	mul.w	r3, r0, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	3332      	adds	r3, #50	; 0x32
 8003e74:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e82:	4419      	add	r1, r3
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009a      	lsls	r2, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e9a:	4b33      	ldr	r3, [pc, #204]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003e9c:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	2064      	movs	r0, #100	; 0x64
 8003ea4:	fb00 f303 	mul.w	r3, r0, r3
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	3332      	adds	r3, #50	; 0x32
 8003eae:	4a2e      	ldr	r2, [pc, #184]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	095b      	lsrs	r3, r3, #5
 8003eb6:	f003 0207 	and.w	r2, r3, #7
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	440a      	add	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ec2:	e04a      	b.n	8003f5a <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	441a      	add	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eda:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	0119      	lsls	r1, r3, #4
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009a      	lsls	r2, r3, #2
 8003eee:	441a      	add	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003efc:	fba3 0302 	umull	r0, r3, r3, r2
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	2064      	movs	r0, #100	; 0x64
 8003f04:	fb00 f303 	mul.w	r3, r0, r3
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	3332      	adds	r3, #50	; 0x32
 8003f0e:	4a16      	ldr	r2, [pc, #88]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f1a:	4419      	add	r1, r3
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009a      	lsls	r2, r3, #2
 8003f26:	441a      	add	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f32:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003f34:	fba3 0302 	umull	r0, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	2064      	movs	r0, #100	; 0x64
 8003f3c:	fb00 f303 	mul.w	r3, r0, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	3332      	adds	r3, #50	; 0x32
 8003f46:	4a08      	ldr	r2, [pc, #32]	; (8003f68 <UART_SetConfig+0x1c4>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	f003 020f 	and.w	r2, r3, #15
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	440a      	add	r2, r1
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40013800 	.word	0x40013800
 8003f68:	51eb851f 	.word	0x51eb851f

08003f6c <__errno>:
 8003f6c:	4b01      	ldr	r3, [pc, #4]	; (8003f74 <__errno+0x8>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c

08003f78 <__libc_init_array>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	2600      	movs	r6, #0
 8003f7c:	4d0c      	ldr	r5, [pc, #48]	; (8003fb0 <__libc_init_array+0x38>)
 8003f7e:	4c0d      	ldr	r4, [pc, #52]	; (8003fb4 <__libc_init_array+0x3c>)
 8003f80:	1b64      	subs	r4, r4, r5
 8003f82:	10a4      	asrs	r4, r4, #2
 8003f84:	42a6      	cmp	r6, r4
 8003f86:	d109      	bne.n	8003f9c <__libc_init_array+0x24>
 8003f88:	f000 fc5c 	bl	8004844 <_init>
 8003f8c:	2600      	movs	r6, #0
 8003f8e:	4d0a      	ldr	r5, [pc, #40]	; (8003fb8 <__libc_init_array+0x40>)
 8003f90:	4c0a      	ldr	r4, [pc, #40]	; (8003fbc <__libc_init_array+0x44>)
 8003f92:	1b64      	subs	r4, r4, r5
 8003f94:	10a4      	asrs	r4, r4, #2
 8003f96:	42a6      	cmp	r6, r4
 8003f98:	d105      	bne.n	8003fa6 <__libc_init_array+0x2e>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fa0:	4798      	blx	r3
 8003fa2:	3601      	adds	r6, #1
 8003fa4:	e7ee      	b.n	8003f84 <__libc_init_array+0xc>
 8003fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003faa:	4798      	blx	r3
 8003fac:	3601      	adds	r6, #1
 8003fae:	e7f2      	b.n	8003f96 <__libc_init_array+0x1e>
 8003fb0:	080048d0 	.word	0x080048d0
 8003fb4:	080048d0 	.word	0x080048d0
 8003fb8:	080048d0 	.word	0x080048d0
 8003fbc:	080048d4 	.word	0x080048d4

08003fc0 <memset>:
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4402      	add	r2, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <siprintf>:
 8003fd0:	b40e      	push	{r1, r2, r3}
 8003fd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fd6:	b500      	push	{lr}
 8003fd8:	b09c      	sub	sp, #112	; 0x70
 8003fda:	ab1d      	add	r3, sp, #116	; 0x74
 8003fdc:	9002      	str	r0, [sp, #8]
 8003fde:	9006      	str	r0, [sp, #24]
 8003fe0:	9107      	str	r1, [sp, #28]
 8003fe2:	9104      	str	r1, [sp, #16]
 8003fe4:	4808      	ldr	r0, [pc, #32]	; (8004008 <siprintf+0x38>)
 8003fe6:	4909      	ldr	r1, [pc, #36]	; (800400c <siprintf+0x3c>)
 8003fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fec:	9105      	str	r1, [sp, #20]
 8003fee:	6800      	ldr	r0, [r0, #0]
 8003ff0:	a902      	add	r1, sp, #8
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	f000 f868 	bl	80040c8 <_svfiprintf_r>
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	9b02      	ldr	r3, [sp, #8]
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	b01c      	add	sp, #112	; 0x70
 8004000:	f85d eb04 	ldr.w	lr, [sp], #4
 8004004:	b003      	add	sp, #12
 8004006:	4770      	bx	lr
 8004008:	2000000c 	.word	0x2000000c
 800400c:	ffff0208 	.word	0xffff0208

08004010 <__ssputs_r>:
 8004010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004014:	688e      	ldr	r6, [r1, #8]
 8004016:	4682      	mov	sl, r0
 8004018:	429e      	cmp	r6, r3
 800401a:	460c      	mov	r4, r1
 800401c:	4690      	mov	r8, r2
 800401e:	461f      	mov	r7, r3
 8004020:	d838      	bhi.n	8004094 <__ssputs_r+0x84>
 8004022:	898a      	ldrh	r2, [r1, #12]
 8004024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004028:	d032      	beq.n	8004090 <__ssputs_r+0x80>
 800402a:	6825      	ldr	r5, [r4, #0]
 800402c:	6909      	ldr	r1, [r1, #16]
 800402e:	3301      	adds	r3, #1
 8004030:	eba5 0901 	sub.w	r9, r5, r1
 8004034:	6965      	ldr	r5, [r4, #20]
 8004036:	444b      	add	r3, r9
 8004038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800403c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004040:	106d      	asrs	r5, r5, #1
 8004042:	429d      	cmp	r5, r3
 8004044:	bf38      	it	cc
 8004046:	461d      	movcc	r5, r3
 8004048:	0553      	lsls	r3, r2, #21
 800404a:	d531      	bpl.n	80040b0 <__ssputs_r+0xa0>
 800404c:	4629      	mov	r1, r5
 800404e:	f000 fb53 	bl	80046f8 <_malloc_r>
 8004052:	4606      	mov	r6, r0
 8004054:	b950      	cbnz	r0, 800406c <__ssputs_r+0x5c>
 8004056:	230c      	movs	r3, #12
 8004058:	f04f 30ff 	mov.w	r0, #4294967295
 800405c:	f8ca 3000 	str.w	r3, [sl]
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004066:	81a3      	strh	r3, [r4, #12]
 8004068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406c:	464a      	mov	r2, r9
 800406e:	6921      	ldr	r1, [r4, #16]
 8004070:	f000 face 	bl	8004610 <memcpy>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800407a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	6126      	str	r6, [r4, #16]
 8004082:	444e      	add	r6, r9
 8004084:	6026      	str	r6, [r4, #0]
 8004086:	463e      	mov	r6, r7
 8004088:	6165      	str	r5, [r4, #20]
 800408a:	eba5 0509 	sub.w	r5, r5, r9
 800408e:	60a5      	str	r5, [r4, #8]
 8004090:	42be      	cmp	r6, r7
 8004092:	d900      	bls.n	8004096 <__ssputs_r+0x86>
 8004094:	463e      	mov	r6, r7
 8004096:	4632      	mov	r2, r6
 8004098:	4641      	mov	r1, r8
 800409a:	6820      	ldr	r0, [r4, #0]
 800409c:	f000 fac6 	bl	800462c <memmove>
 80040a0:	68a3      	ldr	r3, [r4, #8]
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	1b9b      	subs	r3, r3, r6
 80040a6:	4432      	add	r2, r6
 80040a8:	2000      	movs	r0, #0
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	6022      	str	r2, [r4, #0]
 80040ae:	e7db      	b.n	8004068 <__ssputs_r+0x58>
 80040b0:	462a      	mov	r2, r5
 80040b2:	f000 fb7b 	bl	80047ac <_realloc_r>
 80040b6:	4606      	mov	r6, r0
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d1e1      	bne.n	8004080 <__ssputs_r+0x70>
 80040bc:	4650      	mov	r0, sl
 80040be:	6921      	ldr	r1, [r4, #16]
 80040c0:	f000 face 	bl	8004660 <_free_r>
 80040c4:	e7c7      	b.n	8004056 <__ssputs_r+0x46>
	...

080040c8 <_svfiprintf_r>:
 80040c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040cc:	4698      	mov	r8, r3
 80040ce:	898b      	ldrh	r3, [r1, #12]
 80040d0:	4607      	mov	r7, r0
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	460d      	mov	r5, r1
 80040d6:	4614      	mov	r4, r2
 80040d8:	b09d      	sub	sp, #116	; 0x74
 80040da:	d50e      	bpl.n	80040fa <_svfiprintf_r+0x32>
 80040dc:	690b      	ldr	r3, [r1, #16]
 80040de:	b963      	cbnz	r3, 80040fa <_svfiprintf_r+0x32>
 80040e0:	2140      	movs	r1, #64	; 0x40
 80040e2:	f000 fb09 	bl	80046f8 <_malloc_r>
 80040e6:	6028      	str	r0, [r5, #0]
 80040e8:	6128      	str	r0, [r5, #16]
 80040ea:	b920      	cbnz	r0, 80040f6 <_svfiprintf_r+0x2e>
 80040ec:	230c      	movs	r3, #12
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	e0d1      	b.n	800429a <_svfiprintf_r+0x1d2>
 80040f6:	2340      	movs	r3, #64	; 0x40
 80040f8:	616b      	str	r3, [r5, #20]
 80040fa:	2300      	movs	r3, #0
 80040fc:	9309      	str	r3, [sp, #36]	; 0x24
 80040fe:	2320      	movs	r3, #32
 8004100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004104:	2330      	movs	r3, #48	; 0x30
 8004106:	f04f 0901 	mov.w	r9, #1
 800410a:	f8cd 800c 	str.w	r8, [sp, #12]
 800410e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042b4 <_svfiprintf_r+0x1ec>
 8004112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004116:	4623      	mov	r3, r4
 8004118:	469a      	mov	sl, r3
 800411a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800411e:	b10a      	cbz	r2, 8004124 <_svfiprintf_r+0x5c>
 8004120:	2a25      	cmp	r2, #37	; 0x25
 8004122:	d1f9      	bne.n	8004118 <_svfiprintf_r+0x50>
 8004124:	ebba 0b04 	subs.w	fp, sl, r4
 8004128:	d00b      	beq.n	8004142 <_svfiprintf_r+0x7a>
 800412a:	465b      	mov	r3, fp
 800412c:	4622      	mov	r2, r4
 800412e:	4629      	mov	r1, r5
 8004130:	4638      	mov	r0, r7
 8004132:	f7ff ff6d 	bl	8004010 <__ssputs_r>
 8004136:	3001      	adds	r0, #1
 8004138:	f000 80aa 	beq.w	8004290 <_svfiprintf_r+0x1c8>
 800413c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800413e:	445a      	add	r2, fp
 8004140:	9209      	str	r2, [sp, #36]	; 0x24
 8004142:	f89a 3000 	ldrb.w	r3, [sl]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80a2 	beq.w	8004290 <_svfiprintf_r+0x1c8>
 800414c:	2300      	movs	r3, #0
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004156:	f10a 0a01 	add.w	sl, sl, #1
 800415a:	9304      	str	r3, [sp, #16]
 800415c:	9307      	str	r3, [sp, #28]
 800415e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004162:	931a      	str	r3, [sp, #104]	; 0x68
 8004164:	4654      	mov	r4, sl
 8004166:	2205      	movs	r2, #5
 8004168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800416c:	4851      	ldr	r0, [pc, #324]	; (80042b4 <_svfiprintf_r+0x1ec>)
 800416e:	f000 fa41 	bl	80045f4 <memchr>
 8004172:	9a04      	ldr	r2, [sp, #16]
 8004174:	b9d8      	cbnz	r0, 80041ae <_svfiprintf_r+0xe6>
 8004176:	06d0      	lsls	r0, r2, #27
 8004178:	bf44      	itt	mi
 800417a:	2320      	movmi	r3, #32
 800417c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004180:	0711      	lsls	r1, r2, #28
 8004182:	bf44      	itt	mi
 8004184:	232b      	movmi	r3, #43	; 0x2b
 8004186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800418a:	f89a 3000 	ldrb.w	r3, [sl]
 800418e:	2b2a      	cmp	r3, #42	; 0x2a
 8004190:	d015      	beq.n	80041be <_svfiprintf_r+0xf6>
 8004192:	4654      	mov	r4, sl
 8004194:	2000      	movs	r0, #0
 8004196:	f04f 0c0a 	mov.w	ip, #10
 800419a:	9a07      	ldr	r2, [sp, #28]
 800419c:	4621      	mov	r1, r4
 800419e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041a2:	3b30      	subs	r3, #48	; 0x30
 80041a4:	2b09      	cmp	r3, #9
 80041a6:	d94e      	bls.n	8004246 <_svfiprintf_r+0x17e>
 80041a8:	b1b0      	cbz	r0, 80041d8 <_svfiprintf_r+0x110>
 80041aa:	9207      	str	r2, [sp, #28]
 80041ac:	e014      	b.n	80041d8 <_svfiprintf_r+0x110>
 80041ae:	eba0 0308 	sub.w	r3, r0, r8
 80041b2:	fa09 f303 	lsl.w	r3, r9, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	46a2      	mov	sl, r4
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	e7d2      	b.n	8004164 <_svfiprintf_r+0x9c>
 80041be:	9b03      	ldr	r3, [sp, #12]
 80041c0:	1d19      	adds	r1, r3, #4
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	9103      	str	r1, [sp, #12]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfbb      	ittet	lt
 80041ca:	425b      	neglt	r3, r3
 80041cc:	f042 0202 	orrlt.w	r2, r2, #2
 80041d0:	9307      	strge	r3, [sp, #28]
 80041d2:	9307      	strlt	r3, [sp, #28]
 80041d4:	bfb8      	it	lt
 80041d6:	9204      	strlt	r2, [sp, #16]
 80041d8:	7823      	ldrb	r3, [r4, #0]
 80041da:	2b2e      	cmp	r3, #46	; 0x2e
 80041dc:	d10c      	bne.n	80041f8 <_svfiprintf_r+0x130>
 80041de:	7863      	ldrb	r3, [r4, #1]
 80041e0:	2b2a      	cmp	r3, #42	; 0x2a
 80041e2:	d135      	bne.n	8004250 <_svfiprintf_r+0x188>
 80041e4:	9b03      	ldr	r3, [sp, #12]
 80041e6:	3402      	adds	r4, #2
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	9203      	str	r2, [sp, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bfb8      	it	lt
 80041f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80041f6:	9305      	str	r3, [sp, #20]
 80041f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042c4 <_svfiprintf_r+0x1fc>
 80041fc:	2203      	movs	r2, #3
 80041fe:	4650      	mov	r0, sl
 8004200:	7821      	ldrb	r1, [r4, #0]
 8004202:	f000 f9f7 	bl	80045f4 <memchr>
 8004206:	b140      	cbz	r0, 800421a <_svfiprintf_r+0x152>
 8004208:	2340      	movs	r3, #64	; 0x40
 800420a:	eba0 000a 	sub.w	r0, r0, sl
 800420e:	fa03 f000 	lsl.w	r0, r3, r0
 8004212:	9b04      	ldr	r3, [sp, #16]
 8004214:	3401      	adds	r4, #1
 8004216:	4303      	orrs	r3, r0
 8004218:	9304      	str	r3, [sp, #16]
 800421a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800421e:	2206      	movs	r2, #6
 8004220:	4825      	ldr	r0, [pc, #148]	; (80042b8 <_svfiprintf_r+0x1f0>)
 8004222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004226:	f000 f9e5 	bl	80045f4 <memchr>
 800422a:	2800      	cmp	r0, #0
 800422c:	d038      	beq.n	80042a0 <_svfiprintf_r+0x1d8>
 800422e:	4b23      	ldr	r3, [pc, #140]	; (80042bc <_svfiprintf_r+0x1f4>)
 8004230:	bb1b      	cbnz	r3, 800427a <_svfiprintf_r+0x1b2>
 8004232:	9b03      	ldr	r3, [sp, #12]
 8004234:	3307      	adds	r3, #7
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	3308      	adds	r3, #8
 800423c:	9303      	str	r3, [sp, #12]
 800423e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004240:	4433      	add	r3, r6
 8004242:	9309      	str	r3, [sp, #36]	; 0x24
 8004244:	e767      	b.n	8004116 <_svfiprintf_r+0x4e>
 8004246:	460c      	mov	r4, r1
 8004248:	2001      	movs	r0, #1
 800424a:	fb0c 3202 	mla	r2, ip, r2, r3
 800424e:	e7a5      	b.n	800419c <_svfiprintf_r+0xd4>
 8004250:	2300      	movs	r3, #0
 8004252:	f04f 0c0a 	mov.w	ip, #10
 8004256:	4619      	mov	r1, r3
 8004258:	3401      	adds	r4, #1
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	4620      	mov	r0, r4
 800425e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004262:	3a30      	subs	r2, #48	; 0x30
 8004264:	2a09      	cmp	r2, #9
 8004266:	d903      	bls.n	8004270 <_svfiprintf_r+0x1a8>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0c5      	beq.n	80041f8 <_svfiprintf_r+0x130>
 800426c:	9105      	str	r1, [sp, #20]
 800426e:	e7c3      	b.n	80041f8 <_svfiprintf_r+0x130>
 8004270:	4604      	mov	r4, r0
 8004272:	2301      	movs	r3, #1
 8004274:	fb0c 2101 	mla	r1, ip, r1, r2
 8004278:	e7f0      	b.n	800425c <_svfiprintf_r+0x194>
 800427a:	ab03      	add	r3, sp, #12
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	462a      	mov	r2, r5
 8004280:	4638      	mov	r0, r7
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <_svfiprintf_r+0x1f8>)
 8004284:	a904      	add	r1, sp, #16
 8004286:	f3af 8000 	nop.w
 800428a:	1c42      	adds	r2, r0, #1
 800428c:	4606      	mov	r6, r0
 800428e:	d1d6      	bne.n	800423e <_svfiprintf_r+0x176>
 8004290:	89ab      	ldrh	r3, [r5, #12]
 8004292:	065b      	lsls	r3, r3, #25
 8004294:	f53f af2c 	bmi.w	80040f0 <_svfiprintf_r+0x28>
 8004298:	9809      	ldr	r0, [sp, #36]	; 0x24
 800429a:	b01d      	add	sp, #116	; 0x74
 800429c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a0:	ab03      	add	r3, sp, #12
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	462a      	mov	r2, r5
 80042a6:	4638      	mov	r0, r7
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_svfiprintf_r+0x1f8>)
 80042aa:	a904      	add	r1, sp, #16
 80042ac:	f000 f87c 	bl	80043a8 <_printf_i>
 80042b0:	e7eb      	b.n	800428a <_svfiprintf_r+0x1c2>
 80042b2:	bf00      	nop
 80042b4:	08004894 	.word	0x08004894
 80042b8:	0800489e 	.word	0x0800489e
 80042bc:	00000000 	.word	0x00000000
 80042c0:	08004011 	.word	0x08004011
 80042c4:	0800489a 	.word	0x0800489a

080042c8 <_printf_common>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	4616      	mov	r6, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	688a      	ldr	r2, [r1, #8]
 80042d2:	690b      	ldr	r3, [r1, #16]
 80042d4:	4607      	mov	r7, r0
 80042d6:	4293      	cmp	r3, r2
 80042d8:	bfb8      	it	lt
 80042da:	4613      	movlt	r3, r2
 80042dc:	6033      	str	r3, [r6, #0]
 80042de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042e2:	460c      	mov	r4, r1
 80042e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e8:	b10a      	cbz	r2, 80042ee <_printf_common+0x26>
 80042ea:	3301      	adds	r3, #1
 80042ec:	6033      	str	r3, [r6, #0]
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	0699      	lsls	r1, r3, #26
 80042f2:	bf42      	ittt	mi
 80042f4:	6833      	ldrmi	r3, [r6, #0]
 80042f6:	3302      	addmi	r3, #2
 80042f8:	6033      	strmi	r3, [r6, #0]
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	f015 0506 	ands.w	r5, r5, #6
 8004300:	d106      	bne.n	8004310 <_printf_common+0x48>
 8004302:	f104 0a19 	add.w	sl, r4, #25
 8004306:	68e3      	ldr	r3, [r4, #12]
 8004308:	6832      	ldr	r2, [r6, #0]
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	42ab      	cmp	r3, r5
 800430e:	dc28      	bgt.n	8004362 <_printf_common+0x9a>
 8004310:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004314:	1e13      	subs	r3, r2, #0
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	2301      	movne	r3, #1
 800431c:	0692      	lsls	r2, r2, #26
 800431e:	d42d      	bmi.n	800437c <_printf_common+0xb4>
 8004320:	4649      	mov	r1, r9
 8004322:	4638      	mov	r0, r7
 8004324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d020      	beq.n	8004370 <_printf_common+0xa8>
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	68e5      	ldr	r5, [r4, #12]
 8004332:	f003 0306 	and.w	r3, r3, #6
 8004336:	2b04      	cmp	r3, #4
 8004338:	bf18      	it	ne
 800433a:	2500      	movne	r5, #0
 800433c:	6832      	ldr	r2, [r6, #0]
 800433e:	f04f 0600 	mov.w	r6, #0
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	bf08      	it	eq
 8004346:	1aad      	subeq	r5, r5, r2
 8004348:	6922      	ldr	r2, [r4, #16]
 800434a:	bf08      	it	eq
 800434c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004350:	4293      	cmp	r3, r2
 8004352:	bfc4      	itt	gt
 8004354:	1a9b      	subgt	r3, r3, r2
 8004356:	18ed      	addgt	r5, r5, r3
 8004358:	341a      	adds	r4, #26
 800435a:	42b5      	cmp	r5, r6
 800435c:	d11a      	bne.n	8004394 <_printf_common+0xcc>
 800435e:	2000      	movs	r0, #0
 8004360:	e008      	b.n	8004374 <_printf_common+0xac>
 8004362:	2301      	movs	r3, #1
 8004364:	4652      	mov	r2, sl
 8004366:	4649      	mov	r1, r9
 8004368:	4638      	mov	r0, r7
 800436a:	47c0      	blx	r8
 800436c:	3001      	adds	r0, #1
 800436e:	d103      	bne.n	8004378 <_printf_common+0xb0>
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004378:	3501      	adds	r5, #1
 800437a:	e7c4      	b.n	8004306 <_printf_common+0x3e>
 800437c:	2030      	movs	r0, #48	; 0x30
 800437e:	18e1      	adds	r1, r4, r3
 8004380:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800438a:	4422      	add	r2, r4
 800438c:	3302      	adds	r3, #2
 800438e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004392:	e7c5      	b.n	8004320 <_printf_common+0x58>
 8004394:	2301      	movs	r3, #1
 8004396:	4622      	mov	r2, r4
 8004398:	4649      	mov	r1, r9
 800439a:	4638      	mov	r0, r7
 800439c:	47c0      	blx	r8
 800439e:	3001      	adds	r0, #1
 80043a0:	d0e6      	beq.n	8004370 <_printf_common+0xa8>
 80043a2:	3601      	adds	r6, #1
 80043a4:	e7d9      	b.n	800435a <_printf_common+0x92>
	...

080043a8 <_printf_i>:
 80043a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043ac:	460c      	mov	r4, r1
 80043ae:	7e27      	ldrb	r7, [r4, #24]
 80043b0:	4691      	mov	r9, r2
 80043b2:	2f78      	cmp	r7, #120	; 0x78
 80043b4:	4680      	mov	r8, r0
 80043b6:	469a      	mov	sl, r3
 80043b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80043ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043be:	d807      	bhi.n	80043d0 <_printf_i+0x28>
 80043c0:	2f62      	cmp	r7, #98	; 0x62
 80043c2:	d80a      	bhi.n	80043da <_printf_i+0x32>
 80043c4:	2f00      	cmp	r7, #0
 80043c6:	f000 80d9 	beq.w	800457c <_printf_i+0x1d4>
 80043ca:	2f58      	cmp	r7, #88	; 0x58
 80043cc:	f000 80a4 	beq.w	8004518 <_printf_i+0x170>
 80043d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d8:	e03a      	b.n	8004450 <_printf_i+0xa8>
 80043da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043de:	2b15      	cmp	r3, #21
 80043e0:	d8f6      	bhi.n	80043d0 <_printf_i+0x28>
 80043e2:	a001      	add	r0, pc, #4	; (adr r0, 80043e8 <_printf_i+0x40>)
 80043e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80043e8:	08004441 	.word	0x08004441
 80043ec:	08004455 	.word	0x08004455
 80043f0:	080043d1 	.word	0x080043d1
 80043f4:	080043d1 	.word	0x080043d1
 80043f8:	080043d1 	.word	0x080043d1
 80043fc:	080043d1 	.word	0x080043d1
 8004400:	08004455 	.word	0x08004455
 8004404:	080043d1 	.word	0x080043d1
 8004408:	080043d1 	.word	0x080043d1
 800440c:	080043d1 	.word	0x080043d1
 8004410:	080043d1 	.word	0x080043d1
 8004414:	08004563 	.word	0x08004563
 8004418:	08004485 	.word	0x08004485
 800441c:	08004545 	.word	0x08004545
 8004420:	080043d1 	.word	0x080043d1
 8004424:	080043d1 	.word	0x080043d1
 8004428:	08004585 	.word	0x08004585
 800442c:	080043d1 	.word	0x080043d1
 8004430:	08004485 	.word	0x08004485
 8004434:	080043d1 	.word	0x080043d1
 8004438:	080043d1 	.word	0x080043d1
 800443c:	0800454d 	.word	0x0800454d
 8004440:	680b      	ldr	r3, [r1, #0]
 8004442:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	600a      	str	r2, [r1, #0]
 800444c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004450:	2301      	movs	r3, #1
 8004452:	e0a4      	b.n	800459e <_printf_i+0x1f6>
 8004454:	6825      	ldr	r5, [r4, #0]
 8004456:	6808      	ldr	r0, [r1, #0]
 8004458:	062e      	lsls	r6, r5, #24
 800445a:	f100 0304 	add.w	r3, r0, #4
 800445e:	d50a      	bpl.n	8004476 <_printf_i+0xce>
 8004460:	6805      	ldr	r5, [r0, #0]
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	2d00      	cmp	r5, #0
 8004466:	da03      	bge.n	8004470 <_printf_i+0xc8>
 8004468:	232d      	movs	r3, #45	; 0x2d
 800446a:	426d      	negs	r5, r5
 800446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004470:	230a      	movs	r3, #10
 8004472:	485e      	ldr	r0, [pc, #376]	; (80045ec <_printf_i+0x244>)
 8004474:	e019      	b.n	80044aa <_printf_i+0x102>
 8004476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800447a:	6805      	ldr	r5, [r0, #0]
 800447c:	600b      	str	r3, [r1, #0]
 800447e:	bf18      	it	ne
 8004480:	b22d      	sxthne	r5, r5
 8004482:	e7ef      	b.n	8004464 <_printf_i+0xbc>
 8004484:	680b      	ldr	r3, [r1, #0]
 8004486:	6825      	ldr	r5, [r4, #0]
 8004488:	1d18      	adds	r0, r3, #4
 800448a:	6008      	str	r0, [r1, #0]
 800448c:	0628      	lsls	r0, r5, #24
 800448e:	d501      	bpl.n	8004494 <_printf_i+0xec>
 8004490:	681d      	ldr	r5, [r3, #0]
 8004492:	e002      	b.n	800449a <_printf_i+0xf2>
 8004494:	0669      	lsls	r1, r5, #25
 8004496:	d5fb      	bpl.n	8004490 <_printf_i+0xe8>
 8004498:	881d      	ldrh	r5, [r3, #0]
 800449a:	2f6f      	cmp	r7, #111	; 0x6f
 800449c:	bf0c      	ite	eq
 800449e:	2308      	moveq	r3, #8
 80044a0:	230a      	movne	r3, #10
 80044a2:	4852      	ldr	r0, [pc, #328]	; (80045ec <_printf_i+0x244>)
 80044a4:	2100      	movs	r1, #0
 80044a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044aa:	6866      	ldr	r6, [r4, #4]
 80044ac:	2e00      	cmp	r6, #0
 80044ae:	bfa8      	it	ge
 80044b0:	6821      	ldrge	r1, [r4, #0]
 80044b2:	60a6      	str	r6, [r4, #8]
 80044b4:	bfa4      	itt	ge
 80044b6:	f021 0104 	bicge.w	r1, r1, #4
 80044ba:	6021      	strge	r1, [r4, #0]
 80044bc:	b90d      	cbnz	r5, 80044c2 <_printf_i+0x11a>
 80044be:	2e00      	cmp	r6, #0
 80044c0:	d04d      	beq.n	800455e <_printf_i+0x1b6>
 80044c2:	4616      	mov	r6, r2
 80044c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80044c8:	fb03 5711 	mls	r7, r3, r1, r5
 80044cc:	5dc7      	ldrb	r7, [r0, r7]
 80044ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044d2:	462f      	mov	r7, r5
 80044d4:	42bb      	cmp	r3, r7
 80044d6:	460d      	mov	r5, r1
 80044d8:	d9f4      	bls.n	80044c4 <_printf_i+0x11c>
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d10b      	bne.n	80044f6 <_printf_i+0x14e>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07df      	lsls	r7, r3, #31
 80044e2:	d508      	bpl.n	80044f6 <_printf_i+0x14e>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6861      	ldr	r1, [r4, #4]
 80044e8:	4299      	cmp	r1, r3
 80044ea:	bfde      	ittt	le
 80044ec:	2330      	movle	r3, #48	; 0x30
 80044ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80044f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80044f6:	1b92      	subs	r2, r2, r6
 80044f8:	6122      	str	r2, [r4, #16]
 80044fa:	464b      	mov	r3, r9
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f8cd a000 	str.w	sl, [sp]
 8004504:	aa03      	add	r2, sp, #12
 8004506:	f7ff fedf 	bl	80042c8 <_printf_common>
 800450a:	3001      	adds	r0, #1
 800450c:	d14c      	bne.n	80045a8 <_printf_i+0x200>
 800450e:	f04f 30ff 	mov.w	r0, #4294967295
 8004512:	b004      	add	sp, #16
 8004514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004518:	4834      	ldr	r0, [pc, #208]	; (80045ec <_printf_i+0x244>)
 800451a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800451e:	680e      	ldr	r6, [r1, #0]
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	f856 5b04 	ldr.w	r5, [r6], #4
 8004526:	061f      	lsls	r7, r3, #24
 8004528:	600e      	str	r6, [r1, #0]
 800452a:	d514      	bpl.n	8004556 <_printf_i+0x1ae>
 800452c:	07d9      	lsls	r1, r3, #31
 800452e:	bf44      	itt	mi
 8004530:	f043 0320 	orrmi.w	r3, r3, #32
 8004534:	6023      	strmi	r3, [r4, #0]
 8004536:	b91d      	cbnz	r5, 8004540 <_printf_i+0x198>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f023 0320 	bic.w	r3, r3, #32
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	2310      	movs	r3, #16
 8004542:	e7af      	b.n	80044a4 <_printf_i+0xfc>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	f043 0320 	orr.w	r3, r3, #32
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	2378      	movs	r3, #120	; 0x78
 800454e:	4828      	ldr	r0, [pc, #160]	; (80045f0 <_printf_i+0x248>)
 8004550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004554:	e7e3      	b.n	800451e <_printf_i+0x176>
 8004556:	065e      	lsls	r6, r3, #25
 8004558:	bf48      	it	mi
 800455a:	b2ad      	uxthmi	r5, r5
 800455c:	e7e6      	b.n	800452c <_printf_i+0x184>
 800455e:	4616      	mov	r6, r2
 8004560:	e7bb      	b.n	80044da <_printf_i+0x132>
 8004562:	680b      	ldr	r3, [r1, #0]
 8004564:	6826      	ldr	r6, [r4, #0]
 8004566:	1d1d      	adds	r5, r3, #4
 8004568:	6960      	ldr	r0, [r4, #20]
 800456a:	600d      	str	r5, [r1, #0]
 800456c:	0635      	lsls	r5, r6, #24
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	d501      	bpl.n	8004576 <_printf_i+0x1ce>
 8004572:	6018      	str	r0, [r3, #0]
 8004574:	e002      	b.n	800457c <_printf_i+0x1d4>
 8004576:	0671      	lsls	r1, r6, #25
 8004578:	d5fb      	bpl.n	8004572 <_printf_i+0x1ca>
 800457a:	8018      	strh	r0, [r3, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	4616      	mov	r6, r2
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	e7ba      	b.n	80044fa <_printf_i+0x152>
 8004584:	680b      	ldr	r3, [r1, #0]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	600a      	str	r2, [r1, #0]
 800458a:	681e      	ldr	r6, [r3, #0]
 800458c:	2100      	movs	r1, #0
 800458e:	4630      	mov	r0, r6
 8004590:	6862      	ldr	r2, [r4, #4]
 8004592:	f000 f82f 	bl	80045f4 <memchr>
 8004596:	b108      	cbz	r0, 800459c <_printf_i+0x1f4>
 8004598:	1b80      	subs	r0, r0, r6
 800459a:	6060      	str	r0, [r4, #4]
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	6123      	str	r3, [r4, #16]
 80045a0:	2300      	movs	r3, #0
 80045a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a6:	e7a8      	b.n	80044fa <_printf_i+0x152>
 80045a8:	4632      	mov	r2, r6
 80045aa:	4649      	mov	r1, r9
 80045ac:	4640      	mov	r0, r8
 80045ae:	6923      	ldr	r3, [r4, #16]
 80045b0:	47d0      	blx	sl
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0ab      	beq.n	800450e <_printf_i+0x166>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	079b      	lsls	r3, r3, #30
 80045ba:	d413      	bmi.n	80045e4 <_printf_i+0x23c>
 80045bc:	68e0      	ldr	r0, [r4, #12]
 80045be:	9b03      	ldr	r3, [sp, #12]
 80045c0:	4298      	cmp	r0, r3
 80045c2:	bfb8      	it	lt
 80045c4:	4618      	movlt	r0, r3
 80045c6:	e7a4      	b.n	8004512 <_printf_i+0x16a>
 80045c8:	2301      	movs	r3, #1
 80045ca:	4632      	mov	r2, r6
 80045cc:	4649      	mov	r1, r9
 80045ce:	4640      	mov	r0, r8
 80045d0:	47d0      	blx	sl
 80045d2:	3001      	adds	r0, #1
 80045d4:	d09b      	beq.n	800450e <_printf_i+0x166>
 80045d6:	3501      	adds	r5, #1
 80045d8:	68e3      	ldr	r3, [r4, #12]
 80045da:	9903      	ldr	r1, [sp, #12]
 80045dc:	1a5b      	subs	r3, r3, r1
 80045de:	42ab      	cmp	r3, r5
 80045e0:	dcf2      	bgt.n	80045c8 <_printf_i+0x220>
 80045e2:	e7eb      	b.n	80045bc <_printf_i+0x214>
 80045e4:	2500      	movs	r5, #0
 80045e6:	f104 0619 	add.w	r6, r4, #25
 80045ea:	e7f5      	b.n	80045d8 <_printf_i+0x230>
 80045ec:	080048a5 	.word	0x080048a5
 80045f0:	080048b6 	.word	0x080048b6

080045f4 <memchr>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	b510      	push	{r4, lr}
 80045f8:	b2c9      	uxtb	r1, r1
 80045fa:	4402      	add	r2, r0
 80045fc:	4293      	cmp	r3, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	d101      	bne.n	8004606 <memchr+0x12>
 8004602:	2000      	movs	r0, #0
 8004604:	e003      	b.n	800460e <memchr+0x1a>
 8004606:	7804      	ldrb	r4, [r0, #0]
 8004608:	3301      	adds	r3, #1
 800460a:	428c      	cmp	r4, r1
 800460c:	d1f6      	bne.n	80045fc <memchr+0x8>
 800460e:	bd10      	pop	{r4, pc}

08004610 <memcpy>:
 8004610:	440a      	add	r2, r1
 8004612:	4291      	cmp	r1, r2
 8004614:	f100 33ff 	add.w	r3, r0, #4294967295
 8004618:	d100      	bne.n	800461c <memcpy+0xc>
 800461a:	4770      	bx	lr
 800461c:	b510      	push	{r4, lr}
 800461e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004622:	4291      	cmp	r1, r2
 8004624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004628:	d1f9      	bne.n	800461e <memcpy+0xe>
 800462a:	bd10      	pop	{r4, pc}

0800462c <memmove>:
 800462c:	4288      	cmp	r0, r1
 800462e:	b510      	push	{r4, lr}
 8004630:	eb01 0402 	add.w	r4, r1, r2
 8004634:	d902      	bls.n	800463c <memmove+0x10>
 8004636:	4284      	cmp	r4, r0
 8004638:	4623      	mov	r3, r4
 800463a:	d807      	bhi.n	800464c <memmove+0x20>
 800463c:	1e43      	subs	r3, r0, #1
 800463e:	42a1      	cmp	r1, r4
 8004640:	d008      	beq.n	8004654 <memmove+0x28>
 8004642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800464a:	e7f8      	b.n	800463e <memmove+0x12>
 800464c:	4601      	mov	r1, r0
 800464e:	4402      	add	r2, r0
 8004650:	428a      	cmp	r2, r1
 8004652:	d100      	bne.n	8004656 <memmove+0x2a>
 8004654:	bd10      	pop	{r4, pc}
 8004656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800465a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800465e:	e7f7      	b.n	8004650 <memmove+0x24>

08004660 <_free_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4605      	mov	r5, r0
 8004664:	2900      	cmp	r1, #0
 8004666:	d043      	beq.n	80046f0 <_free_r+0x90>
 8004668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800466c:	1f0c      	subs	r4, r1, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	bfb8      	it	lt
 8004672:	18e4      	addlt	r4, r4, r3
 8004674:	f000 f8d0 	bl	8004818 <__malloc_lock>
 8004678:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <_free_r+0x94>)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	4610      	mov	r0, r2
 800467e:	b933      	cbnz	r3, 800468e <_free_r+0x2e>
 8004680:	6063      	str	r3, [r4, #4]
 8004682:	6014      	str	r4, [r2, #0]
 8004684:	4628      	mov	r0, r5
 8004686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800468a:	f000 b8cb 	b.w	8004824 <__malloc_unlock>
 800468e:	42a3      	cmp	r3, r4
 8004690:	d90a      	bls.n	80046a8 <_free_r+0x48>
 8004692:	6821      	ldr	r1, [r4, #0]
 8004694:	1862      	adds	r2, r4, r1
 8004696:	4293      	cmp	r3, r2
 8004698:	bf01      	itttt	eq
 800469a:	681a      	ldreq	r2, [r3, #0]
 800469c:	685b      	ldreq	r3, [r3, #4]
 800469e:	1852      	addeq	r2, r2, r1
 80046a0:	6022      	streq	r2, [r4, #0]
 80046a2:	6063      	str	r3, [r4, #4]
 80046a4:	6004      	str	r4, [r0, #0]
 80046a6:	e7ed      	b.n	8004684 <_free_r+0x24>
 80046a8:	461a      	mov	r2, r3
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b10b      	cbz	r3, 80046b2 <_free_r+0x52>
 80046ae:	42a3      	cmp	r3, r4
 80046b0:	d9fa      	bls.n	80046a8 <_free_r+0x48>
 80046b2:	6811      	ldr	r1, [r2, #0]
 80046b4:	1850      	adds	r0, r2, r1
 80046b6:	42a0      	cmp	r0, r4
 80046b8:	d10b      	bne.n	80046d2 <_free_r+0x72>
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	4401      	add	r1, r0
 80046be:	1850      	adds	r0, r2, r1
 80046c0:	4283      	cmp	r3, r0
 80046c2:	6011      	str	r1, [r2, #0]
 80046c4:	d1de      	bne.n	8004684 <_free_r+0x24>
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	4401      	add	r1, r0
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	6053      	str	r3, [r2, #4]
 80046d0:	e7d8      	b.n	8004684 <_free_r+0x24>
 80046d2:	d902      	bls.n	80046da <_free_r+0x7a>
 80046d4:	230c      	movs	r3, #12
 80046d6:	602b      	str	r3, [r5, #0]
 80046d8:	e7d4      	b.n	8004684 <_free_r+0x24>
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	1821      	adds	r1, r4, r0
 80046de:	428b      	cmp	r3, r1
 80046e0:	bf01      	itttt	eq
 80046e2:	6819      	ldreq	r1, [r3, #0]
 80046e4:	685b      	ldreq	r3, [r3, #4]
 80046e6:	1809      	addeq	r1, r1, r0
 80046e8:	6021      	streq	r1, [r4, #0]
 80046ea:	6063      	str	r3, [r4, #4]
 80046ec:	6054      	str	r4, [r2, #4]
 80046ee:	e7c9      	b.n	8004684 <_free_r+0x24>
 80046f0:	bd38      	pop	{r3, r4, r5, pc}
 80046f2:	bf00      	nop
 80046f4:	20000098 	.word	0x20000098

080046f8 <_malloc_r>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	1ccd      	adds	r5, r1, #3
 80046fc:	f025 0503 	bic.w	r5, r5, #3
 8004700:	3508      	adds	r5, #8
 8004702:	2d0c      	cmp	r5, #12
 8004704:	bf38      	it	cc
 8004706:	250c      	movcc	r5, #12
 8004708:	2d00      	cmp	r5, #0
 800470a:	4606      	mov	r6, r0
 800470c:	db01      	blt.n	8004712 <_malloc_r+0x1a>
 800470e:	42a9      	cmp	r1, r5
 8004710:	d903      	bls.n	800471a <_malloc_r+0x22>
 8004712:	230c      	movs	r3, #12
 8004714:	6033      	str	r3, [r6, #0]
 8004716:	2000      	movs	r0, #0
 8004718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800471a:	f000 f87d 	bl	8004818 <__malloc_lock>
 800471e:	4921      	ldr	r1, [pc, #132]	; (80047a4 <_malloc_r+0xac>)
 8004720:	680a      	ldr	r2, [r1, #0]
 8004722:	4614      	mov	r4, r2
 8004724:	b99c      	cbnz	r4, 800474e <_malloc_r+0x56>
 8004726:	4f20      	ldr	r7, [pc, #128]	; (80047a8 <_malloc_r+0xb0>)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	b923      	cbnz	r3, 8004736 <_malloc_r+0x3e>
 800472c:	4621      	mov	r1, r4
 800472e:	4630      	mov	r0, r6
 8004730:	f000 f862 	bl	80047f8 <_sbrk_r>
 8004734:	6038      	str	r0, [r7, #0]
 8004736:	4629      	mov	r1, r5
 8004738:	4630      	mov	r0, r6
 800473a:	f000 f85d 	bl	80047f8 <_sbrk_r>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d123      	bne.n	800478a <_malloc_r+0x92>
 8004742:	230c      	movs	r3, #12
 8004744:	4630      	mov	r0, r6
 8004746:	6033      	str	r3, [r6, #0]
 8004748:	f000 f86c 	bl	8004824 <__malloc_unlock>
 800474c:	e7e3      	b.n	8004716 <_malloc_r+0x1e>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	1b5b      	subs	r3, r3, r5
 8004752:	d417      	bmi.n	8004784 <_malloc_r+0x8c>
 8004754:	2b0b      	cmp	r3, #11
 8004756:	d903      	bls.n	8004760 <_malloc_r+0x68>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	441c      	add	r4, r3
 800475c:	6025      	str	r5, [r4, #0]
 800475e:	e004      	b.n	800476a <_malloc_r+0x72>
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	42a2      	cmp	r2, r4
 8004764:	bf0c      	ite	eq
 8004766:	600b      	streq	r3, [r1, #0]
 8004768:	6053      	strne	r3, [r2, #4]
 800476a:	4630      	mov	r0, r6
 800476c:	f000 f85a 	bl	8004824 <__malloc_unlock>
 8004770:	f104 000b 	add.w	r0, r4, #11
 8004774:	1d23      	adds	r3, r4, #4
 8004776:	f020 0007 	bic.w	r0, r0, #7
 800477a:	1ac2      	subs	r2, r0, r3
 800477c:	d0cc      	beq.n	8004718 <_malloc_r+0x20>
 800477e:	1a1b      	subs	r3, r3, r0
 8004780:	50a3      	str	r3, [r4, r2]
 8004782:	e7c9      	b.n	8004718 <_malloc_r+0x20>
 8004784:	4622      	mov	r2, r4
 8004786:	6864      	ldr	r4, [r4, #4]
 8004788:	e7cc      	b.n	8004724 <_malloc_r+0x2c>
 800478a:	1cc4      	adds	r4, r0, #3
 800478c:	f024 0403 	bic.w	r4, r4, #3
 8004790:	42a0      	cmp	r0, r4
 8004792:	d0e3      	beq.n	800475c <_malloc_r+0x64>
 8004794:	1a21      	subs	r1, r4, r0
 8004796:	4630      	mov	r0, r6
 8004798:	f000 f82e 	bl	80047f8 <_sbrk_r>
 800479c:	3001      	adds	r0, #1
 800479e:	d1dd      	bne.n	800475c <_malloc_r+0x64>
 80047a0:	e7cf      	b.n	8004742 <_malloc_r+0x4a>
 80047a2:	bf00      	nop
 80047a4:	20000098 	.word	0x20000098
 80047a8:	2000009c 	.word	0x2000009c

080047ac <_realloc_r>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	4607      	mov	r7, r0
 80047b0:	4614      	mov	r4, r2
 80047b2:	460e      	mov	r6, r1
 80047b4:	b921      	cbnz	r1, 80047c0 <_realloc_r+0x14>
 80047b6:	4611      	mov	r1, r2
 80047b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047bc:	f7ff bf9c 	b.w	80046f8 <_malloc_r>
 80047c0:	b922      	cbnz	r2, 80047cc <_realloc_r+0x20>
 80047c2:	f7ff ff4d 	bl	8004660 <_free_r>
 80047c6:	4625      	mov	r5, r4
 80047c8:	4628      	mov	r0, r5
 80047ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047cc:	f000 f830 	bl	8004830 <_malloc_usable_size_r>
 80047d0:	42a0      	cmp	r0, r4
 80047d2:	d20f      	bcs.n	80047f4 <_realloc_r+0x48>
 80047d4:	4621      	mov	r1, r4
 80047d6:	4638      	mov	r0, r7
 80047d8:	f7ff ff8e 	bl	80046f8 <_malloc_r>
 80047dc:	4605      	mov	r5, r0
 80047de:	2800      	cmp	r0, #0
 80047e0:	d0f2      	beq.n	80047c8 <_realloc_r+0x1c>
 80047e2:	4631      	mov	r1, r6
 80047e4:	4622      	mov	r2, r4
 80047e6:	f7ff ff13 	bl	8004610 <memcpy>
 80047ea:	4631      	mov	r1, r6
 80047ec:	4638      	mov	r0, r7
 80047ee:	f7ff ff37 	bl	8004660 <_free_r>
 80047f2:	e7e9      	b.n	80047c8 <_realloc_r+0x1c>
 80047f4:	4635      	mov	r5, r6
 80047f6:	e7e7      	b.n	80047c8 <_realloc_r+0x1c>

080047f8 <_sbrk_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	2300      	movs	r3, #0
 80047fc:	4d05      	ldr	r5, [pc, #20]	; (8004814 <_sbrk_r+0x1c>)
 80047fe:	4604      	mov	r4, r0
 8004800:	4608      	mov	r0, r1
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	f7fc f8ae 	bl	8000964 <_sbrk>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_sbrk_r+0x1a>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	b103      	cbz	r3, 8004812 <_sbrk_r+0x1a>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	2000023c 	.word	0x2000023c

08004818 <__malloc_lock>:
 8004818:	4801      	ldr	r0, [pc, #4]	; (8004820 <__malloc_lock+0x8>)
 800481a:	f000 b811 	b.w	8004840 <__retarget_lock_acquire_recursive>
 800481e:	bf00      	nop
 8004820:	20000244 	.word	0x20000244

08004824 <__malloc_unlock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_unlock+0x8>)
 8004826:	f000 b80c 	b.w	8004842 <__retarget_lock_release_recursive>
 800482a:	bf00      	nop
 800482c:	20000244 	.word	0x20000244

08004830 <_malloc_usable_size_r>:
 8004830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004834:	1f18      	subs	r0, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfbc      	itt	lt
 800483a:	580b      	ldrlt	r3, [r1, r0]
 800483c:	18c0      	addlt	r0, r0, r3
 800483e:	4770      	bx	lr

08004840 <__retarget_lock_acquire_recursive>:
 8004840:	4770      	bx	lr

08004842 <__retarget_lock_release_recursive>:
 8004842:	4770      	bx	lr

08004844 <_init>:
 8004844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004846:	bf00      	nop
 8004848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800484a:	bc08      	pop	{r3}
 800484c:	469e      	mov	lr, r3
 800484e:	4770      	bx	lr

08004850 <_fini>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr
